#**************************************************************************
#																		  *
#	PROJECT		: MIPS port	for	UCOS-II									  *
#																		  *
#	MODULE		: MakeFile												  *
#																		  *
#	AUTHOR		: wuyueqian										                    *
#																		  *
#	PROCESSOR	: MIPS 4KEc	(32	bit	RISC) -	Actions	board				  *
#																		  *
#	Tool-chain	:  Cygnus											 *
#																		  *
#	DESCRIPTION	:														  *
#	Makefile used for building application.								  *
#																		  *
#	The	default	target (all) builds	application	in two formats :		  *
#	*.elf :	Image in ELF format.										  *
#	*.rec :	Image in S-record format.									  *
#																		  *
#	The	linker also	generates a	MAP	file "*.map".						  *
#																		  *
#	Other targets are :													  *
#	clean :	   Deletes all files generated by makefile.					  *
#	depend :   Builds dependency file.									  *
#																		  *
#*************************************************************************/
# **********************************************
# Type of Processor	& Board
# **********************************************
Processor =	mips
# **********************************************
# Directories
# **********************************************
#以makefile文件的存放目录为起始点，指定代码管理的根目录的相对路径 uvob
ROOT	  =	./../../../../
#同时为了方便，可以指定其他目录，引用一个变量的格式为 $(变量名称)
FWSPROOT   = $(ROOT)/fwsp
PSPLIBDIR  = $(ROOT)/us282a/psp_rel/lib
PSPRELROOT = $(ROOT)/us282a/psp_rel

#把公共路径加载进来
include	./../../cfg/common_path
#把公共定义makefile加载进来
include	./../../cfg/rules.mk
# **********************************************
# Name of application 开发人员需修改处(1)
IMAGENAME = uhid
#所要编译的源文件的存放位置,开发人员需修改处(2)
SRC = $(CASE)/drv
SRCDIR_16 = $(SRC)/usb_hid
SRCDIR_32 =
#目标文件送往的文件夹路径,开发人员需修改处(3) ----gch_debug: 暂时写为"./make_obj"，实际应为"$(ROOT)/us282a/psp_rel/bin_original"
OBJECT_BIN_PATH = $(CASE)/fwpkg/drv
# **********************************************


#工具名称
DRV_BUILDER = $(ROOT)/us282a/psp_rel/tools/drv_builder.exe
AP_BUILDER = $(ROOT)/us282a/psp_rel/tools/ap_builder.exe
MMM_CODEC_BUILDER = $(ROOT)/us282a/psp_rel/tools/mmm_codec_builder.exe  
#存放结果文件的目录，这里的设置为当前目录，即生成的结果文件放在当前目录
LINKDIR	  =	.
#指定依赖过程的文件的搜索路径，把源文件的路径写上即可
VPATH	=	$(SRCDIR_16) $(SRCDIR_32)

# **********************************************
# Image	file names and map file
# **********************************************
#指定结果文件的名称
IMAGE_ELF =	$(IMAGENAME).exe
IMAGE_LST =	$(IMAGENAME).lst
IMAGE_REC =	$(IMAGENAME).rec
IMAGE_BIN =	$(IMAGENAME).sys
MAP       =     $(IMAGENAME).map
TARGET_DRV = $(IMAGENAME).drv
TARGET_EXT   = exe lst map drv info
TARGET_FILES = $(foreach n,$(TARGET_EXT),$(IMAGENAME).$(n))

# **********************************************
# Compiler and linker options
# **********************************************

#指定程序中引用的头文件的搜索路径，一般源码include时只写上头文件的名称，没有路径信息。这时就根据这个选项去搜索该头文件
#old : INCLUDE	  =	 -I$(FWSPROOT)/include/ucos -I$(FWSPROOT)/include	 -I$(FWSPROOT)/inc 
INCLUDE	  =	 -I$(PSPRELROOT)/include/ucos -I$(PSPRELROOT)/include -I$(FWSPROOT)/inc -I$(SRC)/usb_hid

#指定链接时搜索的路径
LINCLUDE = -L$(ROOT)/us282a/psp_rel/lib -L$(PSPRELROOT)/include

#把公共定义makefile加载进来
include	$(ROOT)/us282a/psp_rel/cfg/rules.mk

#指定自定义链接脚本的名称
LD_SCRIPT = uhid_linker.xn

#链接命令行选项
LD_OPTS = -G0 $(LINCLUDE) -T $(LD_SCRIPT) -o $(IMAGE_ELF) -Map $(MAP) $(OFORMAT) 
#CC_OPTS_O0 += -mlong-calls


# **********************************************
# Files	to be compiled
# **********************************************

#获得.c后缀源码
SRC_C_16  = $(foreach dir,	$(SRCDIR_16), $(wildcard $(dir)/*.c))
#转换为.o格式文件名称，不带路径信息
OBJ_C_16  = $(notdir $(patsubst %.c, %.o, $(SRC_C_16)))

#获得.c后缀源码
SRC_C_32  = $(foreach dir,	$(SRCDIR_32), $(wildcard $(dir)/*.c))
#转换为.o格式文件名称，不带路径信息
OBJ_C_32  = $(notdir $(patsubst %.c, %.o, $(SRC_C_32)))

#获得.S后缀源码
SRC_S_16  = $(foreach dir,	$(SRCDIR_16), $(wildcard $(dir)/*.S))
#转换为.o格式文件名称，不带路径信息
OBJ_S_16  = $(notdir $(patsubst %.S, %.o, $(SRC_S_16)))

#获得.S后缀源码
SRC_S_32  = $(foreach dir,	$(SRCDIR_32), $(wildcard $(dir)/*.S))
#转换为.o格式文件名称，不带路径信息
OBJ_S_32  = $(notdir $(patsubst %.S, %.o, $(SRC_S_32)))

#获得所有的.o文件名称
OBJ = $(OBJ_C_16) $(OBJ_S_16) $(OBJ_C_32) $(OBJ_S_32)


# **********************************************
# Rules
# **********************************************
#make目标
.PHONY : all

#dump出lst文件
all : $(IMAGE_ELF)
#old: $(OBJDUMP) -D $(IMAGE_ELF) > $(IMAGE_LST)
	$(OBJDUMP) -S $(IMAGE_ELF) > $(IMAGE_LST)
	sde-readelf -a $(IMAGE_ELF) > readelf.txt
	$(DRV_BUILDER) $(IMAGE_ELF) $(TARGET_DRV)
	cp -f $(TARGET_DRV) $(OBJECT_BIN_PATH)
# ----gch_debug: 用nm命令把各个obj文件的变量信息放入文件里
#	sde-nm $(OBJ) > nm.txt
# ----gch_debug: 用sde-size命令把各个obj文件的各个段的大小放入文件里
#	sde-size $(OBJ) > size.txt
# ----gch_debug: 用sde-readelf命令把各个obj文件的完整结构放入文件里
#	sde-readelf -a $(IMAGE_ELF) > readelf.txt

#链接过程
$(IMAGE_ELF) : $(OBJ)
	$(LD) $(OBJ) $(PSPLIBDIR)/api.a $(LD_OPTS)

#编译过程	
$(OBJ_C_16) : %.o : %.c
	$(CC) $(CC_OPTS_O0_16) -o	$@ $<
	@echo

$(OBJ_S_16) : %.o : %.S
	$(CC) $(CC_OPTS_O0_A_16) -o $@ $<
	@echo

$(OBJ_C_32) : %.o : %.c
	$(CC) $(CC_OPTS_O0) -o	$@ $<
	@echo

$(OBJ_S_32) : %.o : %.S
	$(CC) $(CC_OPTS_O0_A) -o $@ $<
	@echo



	
#删除结果文件
.PHONY : clean

clean :
	rm -f $(LINKDIR)/*.o
	rm -f $(LINKDIR)/$(IMAGENAME).*
	rm -f *.txt

	