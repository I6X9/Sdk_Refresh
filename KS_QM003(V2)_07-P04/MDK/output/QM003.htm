<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\QM003.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\QM003.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Aug 26 16:55:14 2019
<BR><P>
<H3>Maximum Stack Usage =       2384 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
amrnb_decoder_decode &rArr; amrnb_decoder_interface_decode &rArr; amrnb_decoder_spdec_decode_frame &rArr; amrnb_decoder_spdec_decode_amr &rArr; amrnb_decoder_spdec_dtx_dec &rArr; amrnb_decoder_spdec_syn_filt &rArr; __aeabi_memcpy4
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[df]">__down_interruptible_failed</a>
 <LI><a href="#[e0]">__down_trylock_failed</a>
 <LI><a href="#[d0]">__up_wakeup</a>
 <LI><a href="#[19]">__mv_main</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f0]">__asm___6_init_c_2bb6fb04__Delay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f0]">__asm___6_init_c_2bb6fb04__Delay</a><BR>
 <LI><a href="#[9]">nmi_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">nmi_handler</a><BR>
 <LI><a href="#[11c]">__asm___6_msgq_c_38077172__Delay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11c]">__asm___6_msgq_c_38077172__Delay</a><BR>
 <LI><a href="#[8b0]">msgq_msg_ioctl</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9a0]">xTaskResumeAll</a><BR>
 <LI><a href="#[2b8]">AvrcpHandlePanelInput</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[508]">AvrcpPanelCnf</a><BR>
 <LI><a href="#[55b]">hfHandleNegotiateComplete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55a]">HfStateNegotiate</a><BR>
 <LI><a href="#[5c6]">L2CAP_HciTxDone</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c7]">L2Cap_StateMachine</a><BR>
 <LI><a href="#[5a3]">HciDeleteConnection</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[329]">ME_Callback</a><BR>
 <LI><a href="#[7b]">MeHandleAccessModeOp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7b]">MeHandleAccessModeOp</a><BR>
 <LI><a href="#[59a]">HCI_Deinit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[329]">ME_Callback</a><BR>
 <LI><a href="#[333]">HciProcessEvent</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[329]">ME_Callback</a><BR>
 <LI><a href="#[339]">HCI_RadioInitialized</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[329]">ME_Callback</a><BR>
 <LI><a href="#[6f6]">RfFreeAllDLCs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f9]">RfFreeDLC</a><BR>
 <LI><a href="#[625]">SdpClientStartQuery</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[626]">SdpClientCallback</a><BR>
 <LI><a href="#[636]">SdpFindUuidInAttrib</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[636]">SdpFindUuidInAttrib</a><BR>
 <LI><a href="#[11d]">__asm___11_semaphore_c_04347d2c__Delay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11d]">__asm___11_semaphore_c_04347d2c__Delay</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[50]">A2dpAvdevCallback</a> from a2dp_sm.o(.text) referenced 5 times from a2dp.o(.text)
 <LI><a href="#[51]">A2dpCloseTimer</a> from a2dp.o(.text) referenced from a2dp.o(.text)
 <LI><a href="#[63]">A2dpSdpEventHandler</a> from a2dp_sdp.o(.text) referenced from a2dp_sdp.o(.text)
 <LI><a href="#[4c]">AdvavrcpCmdTimerNotify</a> from bt_a2dp_app.o(.text) referenced from bt_a2dp_app.o(.text)
 <LI><a href="#[4d]">AppA2dpCallBack</a> from bt_a2dp_app.o(.text) referenced from bt_a2dp_app.o(.text)
 <LI><a href="#[4e]">AppRcpCallback</a> from bt_a2dp_app.o(.text) referenced from bt_a2dp_app.o(.text)
 <LI><a href="#[544]">AtTimeout</a> from hf_at.o(.text) referenced from hf_at.o(.text)
 <LI><a href="#[7]">AudioCallBackDef</a> from device_audio.o(i.AudioCallBackDef) referenced 12 times from device_audio.o(.data)
 <LI><a href="#[d6]">AudioProcessTaskEntrance</a> from task_audio_process.o(i.AudioProcessTaskEntrance) referenced from main.o(i.main)
 <LI><a href="#[52]">AvCtpCallback</a> from avrcp.o(.text) referenced from avrcp.o(.text)
 <LI><a href="#[66]">AvL2Callback</a> from avdtpcon.o(.text) referenced from avdtp.o(.text)
 <LI><a href="#[b6]">AvctpConnCb</a> from avctpmsg.o(.text) referenced from avctpmsg.o(.text)
 <LI><a href="#[b1]">AvctpConnConnIncoming</a> from avctpcon.o(.text) referenced from avctpcon.o(.text)
 <LI><a href="#[b0]">AvctpConnConnPending</a> from avctpcon.o(.text) referenced from avctpcon.o(.text)
 <LI><a href="#[b4]">AvctpConnConnected</a> from avctpcon.o(.text) referenced from avctpcon.o(.text)
 <LI><a href="#[b3]">AvctpConnDiscIncoming</a> from avctpcon.o(.text) referenced from avctpcon.o(.text)
 <LI><a href="#[b2]">AvctpConnDiscPending</a> from avctpcon.o(.text) referenced from avctpcon.o(.text)
 <LI><a href="#[af]">AvctpConnDisconnected</a> from avctpcon.o(.text) referenced from avctpcon.o(.text)
 <LI><a href="#[65]">AvctpL2BrowseCallback</a> from avctpcon.o(.text) referenced from avctp.o(.text)
 <LI><a href="#[64]">AvctpL2Callback</a> from avctpcon.o(.text) referenced from avctp.o(.text)
 <LI><a href="#[b5]">AvctpMsgCb</a> from avctpmsg.o(.text) referenced from avctpmsg.o(.text)
 <LI><a href="#[6c]">AvdevAvdtpCallback</a> from avdevice.o(.text) referenced from avdevice.o(.text)
 <LI><a href="#[6b]">AvdevCmgrCallback</a> from avdevice.o(.text) referenced 2 times from avdevice.o(.text)
 <LI><a href="#[b9]">AvdtpConnConnIncoming</a> from avdtpcon.o(.text) referenced from avdtpcon.o(.text)
 <LI><a href="#[b8]">AvdtpConnConnPending</a> from avdtpcon.o(.text) referenced from avdtpcon.o(.text)
 <LI><a href="#[bc]">AvdtpConnConnected</a> from avdtpcon.o(.text) referenced from avdtpcon.o(.text)
 <LI><a href="#[bb]">AvdtpConnDiscIncoming</a> from avdtpcon.o(.text) referenced from avdtpcon.o(.text)
 <LI><a href="#[ba]">AvdtpConnDiscPending</a> from avdtpcon.o(.text) referenced from avdtpcon.o(.text)
 <LI><a href="#[b7]">AvdtpConnDisconnected</a> from avdtpcon.o(.text) referenced from avdtpcon.o(.text)
 <LI><a href="#[be]">AvdtpSigMgrConnCallback</a> from avsigmgr.o(.text) referenced from avsigmgr.o(.text)
 <LI><a href="#[bd]">AvdtpSigMgrSignalCallback</a> from avsigmgr.o(.text) referenced from avsigmgr.o(.text)
 <LI><a href="#[67]">AvdtpStrmConnCallback</a> from avsigmgr.o(.text) referenced from avdtp.o(.text)
 <LI><a href="#[54]">AvrcpCmgrCallback</a> from avrcp.o(.text) referenced from avrcp.o(.text)
 <LI><a href="#[69]">AvrcpPanelIntTimerExpired</a> from avrcppnl.o(.text) referenced from avrcppnl.o(.text)
 <LI><a href="#[6a]">AvrcpPanelRspTimerExpired</a> from avrcppnl.o(.text) referenced from avrcppnl.o(.text)
 <LI><a href="#[516]">AvrcpSdpCallback</a> from avrcpsdp.o(.text) referenced from avrcpsdp.o(.text)
 <LI><a href="#[68]">AvrcpTxTimeout</a> from avrcp.o(.text) referenced 4 times from avrcpact.o(.text)
 <LI><a href="#[bf]">AvtpTxTimeout</a> from avtp.o(.text) referenced from avtp.o(.text)
 <LI><a href="#[ae]">BtStackSendData</a> from bt_device_send.o(.text) referenced from transprt.o(.text)
 <LI><a href="#[14]">BuartInterrupt</a> from wifi_uart_com.o(.driver.isr) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[6d]">CmgrBbCheckTimerNotify</a> from conmgr.o(.text) referenced 2 times from conmgr.o(.text)
 <LI><a href="#[70]">CmgrIdleTimerNotify</a> from conmgr.o(.text) referenced from conmgr.o(.text)
 <LI><a href="#[6e]">ConnManager</a> from conmgr.o(.text) referenced 2 times from conmgr.o(.text)
 <LI><a href="#[6f]">ConnMgrScoRetryTimeout</a> from conmgr.o(.text) referenced from conmgr.o(.text)
 <LI><a href="#[d4]">DecoderTaskEntrance</a> from task_decoder.o(i.DecoderTaskEntrance) referenced from main.o(i.main)
 <LI><a href="#[5]">FSContextBufferAlloc</a> from fsmount_buffermanager.o(i.FSContextBufferAlloc) referenced 2 times from fsmount_buffermanager.o(.data)
 <LI><a href="#[6]">FSContextBufferFree</a> from fsmount_buffermanager.o(i.FSContextBufferFree) referenced 2 times from fsmount_buffermanager.o(.data)
 <LI><a href="#[13]">FuartInterrupt</a> from fuart.o(.driver.isr) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[1e5]">Get1of8RecInfo</a> from ddb4sp.o(.text) referenced 2 times from ddb4sp.o(.text)
 <LI><a href="#[20]">GetNameResultHandler</a> from bt_stack_api.o(.text) referenced 2 times from bt_stack_api.o(.text)
 <LI><a href="#[d3]">GetQuickResponseFlag</a> from dev_detect_driver.o(i.GetQuickResponseFlag) referenced from main.o(i.main)
 <LI><a href="#[11]">GpioInterrupt</a> from coding_key.o(.driver.isr) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[d5]">GuiTaskEntrance</a> from task_main.o(i.GuiTaskEntrance) referenced from main.o(i.main)
 <LI><a href="#[77]">HandleCancelInqOp</a> from me.o(.text) referenced from me.o(.text)
 <LI><a href="#[9b]">HandleChannelClass</a> from me.o(.text) referenced from me.o(.text)
 <LI><a href="#[a8]">HandleCompleteTaskRadioParms</a> from me.o(.text) referenced from me.o(.text)
 <LI><a href="#[97]">HandleGenCmdOp</a> from me.o(.text) referenced from me.o(.text)
 <LI><a href="#[75]">HandleGeneralTask</a> from me.o(.text) referenced from me.o(.text)
 <LI><a href="#[5f]">HandleGetOobDataCommandComplete</a> from mesec.o(.text) referenced from mesec.o(.text)
 <LI><a href="#[76]">HandleInquiryOp</a> from me.o(.text) referenced from me.o(.text)
 <LI><a href="#[8d]">HandleLocalNameChangeOp</a> from me.o(.text) referenced from me.o(.text)
 <LI><a href="#[5e]">HandleSecurityCommandComplete</a> from mesec.o(.text) referenced 5 times from mesec.o(.text)
 <LI><a href="#[a0]">HandleSetErrDataRepOp</a> from me.o(.text) referenced from me.o(.text)
 <LI><a href="#[7a]">HandleSetExtInqRespOp</a> from me.o(.text) referenced from me.o(.text)
 <LI><a href="#[78]">HandleSetInqModeOp</a> from me.o(.text) referenced from me.o(.text)
 <LI><a href="#[79]">HandleSetInqTxPwrOp</a> from me.o(.text) referenced from me.o(.text)
 <LI><a href="#[95]">HandleWriteCoDOp</a> from me.o(.text) referenced from me.o(.text)
 <LI><a href="#[96]">HandleWriteDefLinkPolicyOp</a> from me.o(.text) referenced from me.o(.text)
 <LI><a href="#[4f]">HandsFreeAppCallback</a> from bt_handsfree_app.o(.text) referenced from bt_handsfree_app.o(.text)
 <LI><a href="#[73]">HciPktsCompleteTimerHandler</a> from hci_proc.o(.text) referenced from hci.o(.text)
 <LI><a href="#[72]">HciResetRetryHandler</a> from hci.o(.text) referenced from hci.o(.text)
 <LI><a href="#[56]">HfRfCallback</a> from hf_sm.o(.text) referenced from hf.o(.text)
 <LI><a href="#[71]">HfSdpEventHandler</a> from hf_sdp.o(.text) referenced from hf_sdp.o(.text)
 <LI><a href="#[2d4]">HfServiceConnectionCallback</a> from hf.o(.text) referenced from hf.o(.text)
 <LI><a href="#[57]">HidL2Callback</a> from hid.o(.text) referenced from hid.o(.text)
 <LI><a href="#[d9]">IsWiFiCardLink</a> from wifi_control.o(i.IsWiFiCardLink) referenced from dev_state_machine.o(.constdata)
 <LI><a href="#[74]">L2CAP_TimerFire</a> from l2cap_utl.o(.text) referenced from l2cap_utl.o(.text)
 <LI><a href="#[53]">L2Cap_SecAccessRsp</a> from l2cap_if.o(.text) referenced 6 times from avrcp.o(.text)
 <LI><a href="#[9d]">MeChangeConnPacketTypeOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[7b]">MeHandleAccessModeOp</a> from meacc.o(.text) referenced from me.o(.text)
 <LI><a href="#[99]">MeHandleCancelConnectOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[9a]">MeHandleCancelRemNameOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[5a]">MeHandleCompleteTask</a> from me.o(.text) referenced 14 times from mecon.o(.text)
 <LI><a href="#[59]">MeHandleConnectionStatusOnly</a> from me.o(.text) referenced 9 times from mecon.o(.text)
 <LI><a href="#[9c]">MeHandleDiscoverRole</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[5b]">MeHandleDiscoverRoleTask</a> from mecon.o(.text) referenced from mecon.o(.text)
 <LI><a href="#[93]">MeHandleExitParkModeOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[90]">MeHandleExitSniffModeOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[8e]">MeHandleHoldModeOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[7d]">MeHandleLinkAcceptOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[7c]">MeHandleLinkConnectOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[7f]">MeHandleLinkDisconnectOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[7e]">MeHandleLinkRejectOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[92]">MeHandleParkModeOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[9f]">MeHandleReadRemExtFeaturesOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[9e]">MeHandleReadRemFeaturesOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[8c]">MeHandleRemNameReqOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[91]">MeHandleSetSniffSubratingParmsOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[8f]">MeHandleSniffModeOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[94]">MeHandleSwitchRoleOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[98]">MeHandleWriteLinkPolicyOp</a> from mecon.o(.text) referenced from me.o(.text)
 <LI><a href="#[5d]">MePendingCommandHandler</a> from me.o(.text) referenced 2 times from meif.o(.text)
 <LI><a href="#[aa]">RfAdvanceToClosedTimeoutHandler</a> from rfc_sm.o(.text) referenced from rfc_sm.o(.text)
 <LI><a href="#[a9]">RfAdvanceToOpenTimeoutHandler</a> from rfc_sm.o(.text) referenced from rfc_sm.o(.text)
 <LI><a href="#[c4]">RfDlcStateConnIncoming</a> from rfc_sm.o(.text) referenced from rfc_util.o(.text)
 <LI><a href="#[c3]">RfDlcStateConnPending</a> from rfc_sm.o(.text) referenced from rfc_util.o(.text)
 <LI><a href="#[c2]">RfDlcStateConnected</a> from rfc_sm.o(.text) referenced from rfc_util.o(.text)
 <LI><a href="#[c6]">RfDlcStateDiscIncoming</a> from rfc_sm.o(.text) referenced from rfc_util.o(.text)
 <LI><a href="#[c5]">RfDlcStateDiscPending</a> from rfc_sm.o(.text) referenced from rfc_util.o(.text)
 <LI><a href="#[c1]">RfDlcStateDisconnected</a> from rfc_sm.o(.text) referenced from rfc_util.o(.text)
 <LI><a href="#[c7]">RfDlcStateNegPending</a> from rfc_sm.o(.text) referenced from rfc_util.o(.text)
 <LI><a href="#[c8]">RfDlcStateSecPending</a> from rfc_sm.o(.text) referenced from rfc_util.o(.text)
 <LI><a href="#[c0]">RfL2Callback</a> from rfc_sm.o(.text) referenced from rfc_util.o(.text)
 <LI><a href="#[55]">RfSecCallback</a> from rfc_sm.o(.text) referenced 3 times from hf.o(.text)
 <LI><a href="#[c9]">RfServiceTimeoutHandler</a> from rfc_util.o(.text) referenced from rfc_util.o(.text)
 <LI><a href="#[6f7]">RfTimeoutHandler</a> from rfc_util.o(.text) referenced 2 times from rfc_util.o(.text)
 <LI><a href="#[ab]">RmgrHciCallback</a> from radiomgr.o(.text) referenced from radiomgr.o(.text)
 <LI><a href="#[ad]">RmgrRadioCallback</a> from radiomgr.o(.text) referenced from radiomgr.o(.text)
 <LI><a href="#[ac]">RmgrTranCallback</a> from radiomgr.o(.text) referenced from radiomgr.o(.text)
 <LI><a href="#[12]">RtcInterrupt</a> from rtc_control.o(.driver.isr) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[d1]">RtcTimerCB</a> from rtc_control.o(i.RtcTimerCB) referenced from rtc_control.o(i.RtcInitialize)
 <LI><a href="#[23]">SPPEventHandle</a> from btm_spp.o(.text) referenced from btm_spp.o(.text)
 <LI><a href="#[325]">SPPServiceConnectionCallback</a> from spp.o(.text) referenced from spp.o(.text)
 <LI><a href="#[a7]">ScoChangeConnPacketTypeOp</a> from mesco.o(.text) referenced from me.o(.text)
 <LI><a href="#[a3]">ScoHandleLinkAcceptOp</a> from mesco.o(.text) referenced from me.o(.text)
 <LI><a href="#[a1]">ScoHandleLinkConnectOp</a> from mesco.o(.text) referenced from me.o(.text)
 <LI><a href="#[a5]">ScoHandleLinkDisconnectOp</a> from mesco.o(.text) referenced from me.o(.text)
 <LI><a href="#[a4]">ScoHandleLinkRejectOp</a> from mesco.o(.text) referenced from me.o(.text)
 <LI><a href="#[a2]">ScoHandleLinkSetupOp</a> from mesco.o(.text) referenced from me.o(.text)
 <LI><a href="#[a6]">ScoHandleVoiceSettingsOp</a> from mesco.o(.text) referenced from me.o(.text)
 <LI><a href="#[629]">SdpClientL2CapCallback</a> from sdpclient.o(.text) referenced from sdpclient.o(.text)
 <LI><a href="#[621]">SdpQueryTimerFire</a> from sdpclient.o(.text) referenced from sdpclient.o(.text)
 <LI><a href="#[642]">SdpServL2CapCallback</a> from sdpserv.o(.text) referenced from sdpserv.o(.text)
 <LI><a href="#[5c]">SecAccessTimeoutHandler</a> from mesec.o(.text) referenced from meif.o(.text)
 <LI><a href="#[81]">SecHandleAuthenticateOp</a> from mesec.o(.text) referenced from me.o(.text)
 <LI><a href="#[83]">SecHandleAuthorizeOp</a> from mesec.o(.text) referenced from me.o(.text)
 <LI><a href="#[89]">SecHandleDenyOobDataReqRspOp</a> from mesec.o(.text) referenced from me.o(.text)
 <LI><a href="#[84]">SecHandleEncryptOp</a> from mesec.o(.text) referenced from me.o(.text)
 <LI><a href="#[8a]">SecHandleGetOobDataOp</a> from mesec.o(.text) referenced from me.o(.text)
 <LI><a href="#[87]">SecHandleIoCapRspOp</a> from mesec.o(.text) referenced from me.o(.text)
 <LI><a href="#[82]">SecHandleLinkKeyRspOp</a> from mesec.o(.text) referenced from me.o(.text)
 <LI><a href="#[88]">SecHandleRemOobDataReqRspOp</a> from mesec.o(.text) referenced from me.o(.text)
 <LI><a href="#[85]">SecHandleSecurityModeOp</a> from mesec.o(.text) referenced from me.o(.text)
 <LI><a href="#[86]">SecHandleSetSmpDbgModeOp</a> from mesec.o(.text) referenced from me.o(.text)
 <LI><a href="#[80]">SecHandleUserIoRspOp</a> from mesec.o(.text) referenced from me.o(.text)
 <LI><a href="#[8b]">SecMeHandleRefreshEncryptKeyOp</a> from mesec.o(.text) referenced from me.o(.text)
 <LI><a href="#[ce]">SoundRemindFillStreamCallback</a> from sound_remind.o(i.SoundRemindFillStreamCallback) referenced from task_decoder.o(i.DecoderGetType)
 <LI><a href="#[17]">Timer1Interrupt</a> from main.o(.driver.isr) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[15]">UsbInterrupt</a> from otg_int.o(.driver.isr) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[d2]">WiFiLedCb</a> from wifi_control.o(i.WiFiLedCb) referenced from wifi_control.o(i.WiFiControl)
 <LI><a href="#[cf]">__down_failed</a> from semaphore.o(.sched.stub) referenced from presearch.o(i.FsLock)
 <LI><a href="#[cf]">__down_failed</a> from semaphore.o(.sched.stub) referenced from dev_detect_driver.o(i.SetQuickResponseFlag)
 <LI><a href="#[19]">__mv_main</a> from startup.o(.text) referenced from startup.o(.text)
 <LI><a href="#[d0]">__up_wakeup</a> from semaphore.o(.sched.stub) referenced from presearch.o(i.FsUnLock)
 <LI><a href="#[d0]">__up_wakeup</a> from semaphore.o(.sched.stub) referenced from dev_detect_driver.o(i.SetQuickResponseFlag)
 <LI><a href="#[cc]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[cb]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[ca]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[40]">aac_decoder_can_continue</a> from aac_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[3f]">aac_decoder_close</a> from aac_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[3e]">aac_decoder_decode</a> from aac_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[3d]">aac_decoder_initialize</a> from aac_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[41]">aac_decoder_seek</a> from aac_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[45]">aif_decoder_can_continue</a> from aif_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[44]">aif_decoder_close</a> from aif_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[43]">aif_decoder_decode</a> from aif_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[42]">aif_decoder_initialize</a> from aif_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[46]">aif_decoder_seek</a> from aif_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[4a]">amrnb_decoder_can_continue</a> from amrnb_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[49]">amrnb_decoder_close</a> from amrnb_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[48]">amrnb_decoder_decode</a> from amrnb_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[47]">amrnb_decoder_initialize</a> from amrnb_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[4b]">amrnb_decoder_seek</a> from amrnb_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[1a]">arch_nvic_config</a> from setup.o(.mach.init) referenced from setup.o(.mach3.init)
 <LI><a href="#[16]">audio_decoder_interrupt_handler</a> from audio_decoder_api.o(.text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[c]">busfault_handler</a> from startup.o(.text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[1c]">calibrate_delay</a> from init.o(.mach.init) referenced from init.o(.mach4.init)
 <LI><a href="#[1d]">early_init_task</a> from tasks.o(.mach.init) referenced from tasks.o(.mach5.init)
 <LI><a href="#[3b]">flac_decoder_can_continue</a> from flac_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[3a]">flac_decoder_close</a> from flac_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[39]">flac_decoder_decode</a> from flac_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[38]">flac_decoder_initialize</a> from flac_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[3c]">flac_decoder_seek</a> from flac_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[cd]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[22]">global_callback</a> from bt_stack_api.o(.text) referenced from bt_stack_api.o(.text)
 <LI><a href="#[a]">hardfault_handler</a> from startup.o(.text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[18]">main</a> from main.o(i.main) referenced from startup.o(.text)
 <LI><a href="#[b]">memmanage_handler</a> from startup.o(.text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[1e]">mmm_init</a> from mmm.o(.mach.init) referenced from mmm.o(.mach5.init)
 <LI><a href="#[27]">mp3_decoder_can_continue</a> from mp3_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[26]">mp3_decoder_close</a> from mp3_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[25]">mp3_decoder_decode</a> from mp3_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[24]">mp3_decoder_initialize</a> from mp3_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[28]">mp3_decoder_seek</a> from mp3_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[1f]">msgq_init</a> from msgq.o(.mach.init) referenced from msgq.o(.mach8.init)
 <LI><a href="#[d7]">msgq_tmrchk_cbfun</a> from msgq.o(i.msgq_tmrchk_cbfun) referenced from tasks.o(i.prvIdleTask)
 <LI><a href="#[9]">nmi_handler</a> from startup.o(.text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[f]">pendsv_interrupt</a> from setup.o(.emb_text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[d8]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[61]">queryRfcommDataCallback</a> from btm_rfcom_data.o(.text) referenced from btm_rfcom_data.o(.text)
 <LI><a href="#[21]">reconnectTimerNotify</a> from bt_stack_api.o(.text) referenced from bt_stack_api.o(.text)
 <LI><a href="#[8]">reset_handler</a> from startup.o(.text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[58]">rfCallbackFunc</a> from spp.o(.text) referenced from spp.o(.text)
 <LI><a href="#[60]">rfDataCallbackFunc</a> from btm_rfcom_data.o(.text) referenced from btm_rfcom_data.o(.text)
 <LI><a href="#[62]">rfcLinkCallBack</a> from btm_rfcom_data.o(.text) referenced from btm_rfcom_data.o(.text)
 <LI><a href="#[31]">sbc_decoder_can_continue</a> from sbc_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[30]">sbc_decoder_close</a> from sbc_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[2f]">sbc_decoder_decode</a> from sbc_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[2e]">sbc_decoder_initialize</a> from sbc_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[32]">sbc_decoder_seek</a> from sbc_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[da]">stateClosed</a> from spp.o(.text) referenced from spp.o(.constdata)
 <LI><a href="#[dc]">stateConnected</a> from spp.o(.text) referenced from spp.o(.constdata)
 <LI><a href="#[db]">stateDefaultHandler</a> from spp.o(.text) referenced from spp.o(.constdata)
 <LI><a href="#[e]">svcall_interrupt</a> from setup.o(.emb_text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[1b]">systick_config</a> from setup.o(.mach.init) referenced from setup.o(.mach3.init)
 <LI><a href="#[10]">systick_interrupt</a> from setup.o(.driver.isr) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[d]">usagefault_handler</a> from startup.o(.text) referenced from startup.o(EXCEPT_VECTS)
 <LI><a href="#[36]">wav_decoder_can_continue</a> from wav_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[35]">wav_decoder_close</a> from wav_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[34]">wav_decoder_decode</a> from wav_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[33]">wav_decoder_initialize</a> from wav_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[37]">wav_decoder_seek</a> from wav_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[2c]">wma_decoder_can_continue</a> from wma_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[2b]">wma_decoder_close</a> from wma_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[2a]">wma_decoder_decode</a> from wma_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[29]">wma_decoder_initialize</a> from wma_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
 <LI><a href="#[2d]">wma_decoder_seek</a> from wma_decoder_api.o(.text) referenced from audio_decoder_api.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[dd]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e8]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ea]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[9db]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9dc]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9dd]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[9de]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[eb]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1c]"></a>calibrate_delay</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, init.o(.mach.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = calibrate_delay &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetCurrentSysClkFreq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_ioctl
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config_basic
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_init_c_2bb6fb04__Delay
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(.mach4.init)
</UL>
<P><STRONG><a name="[1f]"></a>msgq_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, msgq.o(.mach.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = msgq_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msgq.o(.mach8.init)
</UL>
<P><STRONG><a name="[1d]"></a>early_init_task</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tasks.o(.mach.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = early_init_task &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.mach5.init)
</UL>
<P><STRONG><a name="[1b]"></a>systick_config</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, setup.o(.mach.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = systick_config &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetCurrentSysClkFreq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_ioctl
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config_basic
</UL>
<BR>[Called By]<UL><LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setup.o(.mach3.init)
</UL>
<P><STRONG><a name="[1a]"></a>arch_nvic_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, setup.o(.mach.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arch_nvic_config &rArr; NVIC_interrupt_prio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_interrupt_prio_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setup.o(.mach3.init)
</UL>
<P><STRONG><a name="[1e]"></a>mmm_init</STRONG> (Thumb, 538 bytes, Stack size 48 bytes, mmm.o(.mach.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = mmm_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmm.o(.mach5.init)
</UL>
<P><STRONG><a name="[f5]"></a>mv_main</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, startup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[8]"></a>reset_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[9]"></a>nmi_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nmi_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[a]"></a>hardfault_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = hardfault_handler &rArr; trapfault_handler_dumpstack &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trapfault_handler_dumpstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[b]"></a>memmanage_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = memmanage_handler &rArr; trapfault_handler_dumpstack &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trapfault_handler_dumpstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[c]"></a>busfault_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = busfault_handler &rArr; trapfault_handler_dumpstack &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trapfault_handler_dumpstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[d]"></a>usagefault_handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = usagefault_handler &rArr; trapfault_handler_dumpstack &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trapfault_handler_dumpstack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[e1]"></a>SwUartDelay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sw_uart.o(CACHE.4KBMEM))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwUartSendByte
</UL>

<P><STRONG><a name="[e2]"></a>SwUartSendByte</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, sw_uart.o(CACHE.4KBMEM))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwUartDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwUartSend
</UL>

<P><STRONG><a name="[e3]"></a>SpiFlashInfoInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi_flash.o(CACHE.4KBMEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpiFlashInfoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateEn
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateDis
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>SpiFlashRead</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, spi_flash.o(CACHE.4KBMEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SpiFlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateEn
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateDis
</UL>
<BR>[Called By]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osc32kExtCapCalibrate
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSdkVer
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCodeSize
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCodeEncryptedInfo
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshBTInfoAreaInit
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashConstGetInfo
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashConstDataRead
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshLoad1of8Dev
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshGetPairingInfoWriteOffset
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshGetBtPairingInfoOffsetCallBk
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBakBPInfo
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBPInfoToFlash
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBakBPInfo
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBPInfoFromFlash
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLatestBPBak
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiUpgradeMcuSoftRunning
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashConstDataIdxFind
</UL>

<P><STRONG><a name="[e5]"></a>SpiFlashErase</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, spi_flash.o(CACHE.4KBMEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiFlashErase
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateEn
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateDis
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshBTInfoAreaInit
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshGetPairingInfoWriteOffset
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshErasePairedListArea
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBakBPInfo
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBPInfoFromFlash
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankFlashErase
</UL>

<P><STRONG><a name="[e6]"></a>SpiFlashIOCtl</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, spi_flash.o(CACHE.4KBMEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpiFlashIOCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateEn
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateDis
</UL>
<BR>[Called By]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashClkSet
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashUnlock
</UL>

<P><STRONG><a name="[e7]"></a>__udelay</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timeout.o(CACHE.4KBMEM))
<BR><BR>[Called By]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCtrlRegInit
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInCharge
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcChannelGetValue
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstPhubModule
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstMclk
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst12p288GeneratorModule
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSDA
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSCL
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSDA
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSCL
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChargeFull
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetOnkeyCnt
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrRst8s
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrWakeCore
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[fa]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[713]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[fc]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[fd]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ff]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[101]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[9df]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[f6]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_main
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9e0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[9e1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[9e2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[9e3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9e4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[9e5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[9e6]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[9e7]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[9e8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[9e9]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[9ea]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[9eb]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[9ec]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[9ed]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[9ee]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[9ef]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[9f0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[9f1]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[9f2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9f3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[9f4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[107]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[9f5]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[9f6]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[9f7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[9f8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[9f9]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[9fa]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[9fb]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[e9]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[9fc]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9fd]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry5.o(.ARM.Collect$$rtentry$$00000005))

<P><STRONG><a name="[103]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[9fe]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[104]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MsgRecv &rArr; SysDeviceMsgCtrl &rArr; GotoNextMode &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[9ff]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[720]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[106]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[a00]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[108]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[17]"></a>Timer1Interrupt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.driver.isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Timer1Interrupt &rArr; Mcu_TimerPollingRcvUartData &rArr; BuartRecv &rArr; Wait4EventTimeout &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1IntClr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffDetect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_TimerPollingRcvUartData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[11]"></a>GpioInterrupt</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, coding_key.o(.driver.isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GpioInterrupt &rArr; GpioIntClr &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntFlagGet
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntClr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioGetReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[12]"></a>RtcInterrupt</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rtc_control.o(.driver.isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = RtcInterrupt &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcCheckAlarmFlag
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAlarmIntClear
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcCurAlarmSleepAndStop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[14]"></a>BuartInterrupt</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wifi_uart_com.o(.driver.isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = BuartInterrupt &rArr; Mcu_RcvUartData &rArr; BuartRecv &rArr; Wait4EventTimeout &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_RcvUartData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[13]"></a>FuartInterrupt</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, fuart.o(.driver.isr))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[10]"></a>systick_interrupt</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, setup.o(.driver.isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = systick_interrupt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_notify_fromisr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[15]"></a>UsbInterrupt</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, otg_int.o(.driver.isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UsbInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[856]"></a>__asm___6_gpio_c_0b4f8ea1____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntClr
</UL>

<P><STRONG><a name="[855]"></a>__asm___6_gpio_c_0b4f8ea1____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntClr
</UL>

<P><STRONG><a name="[a01]"></a>__asm___6_gpio_c_0b4f8ea1____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.emb_text), UNUSED)

<P><STRONG><a name="[a02]"></a>__asm___6_gpio_c_0b4f8ea1____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.emb_text), UNUSED)

<P><STRONG><a name="[88e]"></a>__asm___9_lcd_seg_c_909eeb87____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_seg.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCtrlRegInit
</UL>

<P><STRONG><a name="[88d]"></a>__asm___9_lcd_seg_c_909eeb87____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_seg.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCtrlRegInit
</UL>

<P><STRONG><a name="[a03]"></a>__asm___9_lcd_seg_c_909eeb87____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_seg.o(.emb_text), UNUSED)

<P><STRONG><a name="[a04]"></a>__asm___9_lcd_seg_c_909eeb87____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_seg.o(.emb_text), UNUSED)

<P><STRONG><a name="[119]"></a>__asm___9_lcd_seg_c_909eeb87__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_seg.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_lcd_seg_c_909eeb87__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_lcd_seg_c_909eeb87__Delay
</UL>

<P><STRONG><a name="[a05]"></a>__asm___7_mixer_c_4d3fe62a____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixer.o(.emb_text), UNUSED)

<P><STRONG><a name="[a06]"></a>__asm___7_mixer_c_4d3fe62a____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixer.o(.emb_text), UNUSED)

<P><STRONG><a name="[8ae]"></a>__asm___7_mixer_c_4d3fe62a____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixer.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerProcess
</UL>

<P><STRONG><a name="[8ad]"></a>__asm___7_mixer_c_4d3fe62a____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mixer.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerProcess
</UL>

<P><STRONG><a name="[11a]"></a>__asm___7_mixer_c_4d3fe62a__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mixer.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_mixer_c_4d3fe62a__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_mixer_c_4d3fe62a__Delay
</UL>

<P><STRONG><a name="[a07]"></a>__asm___5_nvm_c_NvmRead____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nvm.o(.emb_text), UNUSED)

<P><STRONG><a name="[a08]"></a>__asm___5_nvm_c_NvmRead____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nvm.o(.emb_text), UNUSED)

<P><STRONG><a name="[8ba]"></a>__asm___5_nvm_c_NvmRead____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nvm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmRead
</UL>

<P><STRONG><a name="[8b9]"></a>__asm___5_nvm_c_NvmRead____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nvm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmRead
</UL>

<P><STRONG><a name="[8cd]"></a>__asm___5_pwm_c_75651d24____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnableChannel
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisableChannel
</UL>

<P><STRONG><a name="[8cc]"></a>__asm___5_pwm_c_75651d24____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnableChannel
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisableChannel
</UL>

<P><STRONG><a name="[a09]"></a>__asm___5_pwm_c_75651d24____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm.o(.emb_text), UNUSED)

<P><STRONG><a name="[a0a]"></a>__asm___5_pwm_c_75651d24____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm.o(.emb_text), UNUSED)

<P><STRONG><a name="[a0b]"></a>__asm___8_wakeup_c_93fc64cc____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wakeup.o(.emb_text), UNUSED)

<P><STRONG><a name="[a0c]"></a>__asm___8_wakeup_c_93fc64cc____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wakeup.o(.emb_text), UNUSED)

<P><STRONG><a name="[a0d]"></a>__asm___8_wakeup_c_93fc64cc____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wakeup.o(.emb_text), UNUSED)

<P><STRONG><a name="[739]"></a>__asm___8_wakeup_c_93fc64cc____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wakeup.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogModulePowerDwon
</UL>

<P><STRONG><a name="[11b]"></a>__asm___8_wakeup_c_93fc64cc__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wakeup.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_wakeup_c_93fc64cc__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_wakeup_c_93fc64cc__Delay
</UL>

<P><STRONG><a name="[92e]"></a>__asm___10_watchdog_c_WdgEn____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, watchdog.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgFeed
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgDis
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgEn
</UL>

<P><STRONG><a name="[92d]"></a>__asm___10_watchdog_c_WdgEn____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, watchdog.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgFeed
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgDis
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgEn
</UL>

<P><STRONG><a name="[a0e]"></a>__asm___10_watchdog_c_WdgEn____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, watchdog.o(.emb_text), UNUSED)

<P><STRONG><a name="[a0f]"></a>__asm___10_watchdog_c_WdgEn____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, watchdog.o(.emb_text), UNUSED)

<P><STRONG><a name="[a10]"></a>__asm___6_init_c_2bb6fb04____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, init.o(.emb_text), UNUSED)

<P><STRONG><a name="[a11]"></a>__asm___6_init_c_2bb6fb04____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, init.o(.emb_text), UNUSED)

<P><STRONG><a name="[a12]"></a>__asm___6_init_c_2bb6fb04____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, init.o(.emb_text), UNUSED)

<P><STRONG><a name="[a13]"></a>__asm___6_init_c_2bb6fb04____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, init.o(.emb_text), UNUSED)

<P><STRONG><a name="[f0]"></a>__asm___6_init_c_2bb6fb04__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_init_c_2bb6fb04__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_delay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_init_c_2bb6fb04__Delay
</UL>

<P><STRONG><a name="[a14]"></a>__asm___7_locks_c_8b534a9e____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, locks.o(.emb_text), UNUSED)

<P><STRONG><a name="[a15]"></a>__asm___7_locks_c_8b534a9e____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, locks.o(.emb_text), UNUSED)

<P><STRONG><a name="[a16]"></a>__asm___7_locks_c_8b534a9e____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, locks.o(.emb_text), UNUSED)

<P><STRONG><a name="[a17]"></a>__asm___7_locks_c_8b534a9e____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, locks.o(.emb_text), UNUSED)

<P><STRONG><a name="[847]"></a>_atomic_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, locks.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsSyncInit
</UL>

<P><STRONG><a name="[96f]"></a>_atomic_add</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, locks.o(.emb_text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
</UL>

<P><STRONG><a name="[968]"></a>_atomic_add_return</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, locks.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_trylock
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>

<P><STRONG><a name="[9bb]"></a>_atomic_sub_return</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, locks.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[a18]"></a>_atomic_clear_mask</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, locks.o(.emb_text), UNUSED)

<P><STRONG><a name="[a19]"></a>__asm___6_msgq_c_38077172____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msgq.o(.emb_text), UNUSED)

<P><STRONG><a name="[a1a]"></a>__asm___6_msgq_c_38077172____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msgq.o(.emb_text), UNUSED)

<P><STRONG><a name="[a1b]"></a>__asm___6_msgq_c_38077172____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msgq.o(.emb_text), UNUSED)

<P><STRONG><a name="[a1c]"></a>__asm___6_msgq_c_38077172____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, msgq.o(.emb_text), UNUSED)

<P><STRONG><a name="[11c]"></a>__asm___6_msgq_c_38077172__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, msgq.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_msgq_c_38077172__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_sleepon_msgqueue
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_msgq_c_38077172__Delay
</UL>

<P><STRONG><a name="[a1d]"></a>__asm___11_semaphore_c_04347d2c____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[a1e]"></a>__asm___11_semaphore_c_04347d2c____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[a1f]"></a>__asm___11_semaphore_c_04347d2c____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[a20]"></a>__asm___11_semaphore_c_04347d2c____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[11d]"></a>__asm___11_semaphore_c_04347d2c__Delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_semaphore_c_04347d2c__Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_semaphore_c_04347d2c__Delay
</UL>

<P><STRONG><a name="[11f]"></a>__down_op</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetQuickResponseFlag
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsLock
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op_read
</UL>

<P><STRONG><a name="[a21]"></a>__down_op_ret</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[849]"></a>__up_op</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, semaphore.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetQuickResponseFlag
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsUnLock
</UL>

<P><STRONG><a name="[a22]"></a>__down_op_write</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[a23]"></a>__up_op_write</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[11e]"></a>__down_op_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op
</UL>

<P><STRONG><a name="[a24]"></a>__up_op_read</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, semaphore.o(.emb_text), UNUSED)

<P><STRONG><a name="[a25]"></a>__asm___7_tasks_c_current____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tasks.o(.emb_text), UNUSED)

<P><STRONG><a name="[a26]"></a>__asm___7_tasks_c_current____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tasks.o(.emb_text), UNUSED)

<P><STRONG><a name="[a27]"></a>__asm___7_tasks_c_current____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tasks.o(.emb_text), UNUSED)

<P><STRONG><a name="[a28]"></a>__asm___7_tasks_c_current____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tasks.o(.emb_text), UNUSED)

<P><STRONG><a name="[9b9]"></a>__asm___7_tasks_c_current__save_reg_bank</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[a29]"></a>__asm___7_setup_c_2183a587____ENABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setup.o(.emb_text), UNUSED)

<P><STRONG><a name="[a2a]"></a>__asm___7_setup_c_2183a587____DISABLE_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setup.o(.emb_text), UNUSED)

<P><STRONG><a name="[a2b]"></a>__asm___7_setup_c_2183a587____ENABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setup.o(.emb_text), UNUSED)

<P><STRONG><a name="[a2c]"></a>__asm___7_setup_c_2183a587____DISABLE_FAULT_IRQ</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setup.o(.emb_text), UNUSED)

<P><STRONG><a name="[e]"></a>svcall_interrupt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, setup.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[9b6]"></a>start_first_task</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, setup.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_schedule
</UL>

<P><STRONG><a name="[f]"></a>pendsv_interrupt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, setup.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pendsv_interrupt &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[404]"></a>__asm___5_bit_c_762cac86__SWAP_16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bit.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_uint16_be
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_be
</UL>

<P><STRONG><a name="[458]"></a>__asm___17_aif_decoder_api_c_6129681c__SWAP_16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aif_decoder_api.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_decode
</UL>

<P><STRONG><a name="[666]"></a>fast_sqrt_fixed</STRONG> (Thumb, 260 bytes, Stack size 0 bytes, msbc_plc.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_plc_bad_frame
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_plc_pattern_match
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_plc_cross_correlation
</UL>

<P><STRONG><a name="[de]"></a>__common_semaphore_stub</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, semaphore.o(.sched.stub), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __common_semaphore_stub &rArr; __down_interruptible &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_trylock
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
</UL>

<P><STRONG><a name="[cf]"></a>__down_failed</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, semaphore.o(.sched.stub))
<BR>[Address Reference Count : 2]<UL><LI> dev_detect_driver.o(i.SetQuickResponseFlag)
<LI> presearch.o(i.FsLock)
</UL>
<P><STRONG><a name="[df]"></a>__down_interruptible_failed</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semaphore.o(.sched.stub), UNUSED, KEPT)

<P><STRONG><a name="[e0]"></a>__down_trylock_failed</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semaphore.o(.sched.stub), UNUSED, KEPT)

<P><STRONG><a name="[d0]"></a>__up_wakeup</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semaphore.o(.sched.stub))
<BR>[Address Reference Count : 2]<UL><LI> dev_detect_driver.o(i.SetQuickResponseFlag)
<LI> presearch.o(i.FsUnLock)
</UL>
<P><STRONG><a name="[a2d]"></a>BTStackSetReceivedDataHook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_device_receive.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>AllocateHCIDriverReadBuf</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bt_device_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[127]"></a>BuartRcvDataBlocking</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, bt_device_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartRcvData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartH5RcvData
</UL>

<P><STRONG><a name="[12a]"></a>rcv_debug</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bt_device_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[12b]"></a>CheckSpecialCharacters</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bt_device_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartH5RcvData
</UL>

<P><STRONG><a name="[12d]"></a>BtStackUartH5RcvData</STRONG> (Thumb, 1066 bytes, Stack size 56 bytes, bt_device_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSnifferTimer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXBUFF_Alloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciBufferInd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSpecialCharacters
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRcvDataBlocking
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[133]"></a>BtStackUartRcvData</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, bt_device_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTL8761ScoProcessPCM
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSnifferTimer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXBUFF_Alloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciBufferInd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRcvDataBlocking
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackRcvData
</UL>

<P><STRONG><a name="[a2e]"></a>BtStackUsbRcvData</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bt_device_receive.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>BtStackRcvData</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bt_device_receive.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartRcvData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRun
</UL>

<P><STRONG><a name="[98f]"></a>BTStackGetVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_device_receive.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2f]"></a>BTStackSetSendDataHook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_device_send.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>AllocateHCIDriverSendBuf</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bt_device_send.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[138]"></a>send_debug</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bt_device_send.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[139]"></a>H5_SendData</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, bt_device_send.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartH5SendData
</UL>

<P><STRONG><a name="[13a]"></a>BtStackUartH5SendData</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, bt_device_send.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciPacketSent
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H5_SendData
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[13c]"></a>BtStackUartSendData</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, bt_device_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = BtStackUartSendData &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciPacketSent
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackSendData
</UL>

<P><STRONG><a name="[a30]"></a>BtStackUsbSendData</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bt_device_send.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>BtStackSendData</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bt_device_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = BtStackSendData &rArr; BtStackUartSendData &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> transprt.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>SendScanEnableData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_device_send.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSetScanEnable_
</UL>

<P><STRONG><a name="[13e]"></a>SendScanDisableData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bt_device_send.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSetScanDisable_
</UL>

<P><STRONG><a name="[5a7]"></a>SaveHciHandle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bt_device_send.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
</UL>

<P><STRONG><a name="[5aa]"></a>UpdateRssi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_device_send.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
</UL>

<P><STRONG><a name="[5a9]"></a>UpdateLinkQuality</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_device_send.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
</UL>

<P><STRONG><a name="[a31]"></a>BtGetLinkqualityValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_device_send.o(.text), UNUSED)

<P><STRONG><a name="[a32]"></a>BtGetRssiValue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bt_device_send.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>SendH4HciCmd</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, bt_device_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendH4HciCmd &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrBbCheckTimerNotify
</UL>

<P><STRONG><a name="[140]"></a>ReadSupervisionTimeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bt_device_send.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
</UL>

<P><STRONG><a name="[141]"></a>WriteSupervisionTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bt_device_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = WriteSupervisionTimeout &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
</UL>

<P><STRONG><a name="[a33]"></a>BTStackGetPackageFeatures</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>btstack_taskexit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_taskinit
</UL>

<P><STRONG><a name="[144]"></a>btstack_taskinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_taskexit
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[146]"></a>AllocateRemoteDevInfo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[a34]"></a>GetStreamDataPointer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[a35]"></a>GetStreamDataLen</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>BdAddrToU8</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_stack_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_callback
</UL>

<P><STRONG><a name="[148]"></a>GetCurConnectedRemDevAdd</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, bt_stack_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoPendingAction
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNameReq
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconnectTimerNotify
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rfc_disconnect
</UL>

<P><STRONG><a name="[147]"></a>GetNameReq</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bt_stack_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetNameReq &rArr; ME_GetRemoteDeviceName &rArr; MeProcessToken &rArr; MeFindMatchingToken &rArr; IsMeCommandEqual &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurConnectedRemDevAdd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetRemoteDeviceName
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_callback
</UL>

<P><STRONG><a name="[155]"></a>ResetReconnectTimer</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, bt_stack_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ResetReconnectTimer &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHfConnectedFlag
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeAppCallback
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRcpCallback
</UL>

<P><STRONG><a name="[174]"></a>BTStackSetPinCode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[161]"></a>IsO18Chip</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[a36]"></a>SetBtClassOfDevice</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>BTStackRunInit</STRONG> (Thumb, 772 bytes, Stack size 32 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsFunction__
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Register
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_SetIoCapabilities
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_SetBondingMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_SetAuthorizeRequirements
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_RegisterPairingHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_RegisterAuthorizeHandler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetLocalDeviceName
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetEventMask
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetDefaultLinkPolicy
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetClassOfDevice
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_RegisterGlobalHandler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_RegisterAcceptHandler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidApp_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeApp_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_RegisterMonitorHandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackiApMemAlloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackSppMemAlloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackMemAlloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSetIoCapSyncFlag
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSppBuf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateHFChannelBuf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpApp_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsO18Chip
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackSetPinCode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateRemoteDevInfo
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_taskinit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtInqResponseData
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevLocaName
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateHCIDriverSendBuf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateHCIDriverReadBuf
</UL>

<P><STRONG><a name="[a37]"></a>BTStackSetOtherDataHook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>BTDisConnect_</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_spp_close
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_disconnect
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_a2dp_disconnect
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[17a]"></a>BTSetScanDisable_</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendScanDisableData
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[17b]"></a>BTSetScanEnable_</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendScanEnableData
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[17c]"></a>BTConnect_</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CreateServiceLink
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_OpenStream
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[17d]"></a>BT_do_user_command</STRONG> (Thumb, 526 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidSendKey_
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidSendKeyWithData_
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtSetPlayerSettingValues_
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtListPlayerSettingValues_
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtListPlayerSettingAttrs_
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtGetPlayerSettingValues_
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtGetPlayStatus_
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtGetMediaInfo_
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtGetCurCallListNumber_
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTiApDataSend_
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStartOneHfConnection_
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStartHfTransfer_
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSetPhonebookCharacterSet2UTF8_
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSelectPhonebook_
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTRedialLastCalledNum_
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTQueryPhonebooks_
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlVolUp_
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlVolDown_
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlStop_
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlSetAbsVol_
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlPreSong_
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlPlay_
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlPause_
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlNextSong_
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlFastForward_
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlFastBackward_
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlEndFastBackForward_
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPhoneCallVolSyncSet_
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTInCallReject_
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTInCallAccept_
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidSendRawData_
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidMultiKeySendDownUp_
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHfDtmf_
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTGetPhonebookSize_
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTGetPBListEntry_
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDialOnePhoneNumber_
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTCallHangUp_
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTCallDisableAEC_
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTBqbAvrcpConnect_
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTConnect_
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSetScanEnable_
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSetScanDisable_
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDisConnect_
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRun
</UL>

<P><STRONG><a name="[1a5]"></a>BTStackRun</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoPendingAction
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Process
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAudioTransfer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartDevInfo
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisSppRcvData
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackRcvData
</UL>

<P><STRONG><a name="[1ab]"></a>BTStackRunEnd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackMemFree
</UL>

<P><STRONG><a name="[a38]"></a>BTGetCurDeviceNamesAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>BTGetDeviceName</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, bt_stack_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BTGetDeviceName &rArr; ME_GetRemoteDeviceName &rArr; MeProcessToken &rArr; MeFindMatchingToken &rArr; IsMeCommandEqual &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetRemoteDeviceName
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevEventHandler
</UL>

<P><STRONG><a name="[a39]"></a>BTGetRemoteDevName</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>BtConnectA2dpOnly</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bt_stack_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = BtConnectA2dpOnly &rArr; A2DP_OpenStream &rArr; A2dpFindExistingConnection &rArr; A2dpGetConnectedInfo &rArr; AVDEV_GetCapabilities &rArr; AvdevSendCommand &rArr; AVDTP_GetAllCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_OpenStream
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeAppCallback
</UL>

<P><STRONG><a name="[a3a]"></a>BTConnect</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[a3b]"></a>BTDisConnect</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[a3c]"></a>BTDisConnectA2dp</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[a3d]"></a>BTDisConnectHf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[a3e]"></a>BTDisConnectSpp</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[a3f]"></a>BTDisConnectA2dpHf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>BTDeleteRecord</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_DeleteDeviceRecord
</UL>

<P><STRONG><a name="[1b1]"></a>BTSetScanEnable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurBtConnectedFlag
</UL>

<P><STRONG><a name="[a40]"></a>BTDisableBLEEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>BTSetScanDisable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurBtConnectedFlag
</UL>

<P><STRONG><a name="[1b4]"></a>BTSetAccessMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetAccessibleModeNC
</UL>

<P><STRONG><a name="[a41]"></a>BTGetSupportedPhonebookStorageType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[a42]"></a>BtGetCurrentPbResponseData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[a43]"></a>BtGetCurCallListNumberResponseData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>BTDoDeviceInquiry</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Inquiry
</UL>

<P><STRONG><a name="[1b8]"></a>BTDoTestModeDeviceInquiry</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Inquiry
</UL>

<P><STRONG><a name="[131]"></a>ResetSnifferTimer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt_stack_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ResetSnifferTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartRcvData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartH5RcvData
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciDeleteConnection
</UL>

<P><STRONG><a name="[a44]"></a>GetScoCodecType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[a45]"></a>SetWbsEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>BtGetInquiryResultParams</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1bb]"></a>BTSetInquiryMode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetInquiryMode
</UL>

<P><STRONG><a name="[1bd]"></a>BTSetInquiryCancel</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CancelInquiry
</UL>

<P><STRONG><a name="[1bf]"></a>ResetRxTxRingBuf</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, btm_spp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ResetRxTxRingBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_BufFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHighWaterMark
</UL>

<P><STRONG><a name="[171]"></a>AllocateSppBuf</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[358]"></a>IsSppConnectedFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurBtConnectedFlag
</UL>

<P><STRONG><a name="[319]"></a>SPPOS_LockDev</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, btm_spp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Read
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Ioctl
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openServerPort
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfCallbackFunc
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advanceCredit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendToRfComm
</UL>

<P><STRONG><a name="[317]"></a>SPPOS_UnlockDev</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, btm_spp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Read
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Ioctl
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openServerPort
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfCallbackFunc
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advanceCredit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendToRfComm
</UL>

<P><STRONG><a name="[a46]"></a>SPPOS_Wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, btm_spp.o(.text), UNUSED)

<P><STRONG><a name="[a47]"></a>SPPOS_Resume</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, btm_spp.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>SPPOS_Ioctl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Ioctl
</UL>

<P><STRONG><a name="[1c1]"></a>SPPOS_ReadBuf</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SppReadData
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Read
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_FlushBuf
</UL>

<P><STRONG><a name="[1c3]"></a>SPPOS_FlushBuf</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_EmptyData
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_ReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SppFlushRecBuf
</UL>

<P><STRONG><a name="[1c5]"></a>SPPOS_WriteBuf</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Write
</UL>

<P><STRONG><a name="[1c7]"></a>SPPOS_ReturnBuf</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, btm_spp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPPOS_ReturnBuf &rArr; RING_BufDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_BufDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultEventHandler
</UL>

<P><STRONG><a name="[1c9]"></a>SPPOS_FlushRx</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_BufFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDevice
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeDevice
</UL>

<P><STRONG><a name="[1ca]"></a>SPPOS_FlushTx</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_BufFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDevice
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeDevice
</UL>

<P><STRONG><a name="[1d7]"></a>SPPOS_RxBytes</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, btm_spp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SppGetRecBufDataSize
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advanceCredit
</UL>

<P><STRONG><a name="[31f]"></a>SPPOS_RxFree</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, btm_spp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHighWaterMark
</UL>

<P><STRONG><a name="[1cb]"></a>SPPOS_DevRx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, btm_spp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPPOS_DevRx &rArr; RING_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultEventHandler
</UL>

<P><STRONG><a name="[1cc]"></a>SPPOS_DevTx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, btm_spp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPPOS_DevTx &rArr; RING_GetDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendToRfComm
</UL>

<P><STRONG><a name="[172]"></a>SPP_Register</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_InitDevice
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_BufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[a48]"></a>SppGetWRingFreeSpace</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, btm_spp.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>SppDataReqSend</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StopSniff
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SppSendData
</UL>

<P><STRONG><a name="[a49]"></a>SppControlReqSend</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, btm_spp.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>AnalysisSppRcvData</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserProcSppData
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRun
</UL>

<P><STRONG><a name="[1d6]"></a>SppGetRecBufDataSize</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_RxBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserProcSppData
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRcvCmd
</UL>

<P><STRONG><a name="[1d8]"></a>SppReadData</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_ReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRcvCmd
</UL>

<P><STRONG><a name="[1d9]"></a>SppSendData</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SppDataReqSend
</UL>
<BR>[Called By]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSendResp
</UL>

<P><STRONG><a name="[1da]"></a>SppFlushRecBuf</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_FlushBuf
</UL>

<P><STRONG><a name="[a4a]"></a>SppGetWorkBuf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, btm_spp.o(.text), UNUSED)

<P><STRONG><a name="[a4b]"></a>SppGetWorkBufLen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, btm_spp.o(.text), UNUSED)

<P><STRONG><a name="[a4c]"></a>SppGetWorkParameterByte1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, btm_spp.o(.text), UNUSED)

<P><STRONG><a name="[a4d]"></a>SppGetWorkParameterByte2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, btm_spp.o(.text), UNUSED)

<P><STRONG><a name="[a4e]"></a>SppGetWorkParameterWord1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, btm_spp.o(.text), UNUSED)

<P><STRONG><a name="[a4f]"></a>SppGetWorkParameterWord2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, btm_spp.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>do_spp_close</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, btm_spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDisConnect_
</UL>

<P><STRONG><a name="[1e1]"></a>DDB_Open</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ddb4sp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = DDB_Open &rArr; FlshLoad1of8Dev &rArr; FlshPairedListSync &rArr; FlshSavePairedList &rArr; FlshUpdateAllPairedList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshLoad1of8Dev
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
</UL>

<P><STRONG><a name="[5e9]"></a>DDB_Close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ddb4sp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioShutdown
</UL>

<P><STRONG><a name="[a50]"></a>DDB_Flush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ddb4sp.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>GetCurTotaBtRecNum</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ddb4sp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_DeleteRecord
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_AddRecord
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get1of8RecInfo
</UL>

<P><STRONG><a name="[1e5]"></a>Get1of8RecInfo</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ddb4sp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get1of8RecInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurTotaBtRecNum
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ddb4sp.o(.text)
</UL>
<P><STRONG><a name="[a51]"></a>BTEnableBluetoothTestMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ddb4sp.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>DDB_AddRecord</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ddb4sp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = DDB_AddRecord &rArr; FlashSave8DevRec &rArr; FlshPairedListSync &rArr; FlshSavePairedList &rArr; FlshUpdateAllPairedList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSave8DevRec
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurTotaBtRecNum
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DdbFindRecord
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbdAllocateRecord
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AddDeviceRecord
</UL>

<P><STRONG><a name="[1eb]"></a>DDB_FindRecord</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ddb4sp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DDB_FindRecord &rArr; DdbFindRecord &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DdbFindRecord
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_FindDeviceRecord
</UL>

<P><STRONG><a name="[1ec]"></a>DDB_DeleteRecord</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ddb4sp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSave8DevRec
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurTotaBtRecNum
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DdbFindRecord
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_DeleteDeviceRecord
</UL>

<P><STRONG><a name="[3aa]"></a>DDB_EnumDeviceRecords</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ddb4sp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_EnumDeviceRecords
</UL>

<P><STRONG><a name="[1ed]"></a>BtStackRemoveAllDevice</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ddb4sp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[a52]"></a>mv_memcpy</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, mvstdio.o(.text), UNUSED)

<P><STRONG><a name="[a53]"></a>mv_memcmp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mvstdio.o(.text), UNUSED)

<P><STRONG><a name="[a54]"></a>mv_memmove</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, mvstdio.o(.text), UNUSED)

<P><STRONG><a name="[a55]"></a>mv_memset</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, mvstdio.o(.text), UNUSED)

<P><STRONG><a name="[a56]"></a>mv_mopen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mvstdio.o(.text), UNUSED)

<P><STRONG><a name="[a57]"></a>mv_mclose</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mvstdio.o(.text), UNUSED)

<P><STRONG><a name="[7c8]"></a>mv_mread_callback_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mvstdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderGetType
</UL>

<P><STRONG><a name="[7d3]"></a>mv_mread_callback_unset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mvstdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStop
</UL>

<P><STRONG><a name="[1ee]"></a>mv_mread</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, mvstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mv_mread
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_fill_buffer
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
</UL>

<P><STRONG><a name="[1ef]"></a>mv_mwrite</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, mvstdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[400]"></a>mv_meom</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mvstdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_fill_buffer
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
</UL>

<P><STRONG><a name="[a58]"></a>mv_msize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mvstdio.o(.text), UNUSED)

<P><STRONG><a name="[a59]"></a>mv_mremain</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mvstdio.o(.text), UNUSED)

<P><STRONG><a name="[a5a]"></a>mv_strcmp</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mvstdio.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>mv_fread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mvstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileRead
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_fill_buffer
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3_v1_parse
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipBufferFrom
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_next_chunk_get
</UL>

<P><STRONG><a name="[1f2]"></a>mv_fwrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mvstdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
</UL>

<P><STRONG><a name="[1f4]"></a>mv_ftell</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mvstdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileTell
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_initialize
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_initialize
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_metadata
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_header_parse
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipBufferFrom
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_header_parse
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_prepare
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stbl_atom_parse
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stsc_atom_parse
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stco_atom_parse
</UL>

<P><STRONG><a name="[1f6]"></a>mv_fseek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mvstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSeek
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_seek
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_initialize
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_seek
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_seek
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_seek
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flac_decoder_seek
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_seek
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_seek
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_initialize
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_metadata
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_header_parse
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_preview
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_preview
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3_v2_parse
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3_v1_parse
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipBufferFrom
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_preview
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_next_chunk_get
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_header_parse
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_adts_bitrate_calc
</UL>

<P><STRONG><a name="[1f8]"></a>mv_feof</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mvstdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileEOF
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_decode
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_decode
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_fill_buffer
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipBufferFrom
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_header_parse
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_header_parse
</UL>

<P><STRONG><a name="[1fa]"></a>mv_fsof</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mvstdio.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSof
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_initialize
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_initialize
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_preview
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_preview
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3_v2_parse
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_preview
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_header_parse
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stbl_atom_parse
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stco_atom_parse
</UL>

<P><STRONG><a name="[1fc]"></a>mv_fclose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mvstdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileClose
</UL>

<P><STRONG><a name="[1fe]"></a>audio_decoder_restore</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, audio_decoder_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1ff]"></a>audio_decoder_initialize</STRONG> (Thumb, 686 bytes, Stack size 64 bytes, audio_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = audio_decoder_initialize &rArr; __IsFunction__
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsFunction__
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_context_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStart
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderGetType
</UL>

<P><STRONG><a name="[914]"></a>audio_decoder_decode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, audio_decoder_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
</UL>

<P><STRONG><a name="[7ca]"></a>audio_decoder_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, audio_decoder_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderGetType
</UL>

<P><STRONG><a name="[913]"></a>audio_decoder_can_continue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, audio_decoder_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
</UL>

<P><STRONG><a name="[7c9]"></a>audio_decoder_get_error_code</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, audio_decoder_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStart
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderGetType
</UL>

<P><STRONG><a name="[7cb]"></a>audio_decoder_seek</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, audio_decoder_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStart
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderGetType
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskEntrance
</UL>

<P><STRONG><a name="[a5b]"></a>audio_decoder_get_song_info</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, audio_decoder_api.o(.text), UNUSED)

<P><STRONG><a name="[a5c]"></a>audio_decoder_get_context_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, audio_decoder_api.o(.text), UNUSED)

<P><STRONG><a name="[7d0]"></a>is_audio_decoder_with_hardware</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, audio_decoder_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStop
</UL>

<P><STRONG><a name="[16]"></a>audio_decoder_interrupt_handler</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, audio_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = audio_decoder_interrupt_handler &rArr; audio_decoder_interrupt_callback &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_interrupt_callback
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmTxIsTransferDone
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmTxDoneSignalClear
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_hardware_done_callback
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_scale_pcm
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_mp3_is_xr_done
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_mp3_info_reg_clear
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaIsXrDone
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaInfoRegClear
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbcXrDoneClear
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbcIsSbsynDone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(EXCEPT_VECTS)
</UL>
<P><STRONG><a name="[a5d]"></a>audio_decoder_wait_for_hardware_decoder_done</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, audio_decoder_api.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>audio_decoder_start_pcm_transfer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, audio_decoder_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmTxTransferData
</UL>

<P><STRONG><a name="[7d1]"></a>audio_decoder_check_xr_done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, audio_decoder_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStop
</UL>

<P><STRONG><a name="[7d2]"></a>audio_decoder_clear_xr_done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, audio_decoder_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStop
</UL>

<P><STRONG><a name="[8a6]"></a>audio_decoder_check_pcm_transfer_done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, audio_decoder_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckTx
</UL>

<P><STRONG><a name="[8a5]"></a>audio_decoder_clear_pcm_transfer_done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, audio_decoder_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckTx
</UL>

<P><STRONG><a name="[20f]"></a>audio_pcm_data_layout_convert</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, audio_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = audio_pcm_data_layout_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_convert_pcm_data_layout
</UL>

<P><STRONG><a name="[20e]"></a>audio_decoder_convert_pcm_data_layout</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, audio_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = audio_decoder_convert_pcm_data_layout &rArr; audio_pcm_data_layout_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_pcm_data_layout_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
</UL>

<P><STRONG><a name="[a5e]"></a>audio_decoder_get_mpeg_version</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, audio_decoder_api.o(.text), UNUSED)

<P><STRONG><a name="[a5f]"></a>audio_decoder_get_id3_version</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, audio_decoder_api.o(.text), UNUSED)

<P><STRONG><a name="[990]"></a>audio_decoder_get_lib_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, audio_decoder_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76f]"></a>init_dc_blocker</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, dc_blocker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_dc_blocker
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioProcessTaskEntrance
</UL>

<P><STRONG><a name="[773]"></a>apply_dc_blocker</STRONG> (Thumb, 222 bytes, Stack size 60 bytes, dc_blocker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = apply_dc_blocker
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioProcessTaskEntrance
</UL>

<P><STRONG><a name="[210]"></a>BTDeviceInit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, bt_device_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartDevInfo_
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRdaEscoProperty
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBk3515HUart
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_RDA5876a
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_CSRBC6
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_BCM20702
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_RTL8761
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[219]"></a>UartWaitMs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bt_device_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UartWaitMs &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBk3515HUart
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_RDA5876a
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_CSRBC6
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_BCM20702
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_RTL8761
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtk_DownloadPatch
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_baud_rate
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_bd_addr
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bk3515HPowerOn
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPatchArray
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_set_power_on
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_hci_write_baud_rate
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_mtk_patch_on
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT6622_DownloadPatch
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTK_extra_patch
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMTK662xTypeInfo
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_mtk_set_xo_trim
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableUartFlowControl
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeBtBautRate
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDABT_core_Intialization
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA5876_RfInit
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA_uart_write_array
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_write_bd_addr
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_write_baud_rate
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BROADCOM_IOP_TEST_RX
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BROADCOM_IOP_TEST_TX
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_write_pcm_mute_param
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_wrtie_sco_pcm_int_param
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_wrtie_sco_time_slot
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_write_sco_pcm_format
</UL>

<P><STRONG><a name="[1b9]"></a>OS_GetSystemTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osapi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxtmr_count_get
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSnifferTimer
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddRecord
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStartAudioTransferTimeOut
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAutoTransferTimer
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimers
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_UnlockRecord
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpUpdateServiceDatabaseState
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpInitServer
</UL>

<P><STRONG><a name="[290]"></a>OS_Rand</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, osapi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Register
</UL>

<P><STRONG><a name="[a60]"></a>SetSbcDecDoneFlag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[a61]"></a>GetHasSbcDataFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[a62]"></a>GetSbcPlayCfgFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[a63]"></a>SetSbcPlayCfgFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[a64]"></a>GetSbcStreamHandle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[a65]"></a>DisableAdvancedAvrcpFeature</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>FreeAdvAvrcpHeap</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackMemFree
</UL>

<P><STRONG><a name="[21e]"></a>BTStackAdvAvrcpMemAlloc</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpApp_Init
</UL>

<P><STRONG><a name="[220]"></a>AdvavrcpCmdGet</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtSetPlayerSettingValues_
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtListPlayerSettingValues_
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtListPlayerSettingAttrs_
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtGetPlayerSettingValues_
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtGetPlayStatus_
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtGetMediaInfo_
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlSetAbsVol_
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtRegisterAddressedPlayerChangedNotification_
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtRegisterTrackStartNotification_
</UL>

<P><STRONG><a name="[18b]"></a>DoAVRCP_CtGetMediaInfo_</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = DoAVRCP_CtGetMediaInfo_ &rArr; AVRCP_CtGetMediaInfo &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtGetMediaInfo
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvavrcpCmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPasserAVRCP_EVENT_ADV_RESPONSE
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
</UL>

<P><STRONG><a name="[222]"></a>DoAVRCP_CtRegisterTrackStartNotification_</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = DoAVRCP_CtRegisterTrackStartNotification_ &rArr; AVRCP_CtRegisterNotification &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtRegisterNotification
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvavrcpCmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPasserAVRCP_EVENT_ADV_RESPONSE
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
</UL>

<P><STRONG><a name="[224]"></a>StartAdvavrcpTimer_</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StartAdvavrcpTimer_ &rArr; EvmStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPasserAVRCP_EVENT_ADV_RESPONSE
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
</UL>

<P><STRONG><a name="[225]"></a>DoPasserAVRCP_EVENT_ADV_RESPONSE</STRONG> (Thumb, 384 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = DoPasserAVRCP_EVENT_ADV_RESPONSE &rArr; DoAVRCP_CtGetMediaInfo_ &rArr; AVRCP_CtGetMediaInfo &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtGetMediaInfo_
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvavrcpTimer_
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtRegisterTrackStartNotification_
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRcpCallback
</UL>

<P><STRONG><a name="[22a]"></a>RestoreAdavrcpcmdResource</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRcpCallback
</UL>

<P><STRONG><a name="[226]"></a>CancelAdvavrcpTimer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CancelAdvavrcpTimer &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRcpCallback
</UL>

<P><STRONG><a name="[227]"></a>DoAVRCP_CtRegisterAddressedPlayerChangedNotification_</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = DoAVRCP_CtRegisterAddressedPlayerChangedNotification_ &rArr; AVRCP_CtRegisterNotification &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtRegisterNotification
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvavrcpCmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRcpCallback
</UL>

<P><STRONG><a name="[18a]"></a>DoAVRCP_CtGetPlayStatus_</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = DoAVRCP_CtGetPlayStatus_ &rArr; AVRCP_CtGetPlayStatus &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtGetPlayStatus
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvavrcpCmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvavrcpCmdTimerNotify
</UL>

<P><STRONG><a name="[235]"></a>InitAdvavrcpCmd</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAdvavrcpInit
</UL>

<P><STRONG><a name="[234]"></a>DoAdvavrcpInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAdvavrcpCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpApp_Init
</UL>

<P><STRONG><a name="[170]"></a>A2dpApp_Init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_RegisterSec
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Register
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAdvavrcpInit
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackAdvAvrcpMemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[a66]"></a>BtGetAdvAbsVolume</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>BTPlayCtrlPause_</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_SetPanelKey
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a67]"></a>BTPlayCtrlPause</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>BTPlayCtrlPlay_</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_SetPanelKey
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a68]"></a>BTPlayCtrlPlay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>BTPlayCtrlFastForward_</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_SetPanelKey
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a69]"></a>BTPlayCtrlFastForward</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>BTPlayCtrlFastBackward_</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_SetPanelKey
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a6a]"></a>BTPlayCtrlFastBackward</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>BTPlayCtrlEndFastBackForward_</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_SetPanelKey
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a6b]"></a>BTPlayCtrlEndFastBackForward</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>BTPlayCtrlNextSong_</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_SetPanelKey
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a6c]"></a>BTPlayCtrlNextSong</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>BTPlayCtrlPreSong_</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_SetPanelKey
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a6d]"></a>BTPlayCtrlPreSong</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>BTPlayCtrlVolUp_</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_SetPanelKey
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a6e]"></a>BTPlayCtrlVolUp</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>BTPlayCtrlVolDown_</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_SetPanelKey
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a6f]"></a>BTPlayCtrlVolDown</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>BTPlayCtrlStop_</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_SetPanelKey
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a70]"></a>BTPlayCtrlStop</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>AdvavrcpCmdRelease</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlSetAbsVol_
</UL>

<P><STRONG><a name="[188]"></a>BTPlayCtrlSetAbsVol_</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetAbsoluteVolume
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvavrcpCmdRelease
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvavrcpCmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a71]"></a>BTPlayCtrlSetAbsVol</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[a72]"></a>BTPlayCtrlAdvAvrcpGetPlayStauts</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[a73]"></a>BTPlayCtrlAdvAvrcpGetTrackInfo</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>DoAVRCP_CtSetPlayerSettingValues_</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtSetPlayerSettingValues
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvavrcpCmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a74]"></a>BTPlayCtrlAdvAvrcpSetPlayerSettingValues</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>DoAVRCP_CtGetPlayerSettingValues_</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtGetPlayerSettingValues
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvavrcpCmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a75]"></a>BTPlayCtrlAdvAvrcpGetPlayerSettingValues</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>DoAVRCP_CtListPlayerSettingValues_</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtListPlayerSettingValues
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvavrcpCmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a76]"></a>BTPlayCtrlAdvAvrcpListPlayerSettingValues</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>DoAVRCP_CtListPlayerSettingAttrs_</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtListPlayerSettingAttrs
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdvavrcpCmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a77]"></a>BTPlayCtrlAdvAvrcpListPlayerSettingAttrs</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[a78]"></a>DisableAdvancedAvrcpPlayStatusAutoReport</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[6ce]"></a>StopAdvavrcpTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
</UL>

<P><STRONG><a name="[a79]"></a>BtGetAdvAvrcpResponse</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>BTBqbAvrcpConnect_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_OpenStream
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[23f]"></a>DoBtAvrcpConnectDir</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Connect
</UL>

<P><STRONG><a name="[a7a]"></a>BTBqbAvrcpConnect</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bt_a2dp_app.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>do_a2dp_disconnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpCloseStream
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDisConnect_
</UL>

<P><STRONG><a name="[a7b]"></a>BtDisableBatteryState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>HandsFreeApp_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_RegisterSec
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_SetAudioVoiceSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[160]"></a>AllocateHFChannelBuf</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandTable
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateHfCmdBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[1a9]"></a>DoAudioTransfer</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DisconnectAudioLink
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStartAudioTransferTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRun
</UL>

<P><STRONG><a name="[156]"></a>IsHfConnectedFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurBtConnectedFlag
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReconnectTimer
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHfGetPhoneType
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHfGetFactoryName
</UL>

<P><STRONG><a name="[a7c]"></a>EnableBtDbgInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>HfDoPendingAction</STRONG> (Thumb, 464 bytes, Stack size 16 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurConnectedRemDevAdd
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoRfcommConnectionStart
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ReportIphoneEvent
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetRemoteDeviceModeInfo
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetRemoteDeviceFactoryInfo
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_EnableCallerIdNotify
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_EnableCallWaitNotify
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_EnableAppleExt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRun
</UL>

<P><STRONG><a name="[a7d]"></a>BTGetCurInCallPhoneNum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[a7e]"></a>BtGetRemoteSpeakerVol</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>do_hfp_connect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStartOneHfConnection_
</UL>

<P><STRONG><a name="[178]"></a>do_hfp_disconnect</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DisconnectServiceLink
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDisConnect_
</UL>

<P><STRONG><a name="[256]"></a>do_hfp_accept</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_AnswerCall
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTInCallAccept_
</UL>

<P><STRONG><a name="[259]"></a>do_hfp_hungup</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Hangup
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTInCallReject_
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTCallHangUp_
</UL>

<P><STRONG><a name="[25b]"></a>do_hfp_redial</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Redial
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTRedialLastCalledNum_
</UL>

<P><STRONG><a name="[25d]"></a>do_hfp_dial</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DialNumber
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>

<P><STRONG><a name="[25f]"></a>do_hfp_memdial</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_MemoryDial
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>

<P><STRONG><a name="[261]"></a>do_hfp_spkvol</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ReportSpeakerVolume
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>

<P><STRONG><a name="[263]"></a>do_hfp_vrec</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_EnableVoiceRecognition
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>

<P><STRONG><a name="[265]"></a>do_hfp_nrec</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DisableNREC
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTCallDisableAEC_
</UL>

<P><STRONG><a name="[267]"></a>do_hfp_dtmf</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GenerateDtmf
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>

<P><STRONG><a name="[269]"></a>do_hfp_transfer</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DisconnectAudioLink
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CreateAudioLink
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStartHfTransfer_
</UL>

<P><STRONG><a name="[26b]"></a>do_hfp_sco_up</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CreateAudioLink
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTScoUp_
</UL>

<P><STRONG><a name="[26c]"></a>do_hfp_sco_down</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DisconnectAudioLink
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTScoDown_
</UL>

<P><STRONG><a name="[a7f]"></a>do_hfp_enablecallwait</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>do_hfp_get_list_current_call</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ListCurrentCalls
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtGetCurCallListNumber_
</UL>

<P><STRONG><a name="[19d]"></a>BtGetCurCallListNumber_</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_get_list_current_call
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a80]"></a>BtGetCurCallListNumber</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>BTInCallAccept_</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a81]"></a>BTInCallAccept</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>BTInCallReject_</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_hungup
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a82]"></a>BTInCallReject</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>BTCallHangUp_</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_hungup
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a83]"></a>BTCallHangUp</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>BTCallDisableAEC_</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_nrec
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a84]"></a>BTStartOneHfConnection</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>BTStartOneHfConnection_</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a85]"></a>BTStartHfTransfer</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>BTStartHfTransfer_</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a86]"></a>BTScoUp</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>BTScoUp_</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_sco_up
</UL>

<P><STRONG><a name="[a87]"></a>BTScoDown</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>BTScoDown_</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_sco_down
</UL>

<P><STRONG><a name="[a88]"></a>BTCallDisableAEC</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>BTRedialLastCalledNum_</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_redial
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a89]"></a>BTRedialLastCalledNum</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>BTDialOnePhoneNumber_</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DialNumber
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[272]"></a>BTDialOnePhoneNumber</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[197]"></a>BTHfDtmf_</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GenerateDtmf
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a8a]"></a>BTHfDtmf</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>BTHfGetFactoryName</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHfConnectedFlag
</UL>

<P><STRONG><a name="[276]"></a>BTHfGetPhoneType</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHfConnectedFlag
</UL>

<P><STRONG><a name="[a8b]"></a>BTQueryPhonebooks</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>do_hfp_pbquery</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_QueryPhonebooks
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTQueryPhonebooks_
</UL>

<P><STRONG><a name="[198]"></a>BTQueryPhonebooks_</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_pbquery
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a8c]"></a>BTGetPhonebookSize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>BTGetPhonebookSize_</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetPhonebookSize
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a8d]"></a>BTSelectPhonebook</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>BTSelectPhonebook_</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SelectPhonebook
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a8e]"></a>BTGetPBListEntry</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>BTGetPBListEntry_</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ReadPhonebookEntries
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a8f]"></a>BTSetBatteryState</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>do_hfp_select_pb</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SelectPhonebook
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>

<P><STRONG><a name="[27d]"></a>do_hfp_get_pb_info</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetCurrentPhonebookInfo
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>

<P><STRONG><a name="[27f]"></a>do_hfp_get_pb_entry</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ReadPhonebookEntries
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>

<P><STRONG><a name="[280]"></a>do_hfp_vol_sync</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SyncSpeakerVol
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPhoneCallVolSyncSet_
</UL>

<P><STRONG><a name="[a90]"></a>BTPhoneCallVolSyncSet</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>BTPhoneCallVolSyncSet_</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_vol_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[282]"></a>do_hfp_cscs</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CSCS
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSetPhonebookCharacterSet2UTF8_
</UL>

<P><STRONG><a name="[19c]"></a>BTSetPhonebookCharacterSet2UTF8_</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_cscs
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[a91]"></a>BTSetPhonebookCharacterSet2UTF8</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bt_handsfree_app.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>HidApp_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bt_hid_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[a92]"></a>BTStackCloseDongle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bt_stack_mem_arrangement.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>BTStackMemFree</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bt_stack_mem_arrangement.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeAppleiAp
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeAdvAvrcpHeap
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackMemAlloc
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunEnd
</UL>

<P><STRONG><a name="[a93]"></a>BTStackSetMemAllocHook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_stack_mem_arrangement.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>BTStackMemAlloc</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, bt_stack_mem_arrangement.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackMemFree
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[15d]"></a>BTStackSppMemAlloc</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, bt_stack_mem_arrangement.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[126]"></a>BTStackGetHeap</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bt_stack_mem_arrangement.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTStackGetHeap &rArr; __IsFunction__
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsFunction__
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_Open
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSppBuf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateHFChannelBuf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpApp_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateRemoteDevInfo
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateHCIDriverSendBuf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateHCIDriverReadBuf
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpAlloc
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAlloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Register
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateHfCmdBuff
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAdvavrcpInit
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_Init
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtInitMemory
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAlloc
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpAlloc
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpAlloc
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAlloc
</UL>

<P><STRONG><a name="[1c0]"></a>RING_BufFlush</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_BufInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_FlushTx
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_FlushRx
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRxTxRingBuf
</UL>

<P><STRONG><a name="[1cf]"></a>RING_BufInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RING_BufFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Register
</UL>

<P><STRONG><a name="[1c6]"></a>RING_WriteData</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RING_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_DevRx
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_WriteBuf
</UL>

<P><STRONG><a name="[1c2]"></a>RING_ReadData</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, ring.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_ReadBuf
</UL>

<P><STRONG><a name="[1c4]"></a>RING_EmptyData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ring.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_FlushBuf
</UL>

<P><STRONG><a name="[1cd]"></a>RING_GetDataPtr</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RING_GetDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_DevTx
</UL>

<P><STRONG><a name="[1c8]"></a>RING_BufDelete</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RING_BufDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_ReturnBuf
</UL>

<P><STRONG><a name="[286]"></a>A2DP_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, a2dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_RegisterHandler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Init
</UL>

<P><STRONG><a name="[236]"></a>A2DP_Register</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, a2dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_RegisterStream
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_DeregisterStream
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_RegisterChannel
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_DeregisterChannel
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpRegisterSdpService
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Rand
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpApp_Init
</UL>

<P><STRONG><a name="[291]"></a>A2DP_Deregister</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, a2dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetStreamState
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_DeregisterStream
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_DeregisterChannel
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpDeregisterSdpService
</UL>

<P><STRONG><a name="[153]"></a>A2DP_OpenStream</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, a2dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = A2DP_OpenStream &rArr; A2dpFindExistingConnection &rArr; A2dpGetConnectedInfo &rArr; AVDEV_GetCapabilities &rArr; AvdevSendCommand &rArr; AVDTP_GetAllCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetStreamState
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpOpenNewStream
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpFindExistingConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTBqbAvrcpConnect_
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtConnectA2dpOnly
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTConnect_
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconnectTimerNotify
</UL>

<P><STRONG><a name="[22f]"></a>A2dpOpenStreamRsp</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, a2dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = A2dpOpenStreamRsp &rArr; AVDTP_OpenStreamRsp &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_OpenStreamRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
</UL>

<P><STRONG><a name="[22c]"></a>A2dpSetStreamConfig</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, a2dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = A2dpSetStreamConfig &rArr; AVDTP_OpenStream &rArr; AvdtpSigStreamSetConfig &rArr; AvdtpSigStreamSendCmdWithParms &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_OpenStream
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetStreamState
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_IncrementUseCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
</UL>

<P><STRONG><a name="[2a1]"></a>A2DP_SetSinkDelay</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, a2dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SetFlushTimeout
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_ReportSinkDelay
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetStreamState
</UL>

<P><STRONG><a name="[2a4]"></a>A2DP_GetStreamCapabilities</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, a2dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_GetCapabilities
</UL>

<P><STRONG><a name="[240]"></a>A2dpCloseStream</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, a2dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetStreamState
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_CloseStream
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_a2dp_disconnect
</UL>

<P><STRONG><a name="[2a7]"></a>A2DP_GetStreamState</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, a2dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetStreamState
</UL>

<P><STRONG><a name="[2a8]"></a>A2DP_GetConfiguredCodec</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, a2dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetStreamState
</UL>

<P><STRONG><a name="[22e]"></a>A2DP_GetRegisteredCodec</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, a2dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = A2DP_GetRegisteredCodec
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
</UL>

<P><STRONG><a name="[2a9]"></a>A2DP_GetConfiguredCP</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, a2dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetStreamState
</UL>

<P><STRONG><a name="[2aa]"></a>A2DP_GetRegisteredCP</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, a2dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2ab]"></a>A2DP_StreamSendRawPacket</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, a2dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = A2DP_StreamSendRawPacket &rArr; AVDTP_StreamSendRawPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_StreamSendRawPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStreamSendSbcPacket
</UL>

<P><STRONG><a name="[2ad]"></a>A2dpStreamSendSbcPacket</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, a2dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = A2dpStreamSendSbcPacket &rArr; A2DP_StreamSendRawPacket &rArr; AVDTP_StreamSendRawPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetTxMtu
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_CreateMediaHeader
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_StreamSendRawPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_StreamSendSbcPacket
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdtpCallback
</UL>

<P><STRONG><a name="[2b0]"></a>A2DP_StreamSendSbcPacket</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, a2dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetTxMtu
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_CreateMediaHeader
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStreamSendSbcPacket
</UL>

<P><STRONG><a name="[a94]"></a>A2DP_GetRemoteDevice</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, a2dp.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>AvrcpAlloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, avrcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Init
</UL>

<P><STRONG><a name="[2b2]"></a>AVRCP_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, avrcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Init
</UL>

<P><STRONG><a name="[237]"></a>AVRCP_RegisterSec</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, avrcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Register
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpRegisterSdp
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpInitPanel
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetEventMask
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Register
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Deregister
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpApp_Init
</UL>

<P><STRONG><a name="[2c2]"></a>AVRCP_Deregister</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, avrcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Unregister
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpDeregisterSdp
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Deregister
</UL>

<P><STRONG><a name="[2c5]"></a>AvrcpReportFailedConnect</STRONG> (Thumb, 66 bytes, Stack size 120 bytes, avrcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AvrcpReportFailedConnect &rArr; CMGR_RemoveDataLink &rArr; ME_ForceDisconnectLinkWithReason &rArr; MeDisconnectLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveDataLink
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_DeregisterHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCmgrCallback
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSdpCallback
</UL>

<P><STRONG><a name="[154]"></a>AVRCP_Connect</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, avrcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = AVRCP_Connect &rArr; AvrcpStartServiceQuery &rArr; SDP_Query &rArr; StartNextQuery &rArr; SdpClientStartConnection &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RegisterHandler
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateDataLink
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpStartServiceQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconnectTimerNotify
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoBtAvrcpConnectDir
</UL>

<P><STRONG><a name="[177]"></a>AVRCP_Disconnect</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, avrcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = AVRCP_Disconnect &rArr; AVCTP_Disconnect &rArr; AvctpDisconnect &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDisConnect_
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelInput
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendUnitInfo
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendSubUnitInfo
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpPanelIntTimerExpired
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmdControl
</UL>

<P><STRONG><a name="[68]"></a>AvrcpTxTimeout</STRONG> (Thumb, 66 bytes, Stack size 120 bytes, avrcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = AvrcpTxTimeout &rArr; AvrcpHandlePanelTimeout &rArr; AvrcpHandleAdvTimeout &rArr; AvrcpSendNextCommand &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelTimeout
</UL>
<BR>[Address Reference Count : 3]<UL><LI> avrcp.o(.text)
<LI> avrcppnl.o(.text)
<LI> avrcpact.o(.text)
</UL>
<P><STRONG><a name="[2cc]"></a>AvrcpGetNextTransId</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, avrcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AvrcpGetNextTransId
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelInput
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_SendCommand
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpPanelIntTimerExpired
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>

<P><STRONG><a name="[2cb]"></a>AVRCP_SendCommand</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, avrcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_SendCommand
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpGetNextTransId
</UL>

<P><STRONG><a name="[2ce]"></a>AVRCP_SendResponse</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, avrcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_SendResponse
</UL>

<P><STRONG><a name="[2d4]"></a>HfServiceConnectionCallback</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, hf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = HfServiceConnectionCallback &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CloseChannel
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStartServiceQuery
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCloseChannel
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAppCallback
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IsLinkUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hf.o(.text)
</UL>
<P><STRONG><a name="[247]"></a>HF_RegisterSec</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RegisterServerChannel
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfRegisterSDPandSEC
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RegisterHandler
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_DeregisterHandler
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeApp_Init
</UL>

<P><STRONG><a name="[2db]"></a>HF_Deregister</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_DeregisterServerChannel
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDeregisterSdpServices
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IsLinkUp
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Unregister
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_DeregisterHandler
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[152]"></a>HF_CreateServiceLink</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, hf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = HF_CreateServiceLink &rArr; HfStartServiceQuery &rArr; SDP_Query &rArr; StartNextQuery &rArr; SdpClientStartConnection &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStartServiceQuery
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateDataLink
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTConnect_
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reconnectTimerNotify
</UL>

<P><STRONG><a name="[255]"></a>HF_DisconnectServiceLink</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCloseChannel
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfDisconnectRFCOMM
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_disconnect
</UL>

<P><STRONG><a name="[2df]"></a>HF_IsCodecNegoEnabled</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CreateAudioLink
</UL>

<P><STRONG><a name="[26a]"></a>HF_CreateAudioLink</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateAudioLink
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtSendCommand
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_IsCodecNegoEnabled
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_sco_up
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_transfer
</UL>

<P><STRONG><a name="[24c]"></a>HF_DisconnectAudioLink</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveAudioLink
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAudioTransfer
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_sco_down
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_transfer
</UL>

<P><STRONG><a name="[257]"></a>HF_AnswerCall</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_accept
</UL>

<P><STRONG><a name="[25e]"></a>HF_DialNumber</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDialOnePhoneNumber_
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_dial
</UL>

<P><STRONG><a name="[260]"></a>HF_MemoryDial</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_memdial
</UL>

<P><STRONG><a name="[25c]"></a>HF_Redial</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_redial
</UL>

<P><STRONG><a name="[2e3]"></a>HF_CallHold</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[25a]"></a>HF_Hangup</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_hungup
</UL>

<P><STRONG><a name="[26e]"></a>HF_ListCurrentCalls</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_get_list_current_call
</UL>

<P><STRONG><a name="[24e]"></a>HF_EnableCallerIdNotify</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoPendingAction
</UL>

<P><STRONG><a name="[24f]"></a>HF_EnableCallWaitNotify</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoPendingAction
</UL>

<P><STRONG><a name="[268]"></a>HF_GenerateDtmf</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHfDtmf_
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_dtmf
</UL>

<P><STRONG><a name="[2e4]"></a>HF_GetLastVoiceTag</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[264]"></a>HF_EnableVoiceRecognition</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_vrec
</UL>

<P><STRONG><a name="[266]"></a>HF_DisableNREC</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_nrec
</UL>

<P><STRONG><a name="[2e5]"></a>HF_ReportMicVolume</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[262]"></a>HF_ReportSpeakerVolume</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_spkvol
</UL>

<P><STRONG><a name="[2e6]"></a>HF_QueryNetworkOperator</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2e7]"></a>HF_QuerySubscriberNumber</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2e8]"></a>HF_EnableExtendedErrors</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2e9]"></a>HF_SendAtCommand</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[278]"></a>HF_QueryPhonebooks</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_pbquery
</UL>

<P><STRONG><a name="[27a]"></a>HF_SelectPhonebook</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSelectPhonebook_
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_select_pb
</UL>

<P><STRONG><a name="[27e]"></a>HF_GetCurrentPhonebookInfo</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_get_pb_info
</UL>

<P><STRONG><a name="[279]"></a>HF_GetPhonebookSize</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTGetPhonebookSize_
</UL>

<P><STRONG><a name="[27b]"></a>HF_ReadPhonebookEntries</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTGetPBListEntry_
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_get_pb_entry
</UL>

<P><STRONG><a name="[2ea]"></a>HF_FindPhonebookEntries</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2eb]"></a>HF_WritePhonebookEntry</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[250]"></a>HF_EnableAppleExt</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoPendingAction
</UL>

<P><STRONG><a name="[251]"></a>HF_ReportIphoneEvent</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoPendingAction
</UL>

<P><STRONG><a name="[2ec]"></a>HF_IsChannelOpen</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2ed]"></a>HF_IsACLConnected</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2ee]"></a>HF_IsHandsfreeConnected</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2ef]"></a>HF_IsAudioConnected</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IsAudioUp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2f0]"></a>HF_GatewayFeatures</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2f1]"></a>HF_GetRemoteBDAddr</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetBdAddr
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IsLinkUp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2f3]"></a>HF_ProfileVersion</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2f4]"></a>HF_GatewayHoldFeatures</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[a95]"></a>HF_RegisterCmdOverride</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hf.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>HF_SpeakerGain</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2f6]"></a>HF_MicGain</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2f7]"></a>HF_IsNRECEnabled</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2f8]"></a>HF_IsInbandRingEnabled</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2f9]"></a>HF_IsCallIdNotifyEnabled</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2fa]"></a>HF_IsVoiceRecActive</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2fb]"></a>HF_IsCallWaitingActive</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[281]"></a>HF_SyncSpeakerVol</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_vol_sync
</UL>

<P><STRONG><a name="[252]"></a>HF_GetRemoteDeviceFactoryInfo</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoPendingAction
</UL>

<P><STRONG><a name="[254]"></a>HF_GetRemoteDeviceModeInfo</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoPendingAction
</UL>

<P><STRONG><a name="[283]"></a>HF_CSCS</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_cscs
</UL>

<P><STRONG><a name="[a96]"></a>BtEnableHidFunc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hid.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>HandleHidSetProtocol</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = HandleHidSetProtocol &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDataHandler
</UL>

<P><STRONG><a name="[284]"></a>HID_Register</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, hid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterPsm
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidRegisterSdpService
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidApp_Init
</UL>

<P><STRONG><a name="[a97]"></a>BtHidGetOutData</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hid.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>HidSend</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidSendKey_
</UL>

<P><STRONG><a name="[303]"></a>HidSend2</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidSendKey_
</UL>

<P><STRONG><a name="[1a1]"></a>HidSendKey_</STRONG> (Thumb, 564 bytes, Stack size 8 bytes, hid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBtPacketRemaining
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidSend2
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidSend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[305]"></a>BTHidMultiKeySend</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, hid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidKeySendByte
</UL>

<P><STRONG><a name="[306]"></a>BTHidKeySendByte</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidMultiKeySend
</UL>

<P><STRONG><a name="[1a2]"></a>HidSendKeyWithData_</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, hid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBtPacketRemaining
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[307]"></a>BTHidDataSend</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, hid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1a3]"></a>BTHidMultiKeySendDownUp_</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, hid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBtPacketRemaining
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[308]"></a>BTHidMultiKeySendDown</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, hid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidMultiKeySendUp
</UL>

<P><STRONG><a name="[309]"></a>BTHidMultiKeySendUp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidMultiKeySendDown
</UL>

<P><STRONG><a name="[1a4]"></a>BTHidSendRawData_</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, hid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBtPacketRemaining
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[30a]"></a>BTHidSendRawData</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBtPacketRemaining
</UL>

<P><STRONG><a name="[30b]"></a>BTHidIsReadyUserMode</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBtPacketRemaining
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[a98]"></a>BTHidUserDataModeReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hid.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>SPPServiceConnectionCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spp.o(.text)
</UL>
<P><STRONG><a name="[1ce]"></a>SPP_InitDevice</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Register
</UL>

<P><STRONG><a name="[1d0]"></a>SPP_Open</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_UnlockDev
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_LockDev
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initDevice
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openServerPort
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RegisterHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Register
</UL>

<P><STRONG><a name="[1db]"></a>SPP_Close</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_UnlockDev
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_LockDev
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deRegisterService
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeDevice
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CloseChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_spp_close
</UL>

<P><STRONG><a name="[1d5]"></a>SPP_Read</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_ReadBuf
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_UnlockDev
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_LockDev
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advanceCredit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisSppRcvData
</UL>

<P><STRONG><a name="[1d3]"></a>SPP_Write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_WriteBuf
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_UnlockDev
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_LockDev
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendToRfComm
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SppDataReqSend
</UL>

<P><STRONG><a name="[326]"></a>SPP_Ioctl</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_Ioctl
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_UnlockDev
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_LockDev
</UL>

<P><STRONG><a name="[a99]"></a>SPP_SetBaud</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spp.o(.text), UNUSED)

<P><STRONG><a name="[a9a]"></a>SPP_SetFlowControl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spp.o(.text), UNUSED)

<P><STRONG><a name="[a9b]"></a>SPP_SetDataFormat</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spp.o(.text), UNUSED)

<P><STRONG><a name="[a9c]"></a>SPP_SetModemControl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spp.o(.text), UNUSED)

<P><STRONG><a name="[a9d]"></a>SPP_SendPortSettings</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spp.o(.text), UNUSED)

<P><STRONG><a name="[598]"></a>HciTransportError</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hci_proc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleReadBufferComplete
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleSetFctlComplete
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleBuffSizeComplete
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciResetRetryHandler
</UL>

<P><STRONG><a name="[132]"></a>HciBufferInd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hci_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartRcvData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartH5RcvData
</UL>

<P><STRONG><a name="[13b]"></a>HciPacketSent</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hci_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HciPacketSent
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartSendData
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartH5SendData
</UL>

<P><STRONG><a name="[330]"></a>GetRcvListItemNum</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hci_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetListItemNum
</UL>

<P><STRONG><a name="[73]"></a>HciPktsCompleteTimerHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hci_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HciPktsCompleteTimerHandler &rArr; HciSendCompletedPackets &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCompletedPackets
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.text)
</UL>
<P><STRONG><a name="[338]"></a>HCI_Process</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, hci_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_HciReset
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioInitialized
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciCheckForTxData
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommands
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCompletedPackets
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessReceivedData
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessBadRxBuffers
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessSentPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Process
</UL>

<P><STRONG><a name="[33d]"></a>MeCallLinkHandlers</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MeCallLinkHandlers
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleSimplePairingComplete
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleKeypress
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportEncryptionResult
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportAuthenticateResult
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSniffSubrating
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSetSniffSubratingParmsOp
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportLinkUp
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportConnPacketTypeChange
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRoleChange
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportModeChange
</UL>

<P><STRONG><a name="[33c]"></a>MeReportLinkUp</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = MeReportLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCallLinkHandlers
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallAndRemoveHandlers
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFreeRemoteDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemExtFeatures
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemFeatures
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAclConComplete
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemExtFeaturesOp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemFeaturesOp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkRejectOp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkAcceptOp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkConnectOp
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailRemDevCommand
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
</UL>

<P><STRONG><a name="[7c]"></a>MeHandleLinkConnectOp</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = MeHandleLinkConnectOp &rArr; MeReportLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportLinkUp
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkConnectTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>MeHandleLinkAcceptOp</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = MeHandleLinkAcceptOp &rArr; MeReportLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportLinkUp
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkAcceptTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>MeHandleLinkRejectOp</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = MeHandleLinkRejectOp &rArr; MeReportLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportLinkUp
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkRejectTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>MeHandleLinkDisconnectOp</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = MeHandleLinkDisconnectOp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkDisconnectTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>MeHandleRemNameReqOp</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MeHandleRemNameReqOp &rArr; MeReportMeCommandComplete &rArr; MeFindMatchingToken &rArr; IsMeCommandEqual &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportMeCommandComplete
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRemNameReqTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>MeHandleHoldModeOp</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = MeHandleHoldModeOp &rArr; ReportModeChange &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartHoldModeTask
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportModeChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>MeHandleSniffModeOp</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = MeHandleSniffModeOp &rArr; ReportModeChange &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSniffModeTask
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportModeChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>MeHandleExitSniffModeOp</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = MeHandleExitSniffModeOp &rArr; ReportModeChange &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartExitSniffModeTask
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportModeChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>MeHandleSetSniffSubratingParmsOp</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = MeHandleSetSniffSubratingParmsOp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCallLinkHandlers
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailRemDevCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>MeHandleParkModeOp</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = MeHandleParkModeOp &rArr; ReportModeChange &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartParkModeTask
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportModeChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>MeHandleExitParkModeOp</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = MeHandleExitParkModeOp &rArr; ReportModeChange &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartExitParkModeTask
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportModeChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>MeHandleSwitchRoleOp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = MeHandleSwitchRoleOp &rArr; ReportRoleChange &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSwitchRoleTask
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRoleChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>MeHandleWriteLinkPolicyOp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MeHandleWriteLinkPolicyOp &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>MeHandleCancelConnectOp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = MeHandleCancelConnectOp &rArr; MeReportNMResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportNMResults
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>MeHandleCancelRemNameOp</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MeHandleCancelRemNameOp &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>MeChangeConnPacketTypeOp</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = MeChangeConnPacketTypeOp &rArr; ReportConnPacketTypeChange &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportConnPacketTypeChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>MeHandleReadRemFeaturesOp</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = MeHandleReadRemFeaturesOp &rArr; MeReportLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportLinkUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>MeHandleReadRemExtFeaturesOp</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = MeHandleReadRemExtFeaturesOp &rArr; MeReportLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportLinkUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[353]"></a>ME_FindRemoteDeviceP</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ME_FindRemoteDeviceP &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetRemoteDeviceName
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfcommData_Open
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rfc_disconnect
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleIoCapRsp
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleIoCapReq
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleLinkKeyNotify
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleSimplePairingComplete
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleConfirmReq
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleRemOobDataReq
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleKeypress
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserPassKeyNotify
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandlePassKeyReq
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoReq
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleLinkKeyReq
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCheckRemDevToken
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CreateLink
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleRoleChange
</UL>

<P><STRONG><a name="[354]"></a>MeGetFreeRemoteDevice</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MeGetFreeRemoteDevice &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CreateLink
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkConnectReq
</UL>

<P><STRONG><a name="[36b]"></a>MeMapHciToRemoteDevice</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, mecon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleEncryptChange
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleAuthenticateComplete
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCheckRemDevToken
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSniffSubrating
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkSupervTimeout
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemExtFeatures
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemFeatures
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleQosSetupComplete
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleConnPacketTypeChange
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleModeChange
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciTxReady
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciTxDone
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciReceive
</UL>

<P><STRONG><a name="[355]"></a>MeHandleLinkConnectReq</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = MeHandleLinkConnectReq &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackCheckBB
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkConnectReq
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevEventHandler
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeGetFreeRemoteDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[1b2]"></a>GetCurBtConnectedFlag</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mecon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSppConnectedFlag
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsHfConnectedFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSetScanDisable
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSetScanEnable
</UL>

<P><STRONG><a name="[359]"></a>MeHandleAclConComplete</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = MeHandleAclConComplete &rArr; MeReportLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportAuthenticateResult
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeChangeAccessibleMode
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetConnectionPacketType
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportLinkUp
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleConnectComplete
</UL>

<P><STRONG><a name="[35d]"></a>MeHandleConnectComplete</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = MeHandleConnectComplete &rArr; ScoHandleConnectComplete &rArr; ScoReportScoLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleConnectComplete
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAclConComplete
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[364]"></a>MeHandleDisconnectComplete</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = MeHandleDisconnectComplete &rArr; L2CAP_LinkDisconnect &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessAllSecurityTokens
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleDisconnectComplete
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleDisconnectAcl
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeChangeAccessibleMode
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_LinkDisconnect
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailPendingRemDevCommands
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallAndRemoveHandlers
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFreeRemoteDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[369]"></a>MeHandleRemNameReqComplete</STRONG> (Thumb, 104 bytes, Stack size 80 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MeHandleRemNameReqComplete &rArr; MeReportMeCommandComplete &rArr; MeFindMatchingToken &rArr; IsMeCommandEqual &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportMeCommandComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[36a]"></a>MeHandleModeChange</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = MeHandleModeChange &rArr; ReportModeChange &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackDataStatusCallBackFunc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RequestToSend
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeMapHciToRemoteDevice
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportModeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[36d]"></a>MeHandleRoleChange</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = MeHandleRoleChange &rArr; ReportRoleChange &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRoleChange
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[36e]"></a>MeHandleConnPacketTypeChange</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = MeHandleConnPacketTypeChange &rArr; ReportConnPacketTypeChange &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeMapHciToRemoteDevice
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportConnPacketTypeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[36f]"></a>MeHandleQosSetupComplete</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = MeHandleQosSetupComplete &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost32
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeMapHciToRemoteDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[371]"></a>MeHandleReadRemFeatures</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = MeHandleReadRemFeatures &rArr; MeReportLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessAllSecurityTokens
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeMapHciToRemoteDevice
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportLinkUp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[372]"></a>MeHandleReadRemExtFeatures</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = MeHandleReadRemExtFeatures &rArr; MeReportLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessAllSecurityTokens
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeMapHciToRemoteDevice
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportLinkUp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[373]"></a>MeHandleRemHostSuppFeatures</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = MeHandleRemHostSuppFeatures &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[374]"></a>MeHandleLinkSupervTimeout</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = MeHandleLinkSupervTimeout &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeMapHciToRemoteDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[375]"></a>MeHandleSniffSubrating</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = MeHandleSniffSubrating &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeMapHciToRemoteDevice
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCallLinkHandlers
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[9c]"></a>MeHandleDiscoverRole</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = MeHandleDiscoverRole &rArr; ReportRoleChange &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRoleChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[376]"></a>MeDisconnectLink</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MeDisconnectLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFreeRemoteDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoReq
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_ForceDisconnectLinkWithReason
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleRxError
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_FreeChannel
</UL>

<P><STRONG><a name="[5e1]"></a>MeEnumerateRemoteDevices</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mecon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpHandleMarkedRecord
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServGetInfo
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpFindRemDevWithSdpChannel
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailPendingCommands
</UL>

<P><STRONG><a name="[3ac]"></a>MeCheckModeChange</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, mecon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StopSniff
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SwitchRole
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StopPark
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StartPark
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StartSniff
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Hold
</UL>

<P><STRONG><a name="[377]"></a>MeHandleDataReqWhileNotActive</STRONG> (Thumb, 66 bytes, Stack size 280 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_QueueTxPacket
</UL>

<P><STRONG><a name="[378]"></a>DS_FindDevice</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, medev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_DeleteDeviceRecord
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateDataLink
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoRfcommStartConnection
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AddDeviceRecord
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevSdpServiceFound
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_AddDevice
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_DeleteDevice
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevEventHandler
</UL>

<P><STRONG><a name="[379]"></a>DS_DeleteDevice</STRONG> (Thumb, 100 bytes, Stack size 288 bytes, medev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_AddDevice
</UL>

<P><STRONG><a name="[37a]"></a>DS_AddDevice</STRONG> (Thumb, 382 bytes, Stack size 320 bytes, medev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsFunction__
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_FindDeviceRecord
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_DeleteDevice
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_FindDevice
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateDataLink
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevEventHandler
</UL>

<P><STRONG><a name="[37c]"></a>DS_EnumDeviceList</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, medev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DS_EnumDeviceList
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevInquiryStart
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_EnumDevicesByQuality
</UL>

<P><STRONG><a name="[37d]"></a>DS_EnumDevicesByQuality</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, medev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS_EnumDevicesByQuality &rArr; DS_EnumDeviceList
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_EnumDeviceList
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_SelectDevice
</UL>

<P><STRONG><a name="[37e]"></a>DS_SelectDevice</STRONG> (Thumb, 158 bytes, Stack size 280 bytes, medev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = DS_SelectDevice &rArr; DS_EnumDevicesByQuality &rArr; DS_EnumDeviceList
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_EnumDevicesByQuality
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateDataLink
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoRfcommStartConnection
</UL>

<P><STRONG><a name="[14d]"></a>DS_SelectDeviceResult</STRONG> (Thumb, 118 bytes, Stack size 288 bytes, medev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = DS_SelectDeviceResult
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_callback
</UL>

<P><STRONG><a name="[16a]"></a>DS_RegisterMonitorHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, medev.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[37f]"></a>MeDevInquiryStart</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, medev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MeDevInquiryStart &rArr; DS_EnumDeviceList
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_EnumDeviceList
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInquiryOp
</UL>

<P><STRONG><a name="[357]"></a>MeDevEventHandler</STRONG> (Thumb, 514 bytes, Stack size 96 bytes, medev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTGetDeviceName
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_EnumDeviceRecords
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_AddDevice
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_FindDevice
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoReq
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportNMResults
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkConnectReq
</UL>

<P><STRONG><a name="[381]"></a>MeDevSdpServiceFound</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, medev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MeDevSdpServiceFound &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
</UL>

<P><STRONG><a name="[a9e]"></a>SetEnableRoleSwitchFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[a9f]"></a>SetDisableRoleSwitchFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>ME_RegisterGlobalHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_Init
</UL>

<P><STRONG><a name="[384]"></a>ME_UnregisterGlobalHandler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[163]"></a>ME_SetEventMask</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_Init
</UL>

<P><STRONG><a name="[1bc]"></a>ME_SetInquiryMode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSetInquiryMode
</UL>

<P><STRONG><a name="[aa0]"></a>ME_GetInquiryMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[386]"></a>ME_CheckRadioFeature</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ME_CheckRadioFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetChannelClassification
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_SetLinkEncryption
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetInqTxPowerLevel
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkConnectReq
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_CreateLink
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkRejectTask
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkAcceptTask
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleConfigRsp
</UL>

<P><STRONG><a name="[385]"></a>ME_SetInqTxPowerLevel</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CheckRadioFeature
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>

<P><STRONG><a name="[aa1]"></a>ME_GetInqRspTxPowerLevel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>ME_AutoCreateExtInquiryRsp</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_CreateEIRServiceClassList
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[159]"></a>ME_SetExtInquiryRsp</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtInqResponseData
</UL>

<P><STRONG><a name="[389]"></a>ME_GetExtInqData</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetExtInqServiceClassList
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetExtInqRemoteDeviceName
</UL>

<P><STRONG><a name="[38a]"></a>ME_GetExtInqRemoteDeviceName</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetExtInqData
</UL>

<P><STRONG><a name="[38b]"></a>ME_GetExtInqServiceClassList</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetExtInqData
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost32
</UL>

<P><STRONG><a name="[1b7]"></a>ME_Inquiry</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDoTestModeDeviceInquiry
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDoDeviceInquiry
</UL>

<P><STRONG><a name="[1be]"></a>ME_CancelInquiry</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportInqCancelComplete
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSetInquiryCancel
</UL>

<P><STRONG><a name="[35a]"></a>ME_SetConnectionPacketType</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ME_SetConnectionPacketType &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAclConComplete
</UL>

<P><STRONG><a name="[1b5]"></a>ME_SetAccessibleModeNC</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ME_SetAccessibleModeNC &rArr; MeWriteClassOfDevice &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteClassOfDevice
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeIsScanValsLegal
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeIsAccessModeInfoEqual
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSetAccessMode
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
</UL>

<P><STRONG><a name="[aa2]"></a>ME_GetAccessibleModeNC</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[aa3]"></a>ME_GetCurAccessibleMode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>ME_GetRemoteDeviceName</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ME_GetRemoteDeviceName &rArr; MeProcessToken &rArr; MeFindMatchingToken &rArr; IsMeCommandEqual &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeProcessToken
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTGetDeviceName
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNameReq
</UL>

<P><STRONG><a name="[391]"></a>ME_CancelGetRemoteDeviceName</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFindMatchingToken
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>

<P><STRONG><a name="[16e]"></a>ME_SetLocalDeviceName</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteLocalName
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[543]"></a>ME_ReadLocalBdAddr</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_ReadLocalBdAddr
</UL>

<P><STRONG><a name="[394]"></a>ME_CreateLink</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ME_CreateLink &rArr; ME_FindRemoteDeviceP &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeGetFreeRemoteDevice
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateDataLink
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoRfcommStartConnection
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcLinkCallBack
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
</UL>

<P><STRONG><a name="[395]"></a>ME_ForceDisconnectLinkWithReason</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ME_ForceDisconnectLinkWithReason &rArr; MeDisconnectLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDisconnectLink
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveDataLink
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rfc_disconnect
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
</UL>

<P><STRONG><a name="[396]"></a>ME_CancelCreateLink</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ME_CancelCreateLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveDataLink
</UL>

<P><STRONG><a name="[164]"></a>ME_RegisterAcceptHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[531]"></a>ME_SetConnectionRole</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, meif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_Init
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_SetMasterRole
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
</UL>

<P><STRONG><a name="[14b]"></a>ME_AcceptIncomingLink</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ME_AcceptIncomingLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_callback
</UL>

<P><STRONG><a name="[397]"></a>ME_RejectIncomingLink</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>

<P><STRONG><a name="[168]"></a>SEC_RegisterPairingHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[169]"></a>SEC_RegisterAuthorizeHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[151]"></a>SEC_UserConfirm</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEC_UserConfirm &rArr; SecSetUserIo &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecSetUserIo
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_callback
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAutoConfirm
</UL>

<P><STRONG><a name="[39b]"></a>SEC_SetPassKey</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecSetUserIo
</UL>

<P><STRONG><a name="[14a]"></a>SEC_SetPin</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEC_SetPin &rArr; SecSetUserIo &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecSetUserIo
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_callback
</UL>

<P><STRONG><a name="[aa4]"></a>SEC_SetAuthRequirements</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>SEC_SetAuthorizeRequirements</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[aa5]"></a>SEC_GetSimplePairingMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[aa6]"></a>SEC_GetAuthRequirements</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[aa7]"></a>SEC_GetAuthorizeRequirements</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>SEC_SetSimplePairingDebugMode</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>

<P><STRONG><a name="[39d]"></a>SEC_AuthenticateLink</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAddAuthenticateOpToQueue
</UL>

<P><STRONG><a name="[2bf]"></a>SEC_Register</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfRegisterSDPandSEC
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_RegisterSec
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_RegisterSec
</UL>

<P><STRONG><a name="[2c3]"></a>SEC_Unregister</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Deregister
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Deregister
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_UnregisterSec
</UL>

<P><STRONG><a name="[39f]"></a>SEC_AccessRequest</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SEC_AccessRequest &rArr; SecProcessSecurityToken &rArr; SecAddAuthenticateOpToQueue &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessSecurityToken
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAdvanceNegPending
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateDisconnected
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectReq
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CLOSED
</UL>

<P><STRONG><a name="[3a1]"></a>SEC_AddDeviceRecord</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SEC_AddDeviceRecord &rArr; DDB_AddRecord &rArr; FlashSave8DevRec &rArr; FlshPairedListSync &rArr; FlshSavePairedList &rArr; FlshUpdateAllPairedList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_AddRecord
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AuthorizeServiceB
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleLinkKeyNotify
</UL>

<P><STRONG><a name="[37b]"></a>SEC_FindDeviceRecord</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEC_FindDeviceRecord &rArr; DDB_FindRecord &rArr; DdbFindRecord &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_FindRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AuthorizeServiceB
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkKeyRspTask
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_AddDevice
</UL>

<P><STRONG><a name="[14c]"></a>SEC_AuthorizeServiceB</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = SEC_AuthorizeServiceB &rArr; SEC_AddDeviceRecord &rArr; DDB_AddRecord &rArr; FlashSave8DevRec &rArr; FlshPairedListSync &rArr; FlshSavePairedList &rArr; FlshUpdateAllPairedList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AddDeviceRecord
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_FindDeviceRecord
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessAllSecurityTokens
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_callback
</UL>

<P><STRONG><a name="[3a2]"></a>SEC_CancelAccessRequest</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SEC_CancelAccessRequest &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecBtGetFreeSecurityOp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAccessTimeoutHandler
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
</UL>

<P><STRONG><a name="[3a4]"></a>ME_CheckRemoteHostFeature</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, meif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_SetLinkEncryption
</UL>

<P><STRONG><a name="[3a3]"></a>SEC_SetLinkEncryption</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecBtGetFreeSecurityOp
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CheckRemoteHostFeature
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CheckRadioFeature
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>

<P><STRONG><a name="[3a5]"></a>SEC_EnableSecurityMode3</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecSetSecurityMode
</UL>

<P><STRONG><a name="[3a7]"></a>SEC_DisableSecurityMode3</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecSetSecurityMode
</UL>

<P><STRONG><a name="[165]"></a>SEC_SetBondingMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[aa8]"></a>SEC_GetBondingMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>SEC_SetIoCapabilities</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[aa9]"></a>SEC_GetIoCapabilities</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>SEC_OobDataReceived</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3a9]"></a>SEC_GetLocalOobData</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>

<P><STRONG><a name="[aaa]"></a>SEC_GetRemoteIoCapabilities</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[aab]"></a>SEC_GetRemoteAuthRequirements</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>SEC_DeleteDeviceRecord</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_DeleteRecord
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_FindDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeleteRecord
</UL>

<P><STRONG><a name="[380]"></a>SEC_EnumDeviceRecords</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEC_EnumDeviceRecords
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_EnumDeviceRecords
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevEventHandler
</UL>

<P><STRONG><a name="[3ab]"></a>ME_Hold</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCheckModeChange
</UL>

<P><STRONG><a name="[3ad]"></a>ME_StartSniff</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ME_StartSniff &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCheckModeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrIdleTimerNotify
</UL>

<P><STRONG><a name="[1d2]"></a>ME_StopSniff</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ME_StopSniff &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCheckModeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SppDataReqSend
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IndicateLinkActivity
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateAudioLink
</UL>

<P><STRONG><a name="[3ae]"></a>ME_SetSniffSubratingParms</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>

<P><STRONG><a name="[3af]"></a>ME_StartPark</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCheckModeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StartParkAll
</UL>

<P><STRONG><a name="[3b0]"></a>ME_StopPark</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ME_StopPark &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCheckModeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateAudioLink
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StopParkAll
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
</UL>

<P><STRONG><a name="[3b1]"></a>ME_StartParkAll</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StartPark
</UL>

<P><STRONG><a name="[3b2]"></a>ME_StopParkAll</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StopPark
</UL>

<P><STRONG><a name="[3b3]"></a>ME_SwitchRole</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ME_SwitchRole &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCheckModeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
</UL>

<P><STRONG><a name="[16c]"></a>ME_SetClassOfDevice</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteClassOfDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[aac]"></a>ME_GetChannelClassification</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>ME_SetChannelClassification</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CheckRadioFeature
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>

<P><STRONG><a name="[3b5]"></a>ME_MarkAfhChannels</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_MarkWiFiChannel
</UL>

<P><STRONG><a name="[3b7]"></a>ME_MarkWiFiChannel</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_MarkAfhChannels
</UL>

<P><STRONG><a name="[3b8]"></a>ME_SendHciCommand</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeIsValidGeneralToken
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFindMatchingToken
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCheckRemDevToken
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SendHciCommandAsync
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SendHciCommandSync
</UL>

<P><STRONG><a name="[3bb]"></a>ME_SendHciCommandSync</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SendHciCommand
</UL>

<P><STRONG><a name="[3bc]"></a>ME_SendHciCommandAsync</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SendHciCommand
</UL>

<P><STRONG><a name="[aad]"></a>ME_GetHciConnectionHandle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>ME_GetBdAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetRemoteBDAddr
</UL>

<P><STRONG><a name="[16b]"></a>ME_SetDefaultLinkPolicy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteDefaultLinkPolicy
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[542]"></a>ME_GetStackInitState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_ReadLocalBdAddr
</UL>

<P><STRONG><a name="[539]"></a>ME_GetBtVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, meif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_SetAudioDefaultParms
</UL>

<P><STRONG><a name="[525]"></a>ME_GetBtFeatures</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, meif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_SetAudioDefaultParms
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrAcceptAudioLink
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrCreateAudioLink
</UL>

<P><STRONG><a name="[aae]"></a>ME_GetRemoteFeatures</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[aaf]"></a>ME_GetRemoteHostFeatures</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[ab0]"></a>ME_CheckRemoteFeature</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, meif.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>ME_HasPendingTask</STRONG> (Thumb, 826 bytes, Stack size 0 bytes, meif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MePendingCommandHandler
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_RadioShutdownTime
</UL>

<P><STRONG><a name="[3be]"></a>ME_RadioShutdownTime</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408 + Unknown Stack Size
<LI>Call Chain = ME_RadioShutdownTime &rArr; RMGR_RadioShutdown &rArr; HCI_RadioDeinitializing &rArr; ME_Callback &rArr; L2CAP_HciReceive &rArr; L2Cap_ProcessSignal &rArr; L2Cap_ProcessReq &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioShutdown
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_HasPendingTask
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MePendingCommandHandler
</UL>

<P><STRONG><a name="[3c1]"></a>ME_GetHciFlowParms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, meif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_GetFlowParms
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_GetScoTxPacketLen
</UL>

<P><STRONG><a name="[243]"></a>ME_SetHciScoPacketSize</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ME_SetHciScoPacketSize
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_SetScoPacketSize
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeAppCallback
</UL>

<P><STRONG><a name="[399]"></a>SecBtGetFreeSecurityOp</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, mesec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleIoCapReq
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleConfirmReq
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleRemOobDataReq
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandlePassKeyReq
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoReq
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleLinkKeyReq
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecSetSecurityMode
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessSecurityToken
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAddAuthenticateOpToQueue
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_SetLinkEncryption
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_CancelAccessRequest
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecSetUserIo
</UL>

<P><STRONG><a name="[3c4]"></a>SecIsCurrentSecurityGoodEnough</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, mesec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessSecurityToken
</UL>

<P><STRONG><a name="[39e]"></a>SecAddAuthenticateOpToQueue</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SecAddAuthenticateOpToQueue &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecBtGetFreeSecurityOp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessSecurityToken
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AuthenticateLink
</UL>

<P><STRONG><a name="[3a0]"></a>SecProcessSecurityToken</STRONG> (Thumb, 780 bytes, Stack size 24 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SecProcessSecurityToken &rArr; SecAddAuthenticateOpToQueue &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecIsCurrentSecurityGoodEnough
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecBtGetFreeSecurityOp
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAddAuthenticateOpToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AccessRequest
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessAllSecurityTokens
</UL>

<P><STRONG><a name="[366]"></a>SecProcessAllSecurityTokens</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SecProcessAllSecurityTokens &rArr; SecProcessSecurityToken &rArr; SecAddAuthenticateOpToQueue &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessSecurityToken
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AuthorizeServiceB
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleAuthorizeOp
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportEncryptionResult
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportAuthenticateResult
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemExtFeatures
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemFeatures
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDisconnectComplete
</UL>

<P><STRONG><a name="[35c]"></a>SecReportAuthenticateResult</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = SecReportAuthenticateResult &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessAllSecurityTokens
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCallLinkHandlers
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleAuthenticateComplete
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleAuthenticateOp
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAclConComplete
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailPendingRemDevCommands
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailRemDevCommand
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
</UL>

<P><STRONG><a name="[81]"></a>SecHandleAuthenticateOp</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = SecHandleAuthenticateOp &rArr; SecReportAuthenticateResult &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAuthenticateTask
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportAuthenticateResult
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[3c7]"></a>SecIsLinkKeyGoodEnough</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecIsLinkKeyGoodEnough
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkKeyRspTask
</UL>

<P><STRONG><a name="[82]"></a>SecHandleLinkKeyRspOp</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SecHandleLinkKeyRspOp &rArr; StartLinkKeyRspTask &rArr; SEC_FindDeviceRecord &rArr; DDB_FindRecord &rArr; DdbFindRecord &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsFunction__
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkKeyRspTask
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>SecHandleUserIoRspOp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SecHandleUserIoRspOp &rArr; StartUserIoRspTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUserIoRspTask
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[363]"></a>SecHandleAuthorizeRequest</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecHandleAuthorizeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleAuthorizeOp
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailPendingRemDevCommands
</UL>

<P><STRONG><a name="[83]"></a>SecHandleAuthorizeOp</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SecHandleAuthorizeOp &rArr; SecProcessAllSecurityTokens &rArr; SecProcessSecurityToken &rArr; SecAddAuthenticateOpToQueue &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessAllSecurityTokens
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleAuthorizeRequest
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[360]"></a>SecReportEncryptionResult</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = SecReportEncryptionResult &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessAllSecurityTokens
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCallLinkHandlers
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleEncryptChange
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleEncryptOp
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailPendingRemDevCommands
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailRemDevCommand
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
</UL>

<P><STRONG><a name="[84]"></a>SecHandleEncryptOp</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = SecHandleEncryptOp &rArr; SecReportEncryptionResult &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartEncryptionTask
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportEncryptionResult
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[3cc]"></a>SecReportSecurityModeResult</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = SecReportSecurityModeResult &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleSecurityModeOp
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
</UL>

<P><STRONG><a name="[85]"></a>SecHandleSecurityModeOp</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = SecHandleSecurityModeOp &rArr; SecReportSecurityModeResult &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportSecurityModeResult
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWriteAuthenticateEnableTask
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWriteEncryptModeTask
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>SecHandleIoCapRspOp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SecHandleIoCapRspOp &rArr; StartIoCapRspTask &rArr; IoCapRequestAccept &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartIoCapRspTask
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>SecHandleGetOobDataOp</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = SecHandleGetOobDataOp &rArr; MeReportNMResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartGetOobDataTask
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportNMResults
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>SecHandleSetSmpDbgModeOp</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SecHandleSetSmpDbgModeOp &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>SecHandleRemOobDataReqRspOp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SecHandleRemOobDataReqRspOp &rArr; StartRemOobDataReqRspTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRemOobDataReqRspTask
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>SecMeHandleRefreshEncryptKeyOp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SecMeHandleRefreshEncryptKeyOp &rArr; StartRefreshEncryptKey &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRefreshEncryptKey
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[15c]"></a>BTSetIoCapSyncFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mesec.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[3d6]"></a>SecHandleLinkKeyReq</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SecHandleLinkKeyReq &rArr; ME_FindRemoteDeviceP &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecBtGetFreeSecurityOp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[39a]"></a>SecGetPinLen</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, mesec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoReq
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecSetUserIo
</UL>

<P><STRONG><a name="[3d8]"></a>SecHandleUserIoReq</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = SecHandleUserIoReq &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecGetCurrentBondingMode
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecIsMitmRequired
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAutoConfirm
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecGetPinLen
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecBtGetFreeSecurityOp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevEventHandler
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDisconnectLink
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleConfirmReq
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserPassKeyNotify
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandlePassKeyReq
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[3db]"></a>SecHandlePassKeyReq</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = SecHandlePassKeyReq &rArr; SecHandleUserIoReq &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoReq
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecBtGetFreeSecurityOp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[3dc]"></a>SecHandleUserPassKeyNotify</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = SecHandleUserPassKeyNotify &rArr; SecHandleUserIoReq &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoReq
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost32
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[3dd]"></a>SecHandleKeypress</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = SecHandleKeypress &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCallLinkHandlers
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[3de]"></a>SecHandleRemOobDataReq</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SecHandleRemOobDataReq &rArr; ME_FindRemoteDeviceP &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecBtGetFreeSecurityOp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[3df]"></a>SecHandleConfirmReq</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = SecHandleConfirmReq &rArr; SecHandleUserIoReq &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoReq
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecBtGetFreeSecurityOp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost32
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[3e0]"></a>SecHandleSimplePairingComplete</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = SecHandleSimplePairingComplete &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCallLinkHandlers
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[3e1]"></a>SecHandleAuthenticateComplete</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = SecHandleAuthenticateComplete &rArr; SecReportAuthenticateResult &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportAuthenticateResult
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeMapHciToRemoteDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[3e2]"></a>SecHandleReturnLinkKeys</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SecHandleReturnLinkKeys &rArr; MeFindGeneralEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFindGeneralEvent
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[3e4]"></a>SecHandleLinkKeyNotify</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = SecHandleLinkKeyNotify &rArr; SEC_AddDeviceRecord &rArr; DDB_AddRecord &rArr; FlashSave8DevRec &rArr; FlshPairedListSync &rArr; FlshSavePairedList &rArr; FlshUpdateAllPairedList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AddDeviceRecord
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[3e5]"></a>SecHandleEncryptChange</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = SecHandleEncryptChange &rArr; SecReportEncryptionResult &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportEncryptionResult
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeMapHciToRemoteDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[3e6]"></a>SecHandleIoCapReq</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SecHandleIoCapReq &rArr; ME_FindRemoteDeviceP &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecBtGetFreeSecurityOp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[3e7]"></a>SecHandleIoCapRsp</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SecHandleIoCapRsp &rArr; IoCapRequestReject &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCapInvalidBondingMode
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCapRequestReject
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[5c]"></a>SecAccessTimeoutHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SecAccessTimeoutHandler &rArr; SEC_CancelAccessRequest &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_CancelAccessRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> meif.o(.text)
</UL>
<P><STRONG><a name="[3a6]"></a>SecSetSecurityMode</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mesec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecBtGetFreeSecurityOp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_DisableSecurityMode3
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_EnableSecurityMode3
</UL>

<P><STRONG><a name="[89]"></a>SecHandleDenyOobDataReqRspOp</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SecHandleDenyOobDataReqRspOp &rArr; StartDenyOobDataReqRspTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDenyOobDataReqRspTask
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[3e9]"></a>BtInitMemory</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, btalloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Init
</UL>

<P><STRONG><a name="[304]"></a>GetBtPacketRemaining</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, btalloc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidSendKey_
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidSendKeyWithData_
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidSendRawData_
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidMultiKeySendDownUp_
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidIsReadyUserMode
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidSendRawData
</UL>

<P><STRONG><a name="[145]"></a>EVM_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, eventmgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Init
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioInit
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Init
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_Init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Init
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_Init
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtInitMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_taskinit
</UL>

<P><STRONG><a name="[143]"></a>EVM_Deinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eventmgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioDeinit
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btstack_taskexit
</UL>

<P><STRONG><a name="[14e]"></a>EvmCancelTimer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, eventmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReconnectTimer
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_callback
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCloseChannel
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpResetPanelConnection
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelRsp
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelInput
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStreamClose
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelAdvavrcpTimer
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_CancelAccessRequest
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessAllSecurityTokens
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtParseResultCode
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrCancelIdleTimer
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmdControl
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpResetAdvCtConnection
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedResponse
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdtpCallback
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reset
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpStopQueryTimer
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeServerChannel
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeMux
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAllocDLC
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateOpen
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCommandSent
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StopTimer
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_FreeChannel
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleSetFctlComplete
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleBuffSizeComplete
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleCnf
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleNSC
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandlePNCnf
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendContinue
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_Receive
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_DeinitChannel
</UL>

<P><STRONG><a name="[157]"></a>EvmStartTimer</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, eventmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EvmStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetSystemTime
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReconnectTimer
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessReceivedData
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtSendCommand
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelRsp
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelInput
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_SendCommand
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpCloseStream
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvavrcpTimer_
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MePendingCommandHandler
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_RadioShutdownTime
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AccessRequest
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBbCheckTimer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrStartIdleTimer
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpPanelIntTimerExpired
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpPanelRspTimerExpired
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmdControl
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reset
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpStartQueryTimer
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendParmNegotiation
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendModemStatus
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGetFreeServiceChannel
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCommandPacket
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAdvanceIncomingToOpenState
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StartErtx
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_TimerFire
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StartRtx
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Config
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfTimeoutHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfServiceTimeoutHandler
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendLineStatus
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendRemotePortNeg
</UL>

<P><STRONG><a name="[1a7]"></a>EVM_Process</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eventmgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimers
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRun
</UL>

<P><STRONG><a name="[3f3]"></a>RXBUFF_Init</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, rxbuff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RXBUFF_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
</UL>

<P><STRONG><a name="[130]"></a>RXBUFF_Alloc</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, rxbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartRcvData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartH5RcvData
</UL>

<P><STRONG><a name="[32f]"></a>RXBUFF_Free</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, rxbuff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessReceivedData
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessBadRxBuffers
</UL>

<P><STRONG><a name="[ab1]"></a>RXBUFF_SetLength</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rxbuff.o(.text), UNUSED)

<P><STRONG><a name="[ab2]"></a>RXBUFF_Deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rxbuff.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>BEtoHost16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_CreateEIRServiceClassList
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevSdpServiceFound
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryProfileRsp
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryFeaturesRsp
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpVerifySdpQueryRsp
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvCmd
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmdControl
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvRsp
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayerAttrTxtRsp
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayerValueTxtRsp
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetElementAttrRsp
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleRegisterNotifyRsp
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpVerifySdpQueryRsp
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyAttributeIdList
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServParseQuery
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearch
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleAttribReq
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearchAttribReq
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpVerifyParmLength
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServMarkAttribs
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpValidateQueryParms
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientProcessResp
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleItemCmd
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleSetAddressedPlayerCmd
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleDisplayCharSetCmd
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_Receive
</UL>

<P><STRONG><a name="[4f6]"></a>BEtoHost32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_CreateEIRServiceClassList
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetElementAttrRsp
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayStatusRsp
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleRegisterNotifyRsp
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleAttribReq
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpRegisterNotifyRsp
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpGetElementAttrRsp
</UL>

<P><STRONG><a name="[12f]"></a>LEtoHost16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartRcvData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartH5RcvData
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommands
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessReceivedData
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessSentPackets
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFindGeneralEvent
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleEncryptChange
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleAuthenticateComplete
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleGetOobDataCommandComplete
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSecurityCommandComplete
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCheckRemDevToken
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetExtInqServiceClassList
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkConnectReq
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleDisconnectComplete
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleConnectComplete
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleConnectionStatusOnly
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleCompleteTask
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSniffSubrating
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkSupervTimeout
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemExtFeatures
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemFeatures
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleQosSetupComplete
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleConnPacketTypeChange
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleModeChange
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDisconnectComplete
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleConnectComplete
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDiscoverRoleTask
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IA_EventHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrHciCallback
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoFailCommand
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleConnChanged
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCompleteTaskRadioParms
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCommandSent
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInquiryResult
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleGeneralTask
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetMtu
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ValidateCommand
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessRsp
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessReq
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciTxReady
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciReceive
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessSignal
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleRxError
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleCompletedPackets
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleConnectComplete
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleDisconnectComplete
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleCommandComplete
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleReadBufferComplete
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleRPNReq
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_CONN_CNF
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleConfigReq
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleConfigRsp
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleSrvCatCP
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigCapabilityRspSM
</UL>

<P><STRONG><a name="[370]"></a>LEtoHost32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleConfirmReq
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserPassKeyNotify
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetExtInqServiceClassList
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleQosSetupComplete
</UL>

<P><STRONG><a name="[32c]"></a>StoreLE16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommand
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCompletedPackets
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHciPackets
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SetFlushTimeout
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRefreshEncryptKey
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartEncryptionTask
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAuthenticateTask
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_CreateEIRServiceClassList
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDiscoverRole
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemExtFeaturesOp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemFeaturesOp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeChangeConnPacketTypeOp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleWriteLinkPolicyOp
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSetSniffSubratingParmsOp
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartExitParkModeTask
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartParkModeTask
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartExitSniffModeTask
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSniffModeTask
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartHoldModeTask
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRemNameReqTask
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkDisconnectTask
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkConnectTask
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IA_EventHandler
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendParmNegotiation
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkDisconnectTask
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkAcceptTask
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkSetupTask
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkConnectTask
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWriteScanActivity
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoChangeConnPacketTypeOp
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteDefLinkPolicyOp
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessReq
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleReadBufferComplete
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Deinit
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendRemotePortNeg
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CONFIG
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleConfigReq
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoConfigReq
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigEncodeCapabilities
</UL>

<P><STRONG><a name="[3ca]"></a>StoreLE32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUserIoRspTask
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_CreateEIRServiceClassList
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkAcceptTask
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkSetupTask
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteCoDOp
</UL>

<P><STRONG><a name="[4e8]"></a>StoreBE16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRegisterSdpServices
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpStartServiceQuery
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpRegisterSdp
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_CreateMediaHeader
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtInformCharset
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtAddToNowPlaying
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtPlayItem
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtSetAddressedPlayer
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigDelayReport
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServParseQuery
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearch
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleAttribReq
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearchAttribReq
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpStoreAttribData
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServFinishUpPacket
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServSendError
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSdpClientQuery
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetAddressedPlayer
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpRegisterNotifyRsp
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpEncodeMediaElemAttr
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpGetPlayerValueTxtRsp
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpGetPlayerAttrTxtRsp
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvtpSendPacket
</UL>

<P><STRONG><a name="[4e9]"></a>StoreBE32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_CreateMediaHeader
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtRegisterNotification
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtGetMediaInfo
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpUpdateServiceDatabaseState
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpInitServer
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearch
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpStoreAttribData
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetTrack
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetPlayPosition
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpRegisterNotifyRsp
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayStatusCmd
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpEncodeMediaElemAttr
</UL>

<P><STRONG><a name="[289]"></a>_InsertTailList</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StopSniff
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetInquiryMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetExtInquiryRsp
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetAccessibleModeNC
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_RegisterGlobalHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Inquiry
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CancelInquiry
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_AcceptIncomingLink
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciPacketSent
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciBufferInd
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXBUFF_Free
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommand
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciCheckForTxData
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommands
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessSentPackets
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddRecord
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendData
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtSendCommand
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Register
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RegisterHandler
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpInitPanel
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelTxDone
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmd
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_SendResponse
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_SendCommand
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Register
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_RegisterStream
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_OpenStreamRsp
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_RegisterHandler
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStreamClose
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpFreeStreamInfo
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_StreamSendSbcPacket
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_RegisterSec
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_RegisterSec
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Register
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Query
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXBUFF_Init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Init
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Init
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_Init
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleIoCapReq
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleRemOobDataReq
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecSetSecurityMode
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessSecurityToken
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAddAuthenticateOpToQueue
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteLocalName
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteDefaultLinkPolicy
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteClassOfDevice
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeProcessToken
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SendHciCommand
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetChannelClassification
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SwitchRole
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StopPark
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StartPark
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetSniffSubratingParms
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StartSniff
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Hold
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GetLocalOobData
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_SetLinkEncryption
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AccessRequest
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_SetSimplePairingDebugMode
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_RejectIncomingLink
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CreateLink
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetInqTxPowerLevel
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecSetUserIo
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_EnumDevicesByQuality
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_DeleteDevice
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportMeCommandComplete
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetConnectionPacketType
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDisconnectLink
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDisconnectComplete
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAclConComplete
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRoleChange
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportModeChange
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_SetupLink
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_RejectIncomingConnection
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_DisconnectLink
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_CreateLink
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_AcceptIncomingConnection
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAllocListeningDevice
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAvdtpCallback
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevFreeDevice
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpResetAdvTgConnection
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvRspTxDone
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvCmdOperands
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvCmd
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpQueueRxCmd
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamStartRsp
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSecurityCtrl
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamReconfigRsp
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_AddContentProtection
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Register
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdtpCallback
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpFindNextStreamInfo
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpUpdateServiceDatabaseState
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpInitServer
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCheckForCreditToSend
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAllocService
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendParmNegotiation
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendModemStatus
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAllocMux
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfL2Callback
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCommand
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCmdRsp
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeProcessGenToken
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciTxDone
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendDiscRspInternal
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendDiscReqInternal
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConnRspInternal
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConnReqInternal
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_QueueTxPacket
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueDeferredCommands
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAggregateFlow
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendLineStatus
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendRemotePortNeg
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendNSC
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_SetErroneousDataReporting
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_SetConnectionPacketType
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sco_Send
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoConfigRsp
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoConfigReq
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrSignalCallback
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseConfigCmd
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleResponse
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendCmdWithParms
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpInsertStreamList
</UL>

<P><STRONG><a name="[30c]"></a>_InsertHeadList</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_InitDevice
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommands
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultEventHandler
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendToRfComm
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Query
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleConfirmReq
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleRemOobDataReq
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandlePassKeyReq
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoReq
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleLinkKeyReq
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessSecurityToken
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_CancelAccessRequest
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CancelCreateLink
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CancelGetRemoteDeviceName
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_AddDevice
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeChangeAccessibleMode
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemFeatures
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAclConComplete
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkConnectReq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleRemNameReqOp
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientL2CapCallback
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNextQuery
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAllocDLC
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleGenCmdOp
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMUXCheckNextTxQueue
</UL>

<P><STRONG><a name="[316]"></a>_RemoveHeadList</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXBUFF_Alloc
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommands
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessReceivedData
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessBadRxBuffers
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessSentPackets
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHciPackets
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetMaxPackets
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendToRfComm
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCloseChannel
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelTxDone
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmd
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_OpenStreamRsp
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpFreeStreamInfo
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_AddDevice
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleDisconnectComplete
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportMeCommandComplete
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_LinkDisconnect
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallAndRemoveHandlers
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStartNextQueuedCmd
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAllocListeningDevice
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpResetAdvTgConnection
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvRspTxDone
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvCmdOperands
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvCmd
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpQueueRxCmd
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpFlushCommandQueue
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendNextCommand
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamStartRsp
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSetConfig
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSecurityCtrl
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamReconfigRsp
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamReconfig
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigDelayReport
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdtpCallback
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpFindNextStreamInfo
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNextQuery
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCheckForCreditToSend
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendParmNegotiation
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendModemStatus
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCommand
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCommandSent
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoDataCallback
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailPendingCommands
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetSysPkt
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciDeleteConnection
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Deinit
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueDeferredCommands
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpFailNotification
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpFlushResponseQueue
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfTimeoutHandler
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMUXCheckNextTxQueue
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAggregateFlow
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendLineStatus
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendRemotePortNeg
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendNSC
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvtpSendNextPacket
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrSignalCallback
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpSendNextRcpFrame
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpSendNextBrwsFrame
</UL>

<P><STRONG><a name="[294]"></a>RemoveEntryList</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CancelInquiry
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_RemoveRecord
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Deregister
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Unregister
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveDataLink
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_DeregisterHandler
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Deregister
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_DeregisterStream
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Deregister
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimers
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_CancelAccessRequest
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CancelCreateLink
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_ForceDisconnectLinkWithReason
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CancelGetRemoteDeviceName
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_UnregisterGlobalHandler
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_DeleteDevice
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessAllSecurityTokens
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportMeCommandComplete
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeChangeAccessibleMode
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDisconnectLink
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAclConComplete
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailPendingRemDevCommands
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRemoveCommand
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_DeregisterHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAvdtpCallback
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpStrmConnCallback
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Deregister
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpUpdateServiceDatabaseState
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeServerChannel
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoFailPendingCommands
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeProcessGenToken
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_FlushChannelTransmits
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciTxReady
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrConnCallback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrSignalCallback
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseConfigCmd
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleResponse
</UL>

<P><STRONG><a name="[28a]"></a>IsNodeOnList</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, utils.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetInquiryMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetExtInquiryRsp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetEventMask
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetRemoteDeviceName
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CreateServiceLink
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_SelectDeviceResult
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_OpenStream
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXBUFF_Free
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommand
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCompletedPackets
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_RemoveRecord
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddRecord
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveAudioLink
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IsLinkUp
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IsAudioUp
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateAudioLink
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtSendCommand
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_IsCallWaitingActive
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_IsVoiceRecActive
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_IsCallIdNotifyEnabled
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_IsInbandRingEnabled
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_IsNRECEnabled
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_MicGain
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SpeakerGain
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GatewayHoldFeatures
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ProfileVersion
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetRemoteBDAddr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GatewayFeatures
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_IsAudioConnected
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_IsHandsfreeConnected
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_IsACLConnected
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_IsChannelOpen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_WritePhonebookEntry
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_FindPhonebookEntries
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SendAtCommand
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_EnableExtendedErrors
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_QuerySubscriberNumber
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_QueryNetworkOperator
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ReportMicVolume
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetLastVoiceTag
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CallHold
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_IsCodecNegoEnabled
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Deregister
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Unregister
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Register
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveDataLink
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RegisterHandler
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_DeregisterHandler
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateDataLink
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_SendResponse
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_SendCommand
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Register
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Disconnect
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Deregister
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_StreamSendRawPacket
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_ReportSinkDelay
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_RegisterStream
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_OpenStreamRsp
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_OpenStream
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetStreamState
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_DeregisterStream
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_CloseStream
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_RegisterHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdevCallback
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_StreamSendSbcPacket
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_GetRegisteredCP
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_GetConfiguredCP
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_GetConfiguredCodec
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Deregister
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SyncSpeakerVol
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SelectPhonebook
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ReportSpeakerVolume
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ReportIphoneEvent
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_RegisterSec
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Redial
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ReadPhonebookEntries
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_QueryPhonebooks
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_MemoryDial
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ListCurrentCalls
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Hangup
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetRemoteDeviceModeInfo
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetRemoteDeviceFactoryInfo
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetPhonebookSize
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetCurrentPhonebookInfo
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GenerateDtmf
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_EnableVoiceRecognition
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_EnableCallerIdNotify
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_EnableCallWaitNotify
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_EnableAppleExt
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DisconnectServiceLink
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DisconnectAudioLink
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DisableNREC
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DialNumber
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CreateAudioLink
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CSCS
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_AnswerCall
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtSetPlayerSettingValues
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtRegisterNotification
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtListPlayerSettingValues
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtListPlayerSettingAttrs
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtGetPlayerSettingValues
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtGetPlayStatus
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtGetMediaInfo
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_StartStreamRsp
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_ReconfigRsp
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_ConnectRsp
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Register
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_GetRegisteredCodec
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Query
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SendHciCommand
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_SetSimplePairingDebugMode
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CancelCreateLink
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_ForceDisconnectLinkWithReason
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CancelGetRemoteDeviceName
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetInqTxPowerLevel
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_UnregisterGlobalHandler
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_EnumDevicesByQuality
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_EnumDeviceList
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportMeCommandComplete
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevEventHandler
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeChangeAccessibleMode
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDisconnectLink
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAclConComplete
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailPendingRemDevCommands
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfEnumCommands
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCompleteCommand
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRemoveCommand
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_DisconnectLink
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_SetMasterRole
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_AcceptAudioLink
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrRegisterAudioHandler
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrDeregisterAudioHandler
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrHandleModeChange
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrIsLinkUp
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_DeregisterHandler
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtInformBatteryStatus
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtInformCharset
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCtGetPlayerSettingValueTxt
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtGetPlayerSettingAttrTxt
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtGetCapabilities
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_IsConnected
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetRemoteDevice
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_AbortStream
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_SecurityControlRsp
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_SecurityControlReq
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_SuspendStream
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_StartStream
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Reconfig
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetConfig
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetAllCapabilities
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetCapabilities
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_DiscoverStreams
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_AddContentProtection
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Disconnect
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_ConnectRsp
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Connect
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Deregister
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Register
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Connect
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdtpCallback
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_UnlockRecord
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_LockRecord
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpUpdateServiceDatabaseState
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeServerChannel
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAllocService
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoFailPendingCommands
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_IsCommandBusy
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetPlayerSetting
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_SetErroneousDataReporting
</UL>

<P><STRONG><a name="[ab3]"></a>MoveList</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, utils.o(.text), UNUSED)

<P><STRONG><a name="[ab4]"></a>IsListCircular</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, utils.o(.text), UNUSED)

<P><STRONG><a name="[3f4]"></a>XA_StageInput</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, utils.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[3f5]"></a>do_rfc_disconnect</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, btm_rfcom_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = do_rfc_disconnect &rArr; ME_ForceDisconnectLinkWithReason &rArr; MeDisconnectLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurConnectedRemDevAdd
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_ForceDisconnectLinkWithReason
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfDataCallbackFunc
</UL>

<P><STRONG><a name="[ab5]"></a>BtGetMfiDataInfo</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, btm_rfcom_data.o(.text), UNUSED)

<P><STRONG><a name="[3f9]"></a>RfcommData_Open</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, btm_rfcom_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = RfcommData_Open &rArr; SDP_Query &rArr; StartNextQuery &rArr; SdpClientStartConnection &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Query
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoRfcommStartConnection
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcLinkCallBack
</UL>

<P><STRONG><a name="[3fa]"></a>HfDoRfcommStartConnection</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, btm_rfcom_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRemDev
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfcommData_Open
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CreateLink
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_SelectDevice
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_FindDevice
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoRfcommConnectionStart
</UL>

<P><STRONG><a name="[253]"></a>HfDoRfcommConnectionStart</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, btm_rfcom_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoRfcommStartConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoPendingAction
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectMfi
</UL>

<P><STRONG><a name="[15e]"></a>BTStackiApMemAlloc</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, btm_rfcom_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[ab6]"></a>EnableAppleiApFunction</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, btm_rfcom_data.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>FreeAppleiAp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, btm_rfcom_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackMemFree
</UL>

<P><STRONG><a name="[3fc]"></a>BTiApDataSend</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, btm_rfcom_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1a0]"></a>BTiApDataSend_</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btm_rfcom_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BT_do_user_command
</UL>

<P><STRONG><a name="[3fd]"></a>ConnectMfi</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, btm_rfcom_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoRfcommConnectionStart
</UL>

<P><STRONG><a name="[3fe]"></a>clear_buffer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_seek
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_seek
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_decode
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_seek
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_seek
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flac_decoder_seek
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_seek
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_decode
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_seek
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_initialize
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_header_parse
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_preview
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_preview
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3_v2_parse
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_preview
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_next_chunk_get
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_header_parse
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_adts_bitrate_calc
</UL>

<P><STRONG><a name="[200]"></a>buffer_context_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buffer_context_init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_initialize
</UL>

<P><STRONG><a name="[43e]"></a>buffer_overflow</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe2
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe_lpc
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_residuals
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decode_frame
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_frame
</UL>

<P><STRONG><a name="[40a]"></a>get_num_bits_left</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_initialize
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_decode
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_decode
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_decode
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_decode
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_decode
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe2
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe_lpc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe_fixed
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_residuals
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_metadata
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_header_parse
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_preview
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_find_synword
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_find_sync_word
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3_v2_parse
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipBufferFrom
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseWmaHeaderObject
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstPacketInWma
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubFrame
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsJoin
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_header_parse
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_next_chunk_get
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_header_parse
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_adts_bitrate_calc
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_frame
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_moov_atom_parse
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_trak_atom_parse
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_mdia_atom_parse
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_minf_atom_parse
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stbl_atom_parse
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stsd_atom_parse
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stsc_atom_parse
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stco_atom_parse
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_udta_atom_parse
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_meta_atom_parse
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_ilst_atom_parse
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_info_parse
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeRunlevel
</UL>

<P><STRONG><a name="[3ff]"></a>fill_buffer</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_feof
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fread
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_meom
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_mread
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_seek
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_initialize
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_seek
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_decode
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_seek
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_decode
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flac_decoder_initialize
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_initialize
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_decode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_seek
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_decode
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_seek
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_initialize
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe2
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe_lpc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe_fixed
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_residuals
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_metadata
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_header_parse
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_preview
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_preview
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3_v2_parse
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipBufferFrom
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseWmaHeaderObject
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstPacketInWma
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_preview
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_next_chunk_get
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_header_parse
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_adts_bitrate_calc
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_frame
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_moov_atom_parse
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_trak_atom_parse
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_mdia_atom_parse
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_minf_atom_parse
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stbl_atom_parse
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stsd_atom_parse
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_mp4a_atom_parse
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_esds_atom_parse
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stsc_atom_parse
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stco_atom_parse
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_udta_atom_parse
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_meta_atom_parse
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_ilst_atom_parse
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_info_parse
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillBufAndUpdatePoint
</UL>

<P><STRONG><a name="[41d]"></a>skip_bits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_decode
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_decode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_initialize
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_decode
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_decode
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_metadata
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_header_parse
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_adpcm_decode
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_preview
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_frame_header
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_find_synword
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_header_parse
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_find_sync_word
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_fill_buffer
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3_v2_parse
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseWmaHeaderObject
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubFrame
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_header_parse
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_next_chunk_get
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNextElement
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_adts_bitrate_calc
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_frame
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSpectrumShort
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSpectrumLong
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeICS
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_moov_atom_parse
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stbl_atom_parse
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stsd_atom_parse
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_mp4a_atom_parse
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_esds_atom_parse
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_audio_specific_config
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stsc_atom_parse
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stco_atom_parse
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_meta_atom_parse
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_ilst_atom_parse
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_info_parse
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_huffman_decode
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaInfoGet
</UL>

<P><STRONG><a name="[402]"></a>skip_buffer</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = skip_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_feof
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fread
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_meom
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_mread
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_metadata
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_header_parse
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseWmaHeaderObject
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_header_parse
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_header_parse
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_adts_bitrate_calc
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_moov_atom_parse
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_trak_atom_parse
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_mdia_atom_parse
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_minf_atom_parse
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stbl_atom_parse
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stsd_atom_parse
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_mp4a_atom_parse
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_udta_atom_parse
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_meta_atom_parse
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_ilst_atom_parse
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_info_parse
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaInfoGet
</UL>

<P><STRONG><a name="[445]"></a>align_byte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decode_frame
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackADTSHeader
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackADIFHeader
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNextElement
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_frame
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeProgramConfigElement
</UL>

<P><STRONG><a name="[436]"></a>get_uint8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_metadata
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_utf8
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_adpcm_decode
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_frame_header
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3_v2_parse
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextPayload
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_frame
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_esds_atom_parse
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_descr_length_get
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_atom_header_read
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASFReadPacketHeader
</UL>

<P><STRONG><a name="[427]"></a>show_uint8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_decode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_initialize
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_decode
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_find_synword
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_info_parse
</UL>

<P><STRONG><a name="[42f]"></a>get_uint16_le</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_decode
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_decode
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_header_parse
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_adpcm_decode
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseWmaHeaderObject
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextPayload
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASFReadPacketHeader
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaInfoGet
</UL>

<P><STRONG><a name="[ab7]"></a>show_uint16_le</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bit.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>get_uint16_be</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_bit_c_762cac86__SWAP_16
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_decode
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_metadata
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_header_parse
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_frame
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stbl_atom_parse
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stsd_atom_parse
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_mp4a_atom_parse
</UL>

<P><STRONG><a name="[405]"></a>show_uint16_be</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_bit_c_762cac86__SWAP_16
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_frame
</UL>

<P><STRONG><a name="[43b]"></a>get_uint32_le</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_metadata
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_header_parse
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseWmaHeaderObject
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextPayload
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackADIFHeader
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_atom_header_read
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_info_parse
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASFReadPacketHeader
</UL>

<P><STRONG><a name="[424]"></a>show_uint32_le</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_decode
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_initialize
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_frame_header
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_find_synword
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_preview
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_prepare
</UL>

<P><STRONG><a name="[43a]"></a>get_uint32_be</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_metadata
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_header_parse
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_next_chunk_get
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stbl_atom_parse
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stsd_atom_parse
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stsc_atom_parse
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stco_atom_parse
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_atom_header_read
</UL>

<P><STRONG><a name="[65c]"></a>show_uint32_be</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_header_parse
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_find_sync_word
</UL>

<P><STRONG><a name="[434]"></a>get_bits1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe2
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_residuals
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sr_golomb_flac
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_utf8
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_frame_header
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubFrame
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackADTSHeader
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackADIFHeader
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNextElement
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_frame
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSpectrumShort
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSpectrumLong
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeICS
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_audio_specific_config
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_general_audio_specific_config
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeICSInfo
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeProgramConfigElement
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_huffman_decode
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeRunlevel
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeFrameHeaderNoisesub
</UL>

<P><STRONG><a name="[ab8]"></a>show_bits1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bit.o(.text), UNUSED)

<P><STRONG><a name="[435]"></a>get_bits25</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe2
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe_lpc
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_residuals
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_metadata
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_utf8
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_frame_header
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decode_frame
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp2_audio_data_parse
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextPayload
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubFrame
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaHwHuffmanTableLookup
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackADTSHeader
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackADIFHeader
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNextElement
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_frame
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHuff
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSpectrumShort
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSpectrumLong
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeICS
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_audio_specific_config
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_general_audio_specific_config
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeICSInfo
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeProgramConfigElement
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_scale_factor
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_audio_samples_and_reconstruction
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_huffman_decode
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_scale_factors_parse
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_side_info_parse
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeRunlevel
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeFrameHeaderNoisesub
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeFrameHeaderLpc
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeFrameHeaderBark
</UL>

<P><STRONG><a name="[447]"></a>show_bits25</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_find_sync_word
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_adts_bitrate_calc
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_huffman_decode
</UL>

<P><STRONG><a name="[43d]"></a>get_sbits25</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe2
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe_lpc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe_fixed
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_residuals
</UL>

<P><STRONG><a name="[ab9]"></a>show_sbits25</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bit.o(.text), UNUSED)

<P><STRONG><a name="[438]"></a>get_bits32</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_bits32
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe2
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_residuals
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_metadata
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sr_golomb_flac
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3_v2_parse
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_esds_atom_parse
</UL>

<P><STRONG><a name="[682]"></a>show_bits32</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = show_bits32
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSpectrumShort
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSpectrumLong
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeICS
</UL>

<P><STRONG><a name="[aba]"></a>get_sbits32</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, bit.o(.text), UNUSED)

<P><STRONG><a name="[abb]"></a>show_sbits32</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, bit.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>flush_buffer</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[abc]"></a>put_uint8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bit.o(.text), UNUSED)

<P><STRONG><a name="[abd]"></a>put_uint16_le</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bit.o(.text), UNUSED)

<P><STRONG><a name="[abe]"></a>put_bits1</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bit.o(.text), UNUSED)

<P><STRONG><a name="[abf]"></a>put_bits25</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bit.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>wma_decoder_initialize</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, wma_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = wma_decoder_initialize &rArr; FindFirstPacketInWma &rArr; HandleDifferentStream &rArr; SkipBufferFrom &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_ftell
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaQrandomReset
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaHwHuffmanByPass
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaHwHuffManTableRegSet
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaDecodeInit
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseWmaHeaderObject
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstPacketInWma
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>wma_decoder_decode</STRONG> (Thumb, 634 bytes, Stack size 32 bytes, wma_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = wma_decoder_decode &rArr; DecodeSubFrame &rArr; DecodeFrameHeaderBark &rArr; BitsJoin &rArr; HandleDifferentStream &rArr; SkipBufferFrom &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaInfoRegClear
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_feof
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaRunlevelErrorHandling
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWithNextPayload
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipBufferFrom
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleDifferentStream
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextPayload
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubFrame
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsJoin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>wma_decoder_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wma_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>wma_decoder_can_continue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wma_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[ac0]"></a>wma_decoder_preview</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wma_decoder_api.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>wma_decoder_seek</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, wma_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = wma_decoder_seek &rArr; FindFirstPacketInWma &rArr; HandleDifferentStream &rArr; SkipBufferFrom &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstPacketInWma
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[209]"></a>wma_decoder_scale_pcm</STRONG> (Thumb, 138 bytes, Stack size 4 bytes, wma_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wma_decoder_scale_pcm
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_interrupt_handler
</UL>

<P><STRONG><a name="[ac1]"></a>mp3_decoder_id3_parse_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mp3_decoder_api.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>mp3_decoder_initialize</STRONG> (Thumb, 1336 bytes, Stack size 40 bytes, mp3_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = mp3_decoder_initialize &rArr; mp3_id3_v2_parse &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fsof
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_feof
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_ftell
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_header_parse
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_header_check
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_find_sync_word
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_fill_buffer
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3_v2_parse
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3_v1_parse
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_mp3_huffman_bypass
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>mp3_decoder_decode</STRONG> (Thumb, 842 bytes, Stack size 40 bytes, mp3_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = mp3_decoder_decode &rArr; mp2_audio_data_parse &rArr; hw_mp3_decoder_start &rArr; audio_decoder_hardware_start_callback &rArr; MixerProcess &rArr; MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_feof
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_skip_buffer_to
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_header_parse
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_header_check
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_find_sync_word
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_fill_buffer
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_audio_data_parse
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp2_audio_data_parse
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>mp3_decoder_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mp3_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>mp3_decoder_can_continue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mp3_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>mp3_decoder_seek</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, mp3_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = mp3_decoder_seek &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_fill_buffer
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[422]"></a>sbc_decoder_preview</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, sbc_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sbc_decoder_preview &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fsof
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_frame_header
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_find_synword
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_plc_init
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_uint32_le
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_initialize
</UL>

<P><STRONG><a name="[2e]"></a>sbc_decoder_initialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sbc_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sbc_decoder_initialize &rArr; sbc_decoder_preview &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_preview
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>sbc_decoder_decode</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, sbc_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = sbc_decoder_decode &rArr; SbcSbsynStart &rArr; audio_decoder_hardware_start_callback &rArr; MixerProcess &rArr; MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_find_synword
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decode_frame
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbcSbsynStart
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_uint32_le
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_uint8
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>sbc_decoder_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sbc_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>sbc_decoder_can_continue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sbc_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>sbc_decoder_seek</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sbc_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = sbc_decoder_seek &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[ac2]"></a>msbc_decoder_set_plc_valid</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sbc_decoder_api.o(.text), UNUSED)

<P><STRONG><a name="[ac3]"></a>msbc_decoder_get_plc_flag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sbc_decoder_api.o(.text), UNUSED)

<P><STRONG><a name="[42a]"></a>msbc_decoder_plc_process</STRONG> (Thumb, 102 bytes, Stack size 256 bytes, sbc_decoder_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_plc_good_frame
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_plc_bad_frame
</UL>

<P><STRONG><a name="[42d]"></a>wav_decoder_preview</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, wav_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = wav_decoder_preview &rArr; wav_header_parse &rArr; wav_info_parse &rArr; skip_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fsof
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_header_parse
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_initialize
</UL>

<P><STRONG><a name="[33]"></a>wav_decoder_initialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wav_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = wav_decoder_initialize &rArr; wav_decoder_preview &rArr; wav_header_parse &rArr; wav_info_parse &rArr; skip_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_preview
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>wav_decoder_decode</STRONG> (Thumb, 656 bytes, Stack size 32 bytes, wav_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = wav_decoder_decode &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_adpcm_decode
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulaw2pcm
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alaw2pcm
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_le
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>wav_decoder_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wav_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>wav_decoder_can_continue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wav_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>wav_decoder_seek</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, wav_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = wav_decoder_seek &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[433]"></a>get_utf8</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, flac_decoder_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint8
</UL>

<P><STRONG><a name="[437]"></a>get_sr_golomb_flac</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, flac_decoder_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits32
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
</UL>

<P><STRONG><a name="[439]"></a>decode_metadata</STRONG> (Thumb, 1186 bytes, Stack size 944 bytes, flac_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = decode_metadata &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_ftell
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits32
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_be
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_le
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_be
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint8
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flac_decoder_initialize
</UL>

<P><STRONG><a name="[43c]"></a>decode_residuals</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, flac_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = decode_residuals &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits32
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sbits25
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe_lpc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe_fixed
</UL>

<P><STRONG><a name="[43f]"></a>decode_subframe_fixed</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, flac_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = decode_subframe_fixed &rArr; decode_residuals &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_residuals
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sbits25
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe
</UL>

<P><STRONG><a name="[440]"></a>decode_subframe_lpc</STRONG> (Thumb, 594 bytes, Stack size 524 bytes, flac_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = decode_subframe_lpc &rArr; decode_residuals &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_residuals
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sbits25
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_overflow
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe
</UL>

<P><STRONG><a name="[442]"></a>decode_subframe</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, flac_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = decode_subframe &rArr; decode_subframe_lpc &rArr; decode_residuals &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe_lpc
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe_fixed
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sbits25
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_frame
</UL>

<P><STRONG><a name="[443]"></a>decode_subframe2</STRONG> (Thumb, 1558 bytes, Stack size 1504 bytes, flac_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1644<LI>Call Chain = decode_subframe2 &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits32
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sbits25
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_overflow
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_frame
</UL>

<P><STRONG><a name="[444]"></a>decode_frame</STRONG> (Thumb, 620 bytes, Stack size 60 bytes, flac_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = decode_frame &rArr; decode_subframe2 &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe2
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_uint16_be
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_be
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint8
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_byte
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_overflow
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flac_decoder_decode
</UL>

<P><STRONG><a name="[38]"></a>flac_decoder_initialize</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, flac_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = flac_decoder_initialize &rArr; decode_metadata &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_metadata
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>flac_decoder_decode</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, flac_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = flac_decoder_decode &rArr; decode_frame &rArr; decode_subframe2 &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>flac_decoder_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flac_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>flac_decoder_can_continue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, flac_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>flac_decoder_seek</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, flac_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = flac_decoder_seek &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[446]"></a>aac_adts_bitrate_calc</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, aac_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = aac_adts_bitrate_calc &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_bits25
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackADTSHeader
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_initialize
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_prepare
</UL>

<P><STRONG><a name="[3e]"></a>aac_decoder_decode</STRONG> (Thumb, 696 bytes, Stack size 48 bytes, aac_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = aac_decoder_decode &rArr; IMDCT &rArr; DCT4 &rArr; R4FFT &rArr; R4Core
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_bits25
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_byte
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_next_chunk_get
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackADTSHeader
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TNSFilter
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StereoProcess
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PNS
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADTSChannelMapping
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dequantize
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeinterleaveShortBlocks
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNoiselessData
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNextElement
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_initialize
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_prepare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[453]"></a>aac_prepare</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, aac_decoder_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_ftell
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_uint32_le
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_header_parse
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackADTSHeader
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackADIFHeader
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_adts_bitrate_calc
</UL>

<P><STRONG><a name="[3d]"></a>aac_decoder_initialize</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, aac_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = aac_decoder_initialize &rArr; aac_mp4_header_parse &rArr; mp4_moov_atom_parse &rArr; mp4_stbl_atom_parse &rArr; mp4_esds_atom_parse &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fsof
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_ftell
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_uint32_le
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_header_parse
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackADTSHeader
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackADIFHeader
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_adts_bitrate_calc
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>aac_decoder_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aac_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[40]"></a>aac_decoder_can_continue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aac_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>aac_decoder_seek</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, aac_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = aac_decoder_seek &rArr; aac_mp4_next_chunk_get &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_next_chunk_get
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[456]"></a>aif_decoder_preview</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, aif_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = aif_decoder_preview &rArr; aif_header_parse &rArr; skip_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fsof
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_header_parse
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_initialize
</UL>

<P><STRONG><a name="[42]"></a>aif_decoder_initialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aif_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = aif_decoder_initialize &rArr; aif_decoder_preview &rArr; aif_header_parse &rArr; skip_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_preview
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>aif_decoder_decode</STRONG> (Thumb, 1120 bytes, Stack size 40 bytes, aif_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = aif_decoder_decode &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_adpcm_decode
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulaw2pcm
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alaw2pcm
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_be
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_le
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_aif_decoder_api_c_6129681c__SWAP_16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>aif_decoder_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aif_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>aif_decoder_can_continue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aif_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>aif_decoder_seek</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, aif_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = aif_decoder_seek &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[ac4]"></a>amrnb_decoder_get_frame_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, amrnb_decoder_api.o(.text), UNUSED)

<P><STRONG><a name="[ac5]"></a>amrnb_decoder_get_frame_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, amrnb_decoder_api.o(.text), UNUSED)

<P><STRONG><a name="[ac6]"></a>amrnb_decoder_get_frame_bitrate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, amrnb_decoder_api.o(.text), UNUSED)

<P><STRONG><a name="[ac7]"></a>amrnb_decoder_interface_reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, amrnb_decoder_api.o(.text), UNUSED)

<P><STRONG><a name="[45a]"></a>amrnb_decoder_spdec_frame_init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, amrnb_decoder_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_amr_reset
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[45b]"></a>amrnb_decoder_interface_init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, amrnb_decoder_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_amr_reset
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[47]"></a>amrnb_decoder_initialize</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = amrnb_decoder_initialize &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fsof
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_uint8
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_amr_reset
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[45d]"></a>amrnb_decoder_spdec_frame_reset</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, amrnb_decoder_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_amr_reset
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[46a]"></a>amrnb_decoder_spdec_decode_frame</STRONG> (Thumb, 426 bytes, Stack size 224 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2312<LI>Call Chain = amrnb_decoder_spdec_decode_frame &rArr; amrnb_decoder_spdec_decode_amr &rArr; amrnb_decoder_spdec_dtx_dec &rArr; amrnb_decoder_spdec_syn_filt &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_post_filter
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_amr
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_interface_decode
</UL>

<P><STRONG><a name="[46c]"></a>amrnb_decoder_interface_decoder_mms</STRONG> (Thumb, 754 bytes, Stack size 32 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = amrnb_decoder_interface_decoder_mms
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_interface_decode
</UL>

<P><STRONG><a name="[46d]"></a>amrnb_decoder_interface_decode</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360<LI>Call Chain = amrnb_decoder_interface_decode &rArr; amrnb_decoder_spdec_decode_frame &rArr; amrnb_decoder_spdec_decode_amr &rArr; amrnb_decoder_spdec_dtx_dec &rArr; amrnb_decoder_spdec_syn_filt &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_interface_decoder_mms
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_frame
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_amr_reset
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_decode
</UL>

<P><STRONG><a name="[48]"></a>amrnb_decoder_decode</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2384<LI>Call Chain = amrnb_decoder_decode &rArr; amrnb_decoder_interface_decode &rArr; amrnb_decoder_spdec_decode_frame &rArr; amrnb_decoder_spdec_decode_amr &rArr; amrnb_decoder_spdec_dtx_dec &rArr; amrnb_decoder_spdec_syn_filt &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_uint8
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_interface_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>amrnb_decoder_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, amrnb_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>amrnb_decoder_can_continue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, amrnb_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>amrnb_decoder_seek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, amrnb_decoder_api.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> audio_decoder_api.o(.text)
</UL>
<P><STRONG><a name="[ac8]"></a>amrnb_decoder_interface_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amrnb_decoder_api.o(.text), UNUSED)

<P><STRONG><a name="[ac9]"></a>amrnb_decoder_spdec_frame_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, amrnb_decoder_api.o(.text), UNUSED)

<P><STRONG><a name="[409]"></a>WmaQrandomReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_initialize
</UL>

<P><STRONG><a name="[208]"></a>WmaInfoRegClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_interrupt_handler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_decode
</UL>

<P><STRONG><a name="[46e]"></a>WmaDecoderStart</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = WmaDecoderStart &rArr; audio_decoder_hardware_start_callback &rArr; MixerProcess &rArr; MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_hardware_start_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubFrame
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWmaHwDecoder
</UL>

<P><STRONG><a name="[40f]"></a>WmaRunlevelErrorHandling</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_decode
</UL>

<P><STRONG><a name="[6fb]"></a>WmaCosTableSetReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2weight
</UL>

<P><STRONG><a name="[6fc]"></a>WmaCosTableSetIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2weight
</UL>

<P><STRONG><a name="[6fd]"></a>WmaCosTableGetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2weight
</UL>

<P><STRONG><a name="[40c]"></a>WmaHwHuffmanByPass</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_initialize
</UL>

<P><STRONG><a name="[40d]"></a>WmaHwHuffManTableRegSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_initialize
</UL>

<P><STRONG><a name="[702]"></a>WmaHwHuffmanTableSelect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeRunlevel
</UL>

<P><STRONG><a name="[470]"></a>WmaHwHuffmanTableLookup</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WmaHwHuffmanTableLookup
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeRunlevel
</UL>

<P><STRONG><a name="[aca]"></a>WmaIsNoneSignal</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text), UNUSED)

<P><STRONG><a name="[acb]"></a>WmaIsStateInfoDone</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>WmaIsXrDone</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_interrupt_handler
</UL>

<P><STRONG><a name="[acc]"></a>WmaDecoderStartDebug</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text), UNUSED)

<P><STRONG><a name="[acd]"></a>WmaDecoderRunModule</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text), UNUSED)

<P><STRONG><a name="[ace]"></a>WmaDecoderIsModuleWorking</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text), UNUSED)

<P><STRONG><a name="[acf]"></a>WmaCosTableLookup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>hw_mp3_info_reg_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_interrupt_handler
</UL>

<P><STRONG><a name="[471]"></a>hw_mp3_decoder_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = hw_mp3_decoder_start &rArr; audio_decoder_hardware_start_callback &rArr; MixerProcess &rArr; MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_hardware_start_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_audio_data_parse
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp2_audio_data_parse
</UL>

<P><STRONG><a name="[416]"></a>hw_mp3_huffman_bypass</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
</UL>

<P><STRONG><a name="[ad0]"></a>hw_mp3_is_huffman_bypass</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text), UNUSED)

<P><STRONG><a name="[ad1]"></a>hw_mp3_is_decoder_working</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text), UNUSED)

<P><STRONG><a name="[ad2]"></a>hw_mp3_is_inbuf_done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text), UNUSED)

<P><STRONG><a name="[ad3]"></a>hw_mp3_is_state_info_done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>hw_mp3_is_xr_done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_interrupt_handler
</UL>

<P><STRONG><a name="[ad4]"></a>hw_mp3_decoder_start_debug</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text), UNUSED)

<P><STRONG><a name="[ad5]"></a>hw_mp3_decoder_run_module</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>SbcXrDoneClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_interrupt_handler
</UL>

<P><STRONG><a name="[429]"></a>SbcSbsynStart</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SbcSbsynStart &rArr; audio_decoder_hardware_start_callback &rArr; MixerProcess &rArr; MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_hardware_start_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_decode
</UL>

<P><STRONG><a name="[201]"></a>SbcIsSbsynDone</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_audio_decoders_o18b.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_interrupt_handler
</UL>

<P><STRONG><a name="[215]"></a>BtStackBuartIoInit_BCM20702</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, buart_init_bcm20702.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_write_bd_addr
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_write_baud_rate
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_config_pcm_data
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit
</UL>

<P><STRONG><a name="[214]"></a>BtStackBuartIoInit_CSRBC6</STRONG> (Thumb, 224 bytes, Stack size 224 bytes, buart_init_csrbc6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtLDOEn
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bccmd_boot_process
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit
</UL>

<P><STRONG><a name="[478]"></a>RDA_pin_to_high</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, buart_init_rda5876a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtLDOEn
</UL>

<P><STRONG><a name="[479]"></a>RDA_pin_to_low</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, buart_init_rda5876a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtLDOEn
</UL>

<P><STRONG><a name="[47a]"></a>rdabt_write_memory</STRONG> (Thumb, 174 bytes, Stack size 280 bytes, buart_init_rda5876a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableUartFlowControl
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA_uart_write_array
</UL>

<P><STRONG><a name="[47b]"></a>RDA_uart_write_array</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, buart_init_rda5876a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdabt_write_memory
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA5876_DUT_Test
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA5876_Trap
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA5876_Pskey_Misc
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA5876_Dccal
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA5876_Pskey_RfInit
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA5876_RfInit
</UL>

<P><STRONG><a name="[47c]"></a>RDA5876_RfInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, buart_init_rda5876a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA_uart_write_array
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDABT_core_Intialization
</UL>

<P><STRONG><a name="[47d]"></a>RDA5876_Pskey_RfInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buart_init_rda5876a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA_uart_write_array
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDABT_core_Intialization
</UL>

<P><STRONG><a name="[47e]"></a>RDA5876_Dccal</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, buart_init_rda5876a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA_uart_write_array
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDABT_core_Intialization
</UL>

<P><STRONG><a name="[47f]"></a>RDA5876_Pskey_Misc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, buart_init_rda5876a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA_uart_write_array
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDABT_core_Intialization
</UL>

<P><STRONG><a name="[480]"></a>RDA5876_Trap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, buart_init_rda5876a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA_uart_write_array
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDABT_core_Intialization
</UL>

<P><STRONG><a name="[481]"></a>RDA5876_DUT_Test</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buart_init_rda5876a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA_uart_write_array
</UL>

<P><STRONG><a name="[482]"></a>RDABT_core_Intialization</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, buart_init_rda5876a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtLDOEn
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA5876_Trap
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA5876_Pskey_Misc
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA5876_Dccal
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA5876_Pskey_RfInit
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA5876_RfInit
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_RDA5876a
</UL>

<P><STRONG><a name="[483]"></a>ChangeBtBautRate</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, buart_init_rda5876a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_RDA5876a
</UL>

<P><STRONG><a name="[484]"></a>EnableUartFlowControl</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, buart_init_rda5876a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdabt_write_memory
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_RDA5876a
</UL>

<P><STRONG><a name="[212]"></a>BtStackBuartIoInit_RDA5876a</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, buart_init_rda5876a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableUartFlowControl
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeBtBautRate
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDABT_core_Intialization
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit
</UL>

<P><STRONG><a name="[ad6]"></a>MtkSetXoTrimValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, buart_init_mtk662x.o(.text), UNUSED)

<P><STRONG><a name="[485]"></a>hci_mtk_set_xo_trim</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, buart_init_mtk662x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
</UL>

<P><STRONG><a name="[ad7]"></a>SetMTK6626RF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buart_init_mtk662x.o(.text), UNUSED)

<P><STRONG><a name="[ad8]"></a>EnableMtkRfAutoDetect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buart_init_mtk662x.o(.text), UNUSED)

<P><STRONG><a name="[486]"></a>GetMTK662xTypeInfo</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, buart_init_mtk662x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
</UL>

<P><STRONG><a name="[ad9]"></a>SetMtkBaudRate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, buart_init_mtk662x.o(.text), UNUSED)

<P><STRONG><a name="[487]"></a>MTK_extra_patch</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, buart_init_mtk662x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_mtk_patch_on
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT6622_DownloadPatch
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
</UL>

<P><STRONG><a name="[216]"></a>BTDeviceInit_mtk</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, buart_init_mtk662x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_set_sleep
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_set_power_on
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_set_pcm_data
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_set_bt_low
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_hci_write_bd_addr
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_hci_write_baud_rate
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_hci_set_radio
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_local_feature
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTEnableHostSoftwareFlowControl
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTK_extra_patch
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMTK662xTypeInfo
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_mtk_set_xo_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit
</UL>

<P><STRONG><a name="[494]"></a>SendPatchArray</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bk3515h-init-hci-data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBk3515HUart
</UL>

<P><STRONG><a name="[495]"></a>Bk3515HPowerOn</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bk3515h-init-hci-data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtLDOEn
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBk3515HUart
</UL>

<P><STRONG><a name="[218]"></a>InitBk3515HUart</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, bk3515h-init-hci-data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bk3515HPowerOn
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPatchArray
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTEnableHostSoftwareFlowControl
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit
</UL>

<P><STRONG><a name="[ada]"></a>IsPatchDownSuccess</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_rtk_driver.o(.text), UNUSED)

<P><STRONG><a name="[496]"></a>hci_write_bd_addr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bt_rtk_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
</UL>

<P><STRONG><a name="[49f]"></a>make_bd_addr</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bt_rtk_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_RTL8761
</UL>

<P><STRONG><a name="[498]"></a>enable_rts</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bt_rtk_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableRTS
</UL>

<P><STRONG><a name="[49a]"></a>make_tx_power</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bt_rtk_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtk8761TxParams
</UL>

<P><STRONG><a name="[49b]"></a>make_tx_dac</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bt_rtk_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtk8761TxParams
</UL>

<P><STRONG><a name="[497]"></a>EnableRTS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bt_rtk_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rts
</UL>

<P><STRONG><a name="[499]"></a>SetRtk8761TxParams</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, bt_rtk_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tx_dac
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tx_power
</UL>

<P><STRONG><a name="[adb]"></a>SetRtk8761ExternalClk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bt_rtk_driver.o(.text), UNUSED)

<P><STRONG><a name="[49c]"></a>hci_write_baud_rate</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, bt_rtk_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_RTL8761
</UL>

<P><STRONG><a name="[49d]"></a>IsDownloadAllPatchSuccess</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bt_rtk_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtk_DownloadPatch
</UL>

<P><STRONG><a name="[adc]"></a>SetBtHfPPcmInterface</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bt_rtk_driver.o(.text), UNUSED)

<P><STRONG><a name="[49e]"></a>Rtk_DownloadPatch</STRONG> (Thumb, 414 bytes, Stack size 312 bytes, bt_rtk_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDownloadAllPatchSuccess
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_RTL8761
</UL>

<P><STRONG><a name="[217]"></a>BTDeviceInit_RTL8761</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, bt_rtk_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtLDOEn
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtk_DownloadPatch
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_baud_rate
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_bd_addr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit
</UL>

<P><STRONG><a name="[24a]"></a>InitAtCommandTable</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, atp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateHFChannelBuf
</UL>

<P><STRONG><a name="[4a0]"></a>AT_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, atp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Init
</UL>

<P><STRONG><a name="[4a1]"></a>TE_Encode_Common</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, atp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TE_Encode_Common &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode
</UL>

<P><STRONG><a name="[4a2]"></a>AT_TEncode</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, atp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = AT_TEncode &rArr; AT_TEncode_Handsfree &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode_Phonebook
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode_Headset
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode_Handsfree
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TE_Encode_Common
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtSendCommand
</UL>

<P><STRONG><a name="[4a8]"></a>AtAtoI</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, atp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AtAtoI
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode_Phonebook
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode_Headset
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode_Handsfree
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Range2MinMax
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TE_Decode_Common
</UL>

<P><STRONG><a name="[4a6]"></a>AtParseParameters</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, atp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AtParseParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode_Phonebook
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode_Headset
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode_Handsfree
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TE_Decode_Common
</UL>

<P><STRONG><a name="[4a7]"></a>TE_Decode_Common</STRONG> (Thumb, 144 bytes, Stack size 208 bytes, atp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = TE_Decode_Common &rArr; AtParseParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtParseParameters
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtAtoI
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode
</UL>

<P><STRONG><a name="[4aa]"></a>AtRemoveWhiteSpace</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, atp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AtRemoveWhiteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode
</UL>

<P><STRONG><a name="[4a9]"></a>AT_TDecode</STRONG> (Thumb, 444 bytes, Stack size 72 bytes, atp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = AT_TDecode &rArr; AT_TDecode_Handsfree &rArr; AtParseParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode_Phonebook
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode_Headset
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode_Handsfree
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtRemoveWhiteSpace
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TE_Decode_Common
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtParseResultCode
</UL>

<P><STRONG><a name="[69b]"></a>AtItoA</STRONG> (Thumb, 64 bytes, Stack size 28 bytes, atp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AtItoA
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode_Phonebook
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode_Headset
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode_Handsfree
</UL>

<P><STRONG><a name="[4ae]"></a>AT_Range2MinMax</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, atp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT_Range2MinMax &rArr; AtAtoI
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtAtoI
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfPhonebookCallback
</UL>

<P><STRONG><a name="[69d]"></a>AtMakeString</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, atp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode_Phonebook
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode_Handsfree
</UL>

<P><STRONG><a name="[249]"></a>AllocateHfCmdBuff</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radiomod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateHFChannelBuf
</UL>

<P><STRONG><a name="[4b1]"></a>RADIO_Init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, radiomod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RADIO_Init &rArr; IA_Init &rArr; HCI_Reset &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRadioSpecificInit
</UL>

<P><STRONG><a name="[653]"></a>RADIO_Shutdown</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radiomod.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioShutdown
</UL>

<P><STRONG><a name="[4b2]"></a>IA_EventHandler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, radiomod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IA_EventHandler &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_EventHandler
</UL>

<P><STRONG><a name="[4b3]"></a>RADIO_EventHandler</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, radiomod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RADIO_EventHandler &rArr; IA_EventHandler &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IA_EventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrHciCallback
</UL>

<P><STRONG><a name="[287]"></a>A2dpAlloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, a2alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Init
</UL>

<P><STRONG><a name="[28e]"></a>A2dpRegisterSdpService</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, a2dp_sdp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddRecord
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Register
</UL>

<P><STRONG><a name="[293]"></a>A2dpDeregisterSdpService</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, a2dp_sdp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_RemoveRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Deregister
</UL>

<P><STRONG><a name="[29d]"></a>A2dpStartServiceQuery</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, a2dp_sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = A2dpStartServiceQuery &rArr; SDP_Query &rArr; StartNextQuery &rArr; SdpClientStartConnection &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Query
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdevCallback
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpOpenNewStream
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpSdpEventHandler
</UL>

<P><STRONG><a name="[296]"></a>A2dpFreeStreamInfo</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, a2dp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = A2dpFreeStreamInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStreamClose
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpGetConnectedInfo
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdtpCallback
</UL>

<P><STRONG><a name="[2a5]"></a>A2dpStreamClose</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, a2dp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = A2dpStreamClose &rArr; AVDEV_DecrementUseCount &rArr; AVDTP_Disconnect &rArr; AvdtpDisconnect &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpFreeStreamInfo
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_DecrementUseCount
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpCloseTimer
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdtpCallback
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpClose
</UL>

<P><STRONG><a name="[4b6]"></a>A2dpClose</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, a2dp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = A2dpClose &rArr; A2dpStreamClose &rArr; AVDEV_DecrementUseCount &rArr; AVDTP_Disconnect &rArr; AvdtpDisconnect &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStreamClose
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdevCallback
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpSdpEventHandler
</UL>

<P><STRONG><a name="[4b8]"></a>A2dpAvdtpCallback</STRONG> (Thumb, 1508 bytes, Stack size 72 bytes, a2dp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = A2dpAvdtpCallback &rArr; A2dpFindNextStreamInfo &rArr; AVDEV_GetCapabilities &rArr; AvdevSendCommand &rArr; AVDTP_GetAllCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsFunction__
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IndicateLinkActivity
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetTxMtu
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_OpenStreamRsp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_IncrementUseCount
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStreamClose
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpFreeStreamInfo
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStreamSendSbcPacket
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpFindNextStreamInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdevCallback
</UL>

<P><STRONG><a name="[50]"></a>A2dpAvdevCallback</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, a2dp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = A2dpAvdevCallback &rArr; A2dpAvdtpCallback &rArr; A2dpFindNextStreamInfo &rArr; AVDEV_GetCapabilities &rArr; AvdevSendCommand &rArr; AVDTP_GetAllCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_DiscoverStreamEndpoints
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStartServiceQuery
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdtpCallback
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpClose
</UL>
<BR>[Address Reference Count : 3]<UL><LI> a2dp.o(.text)
<LI> a2dp_sm.o(.text)
<LI> a2dp_sdp.o(.text)
</UL>
<P><STRONG><a name="[4ba]"></a>AvctpAlloc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, avctp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Init
</UL>

<P><STRONG><a name="[2b3]"></a>AVCTP_Init</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, avctp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterPsm
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnInitStateMachine
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Init
</UL>

<P><STRONG><a name="[2bc]"></a>AVCTP_Register</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, avctp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvtpMsgInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_RegisterSec
</UL>

<P><STRONG><a name="[2be]"></a>AVCTP_Deregister</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, avctp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpIsConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Deregister
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_RegisterSec
</UL>

<P><STRONG><a name="[4be]"></a>AVCTP_Connect</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, avctp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = AVCTP_Connect &rArr; AvctpConnect &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpIsConnected
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSdpCallback
</UL>

<P><STRONG><a name="[228]"></a>AVCTP_ConnectRsp</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, avctp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = AVCTP_ConnectRsp &rArr; AvctpConnectRsp &rArr; L2CAP_ConnectRsp &rArr; L2Cap_SendConnRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpIsPendingAccept
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpIsConnected
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnectRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRcpCallback
</UL>

<P><STRONG><a name="[2c9]"></a>AVCTP_Disconnect</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, avctp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = AVCTP_Disconnect &rArr; AvctpDisconnect &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpIsConnected
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Disconnect
</UL>

<P><STRONG><a name="[2cd]"></a>AVCTP_SendCommand</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, avctp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpSendNextFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelInput
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_SendCommand
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpPanelIntTimerExpired
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>

<P><STRONG><a name="[2cf]"></a>AVCTP_SendResponse</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, avctp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpSendNextFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_SendResponse
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendUnitInfo
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendSubUnitInfo
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmdControl
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>

<P><STRONG><a name="[4c4]"></a>AVCTP_RemoteDevice</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, avctp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpIsConnected
</UL>

<P><STRONG><a name="[3ee]"></a>AVDTP_Init</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, avdtp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterPsm
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnInitStateMachine
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Init
</UL>

<P><STRONG><a name="[add]"></a>AVDTP_Deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, avdtp.o(.text), UNUSED)

<P><STRONG><a name="[4c7]"></a>AVDTP_Register</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AVDTP_Register &rArr; AvdtpSigInit
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAllocListeningDevice
</UL>

<P><STRONG><a name="[4c9]"></a>AVDTP_Deregister</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AVDTP_Deregister
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpIsConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevFreeDevice
</UL>

<P><STRONG><a name="[4cb]"></a>AVDTP_Connect</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = AVDTP_Connect &rArr; AvdtpConnect &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpIsConnected
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevSendCommand
</UL>

<P><STRONG><a name="[4cd]"></a>AVDTP_ConnectRsp</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = AVDTP_ConnectRsp &rArr; AvdtpConnectRsp &rArr; L2CAP_ConnectRsp &rArr; L2Cap_SendConnRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpIsConnected
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnectRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevSendCommand
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAvdtpCallback
</UL>

<P><STRONG><a name="[4cf]"></a>AVDTP_Disconnect</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = AVDTP_Disconnect &rArr; AvdtpDisconnect &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpIsConnected
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevSendCommand
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_DecrementUseCount
</UL>

<P><STRONG><a name="[28c]"></a>AVDTP_RegisterStream</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, avdtp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpInitConn
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Register
</UL>

<P><STRONG><a name="[28f]"></a>AVDTP_DeregisterStream</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, avdtp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Deregister
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Register
</UL>

<P><STRONG><a name="[4d2]"></a>AVDTP_AddContentProtection</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, avdtp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[4d3]"></a>AVDTP_DiscoverStreams</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = AVDTP_DiscoverStreams &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpIsConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevSendCommand
</UL>

<P><STRONG><a name="[4d5]"></a>AVDTP_GetCapabilities</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = AVDTP_GetCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpIsConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevSendCommand
</UL>

<P><STRONG><a name="[4d6]"></a>AVDTP_GetAllCapabilities</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = AVDTP_GetAllCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpIsConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevSendCommand
</UL>

<P><STRONG><a name="[4d7]"></a>AVDTP_GetConfig</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, avdtp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
</UL>

<P><STRONG><a name="[29f]"></a>AVDTP_OpenStream</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = AVDTP_OpenStream &rArr; AvdtpSigStreamSetConfig &rArr; AvdtpSigStreamSendCmdWithParms &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSetConfig
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpIsConnected
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpFindContentProtection
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpSetStreamConfig
</UL>

<P><STRONG><a name="[29e]"></a>AVDTP_OpenStreamRsp</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = AVDTP_OpenStreamRsp &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpOpenStreamRsp
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdtpCallback
</UL>

<P><STRONG><a name="[2a6]"></a>AVDTP_CloseStream</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, avdtp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpCloseStream
</UL>

<P><STRONG><a name="[2a2]"></a>AVDTP_ReportSinkDelay</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, avdtp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigDelayReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_SetSinkDelay
</UL>

<P><STRONG><a name="[4dc]"></a>AVDTP_Reconfig</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, avdtp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamReconfig
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpFindContentProtection
</UL>

<P><STRONG><a name="[232]"></a>AVDTP_ReconfigRsp</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = AVDTP_ReconfigRsp &rArr; AvdtpSigStreamReconfigRsp &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamReconfigRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
</UL>

<P><STRONG><a name="[4df]"></a>AVDTP_StartStream</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, avdtp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
</UL>

<P><STRONG><a name="[230]"></a>AVDTP_StartStreamRsp</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = AVDTP_StartStreamRsp &rArr; AvdtpSigStreamStartRsp &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamStartRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
</UL>

<P><STRONG><a name="[4e1]"></a>AVDTP_SuspendStream</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, avdtp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
</UL>

<P><STRONG><a name="[4e2]"></a>AVDTP_SecurityControlReq</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, avdtp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSecurityCtrl
</UL>

<P><STRONG><a name="[4e4]"></a>AVDTP_SecurityControlRsp</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, avdtp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSecurityCtrl
</UL>

<P><STRONG><a name="[4e5]"></a>AVDTP_AbortStream</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, avdtp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
</UL>

<P><STRONG><a name="[2ac]"></a>AVDTP_StreamSendRawPacket</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = AVDTP_StreamSendRawPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_StreamSendRawPacket
</UL>

<P><STRONG><a name="[4e6]"></a>AVDTP_GetRemoteDevice</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AVDTP_GetRemoteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_FindConnectedDevice
</UL>

<P><STRONG><a name="[4e7]"></a>AVDTP_IsConnected</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AVDTP_IsConnected
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_FindConnectedDevice
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_DecrementUseCount
</UL>

<P><STRONG><a name="[292]"></a>AVDTP_GetStreamState</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AVDTP_GetStreamState
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_OpenStream
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_GetConfiguredCP
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_GetConfiguredCodec
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_GetStreamState
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_SetSinkDelay
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Deregister
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpSetStreamConfig
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpCloseStream
</UL>

<P><STRONG><a name="[2ae]"></a>AVDTP_CreateMediaHeader</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AVDTP_CreateMediaHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE32
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_StreamSendSbcPacket
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStreamSendSbcPacket
</UL>

<P><STRONG><a name="[22d]"></a>AVDTP_ParseMediaHeader</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, avdtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AVDTP_ParseMediaHeader &rArr; __IsFunction__
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsFunction__
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
</UL>

<P><STRONG><a name="[4eb]"></a>AVRCP_CtGetCapabilities</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, avrcpact.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>

<P><STRONG><a name="[23e]"></a>AVRCP_CtListPlayerSettingAttrs</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, avrcpact.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtListPlayerSettingAttrs_
</UL>

<P><STRONG><a name="[4ec]"></a>AVRCP_CtSetAbsoluteVolume</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, avrcpact.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>

<P><STRONG><a name="[4ed]"></a>AVRCP_CtSetAddressedPlayer</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, avrcpact.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>

<P><STRONG><a name="[4ee]"></a>AVRCP_CtPlayItem</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, avrcpact.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>

<P><STRONG><a name="[4ef]"></a>AVRCP_CtAddToNowPlaying</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, avrcpact.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>

<P><STRONG><a name="[23d]"></a>AVRCP_CtListPlayerSettingValues</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, avrcpact.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtListPlayerSettingValues_
</UL>

<P><STRONG><a name="[23c]"></a>AVRCP_CtGetPlayerSettingValues</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, avrcpact.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtGetPlayerSettingValues_
</UL>

<P><STRONG><a name="[23b]"></a>AVRCP_CtSetPlayerSettingValues</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, avrcpact.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtSetPlayerSettingValues_
</UL>

<P><STRONG><a name="[4f0]"></a>AVRCP_CtGetPlayerSettingAttrTxt</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, avrcpact.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>

<P><STRONG><a name="[4f1]"></a>AvrcpCtGetPlayerSettingValueTxt</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, avrcpact.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>

<P><STRONG><a name="[4f2]"></a>AVRCP_CtInformCharset</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, avrcpact.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>

<P><STRONG><a name="[4f3]"></a>AVRCP_CtInformBatteryStatus</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, avrcpact.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>

<P><STRONG><a name="[221]"></a>AVRCP_CtGetMediaInfo</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = AVRCP_CtGetMediaInfo &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE32
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtGetMediaInfo_
</UL>

<P><STRONG><a name="[233]"></a>AVRCP_CtGetPlayStatus</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = AVRCP_CtGetPlayStatus &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtGetPlayStatus_
</UL>

<P><STRONG><a name="[223]"></a>AVRCP_CtRegisterNotification</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = AVRCP_CtRegisterNotification &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE32
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtRegisterAddressedPlayerChangedNotification_
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtRegisterTrackStartNotification_
</UL>

<P><STRONG><a name="[50c]"></a>AvrcpInitAdvController</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, avrcpact.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpInitPanel
</UL>

<P><STRONG><a name="[504]"></a>AvrcpResetAdvCtConnection</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AvrcpResetAdvCtConnection &rArr; AvrcpFlushCommandQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpFlushCommandQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpResetPanelConnection
</UL>

<P><STRONG><a name="[505]"></a>AvrcpHandleAdvRsp</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = AvrcpHandleAdvRsp &rArr; AvrcpHandleAdvancedResponse &rArr; AvrcpSendNextCommand &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpAdvancedAbort
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpAdvancedContinue
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedResponse
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelRsp
</UL>

<P><STRONG><a name="[506]"></a>AvrcpHandleAdvTimeout</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = AvrcpHandleAdvTimeout &rArr; AvrcpSendNextCommand &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendNextCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelTimeout
</UL>

<P><STRONG><a name="[507]"></a>AvrcpHandleAdvRspOperands</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = AvrcpHandleAdvRspOperands &rArr; AvrcpAdvancedRspFragment &rArr; AvrcpHandleAdvancedResponse &rArr; AvrcpSendNextCommand &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpAdvancedRspFragment
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelOperands
</UL>

<P><STRONG><a name="[511]"></a>AvrcpHandleAdvCmdTxDone</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AvrcpHandleAdvCmdTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelTxDone
</UL>

<P><STRONG><a name="[2b8]"></a>AvrcpHandlePanelInput</STRONG> (Thumb, 526 bytes, Stack size 24 bytes, avrcppnl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + In Cycle
<LI>Call Chain = AvrcpHandlePanelInput &rArr;  AvrcpPanelCnf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Disconnect
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_SendCommand
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpGetNextTransId
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpPanelCnf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvCtpCallback
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_SetPanelKey
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpPanelCnf
</UL>

<P><STRONG><a name="[238]"></a>AVRCP_SetPanelKey</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, avrcppnl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelInput
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlVolUp_
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlVolDown_
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlStop_
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlPreSong_
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlPlay_
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlPause_
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlNextSong_
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlFastForward_
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlFastBackward_
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlEndFastBackForward_
</UL>

<P><STRONG><a name="[2c0]"></a>AvrcpInitPanel</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, avrcppnl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpInitAdvTarget
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpInitAdvController
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_RegisterSec
</UL>

<P><STRONG><a name="[2b6]"></a>AvrcpResetPanelConnection</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, avrcppnl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AvrcpResetPanelConnection &rArr; AvrcpResetAdvTgConnection &rArr; AvrcpFlushResponseQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpResetAdvTgConnection
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpResetAdvCtConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvCtpCallback
</UL>

<P><STRONG><a name="[2bb]"></a>AvrcpHandlePanelTxDone</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, avrcppnl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = AvrcpHandlePanelTxDone &rArr; AvrcpHandleAdvRspTxDone &rArr; AvrcpHandleAdvancedCommand &rArr; AvrcpHandleSetAddressedPlayerCmd &rArr; AvrcpNotifyAddrPlayerChanged &rArr; AvrcpFailNotification &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvRspTxDone
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendUnitInfo
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendSubUnitInfo
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmdControl
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvCmdTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvCtpCallback
</UL>

<P><STRONG><a name="[2ca]"></a>AvrcpHandlePanelTimeout</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, avrcppnl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = AvrcpHandlePanelTimeout &rArr; AvrcpHandleAdvTimeout &rArr; AvrcpSendNextCommand &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpPanelCnf
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpTxTimeout
</UL>

<P><STRONG><a name="[2b9]"></a>AvrcpHandlePanelOperands</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, avrcppnl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = AvrcpHandlePanelOperands &rArr; AvrcpHandleAdvRspOperands &rArr; AvrcpAdvancedRspFragment &rArr; AvrcpHandleAdvancedResponse &rArr; AvrcpSendNextCommand &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvCmdOperands
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvRspOperands
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvCtpCallback
</UL>

<P><STRONG><a name="[2ba]"></a>AvrcpHandlePanelCmd</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, avrcppnl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = AvrcpHandlePanelCmd &rArr; AvrcpHandleAdvCmd &rArr; AvrcpHandleAdvancedCommand &rArr; AvrcpHandleSetAddressedPlayerCmd &rArr; AvrcpNotifyAddrPlayerChanged &rArr; AvrcpFailNotification &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvCmd
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpQueueRxCmd
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendUnitInfo
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendSubUnitInfo
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmdControl
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvCtpCallback
</UL>

<P><STRONG><a name="[2b7]"></a>AvrcpHandlePanelRsp</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, avrcppnl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504<LI>Call Chain = AvrcpHandlePanelRsp &rArr; AvrcpHandleAdvRsp &rArr; AvrcpHandleAdvancedResponse &rArr; AvrcpSendNextCommand &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpPanelCnf
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvRsp
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvCtpCallback
</UL>

<P><STRONG><a name="[2bd]"></a>AvrcpRegisterSdp</STRONG> (Thumb, 970 bytes, Stack size 24 bytes, avrcpsdp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_RemoveRecord
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddRecord
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_RegisterSec
</UL>

<P><STRONG><a name="[2c4]"></a>AvrcpDeregisterSdp</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, avrcpsdp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_RemoveRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Deregister
</UL>

<P><STRONG><a name="[516]"></a>AvrcpSdpCallback</STRONG> (Thumb, 234 bytes, Stack size 128 bytes, avrcpsdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = AvrcpSdpCallback &rArr; AvrcpStartServiceQuery &rArr; SDP_Query &rArr; StartNextQuery &rArr; SdpClientStartConnection &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpStartServiceQuery
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpReportFailedConnect
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpVerifySdpQueryRsp
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avrcpsdp.o(.text)
</UL>
<P><STRONG><a name="[2c6]"></a>AvrcpStartServiceQuery</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, avrcpsdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = AvrcpStartServiceQuery &rArr; SDP_Query &rArr; StartNextQuery &rArr; SdpClientStartConnection &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Query
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Connect
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCmgrCallback
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSdpCallback
</UL>

<P><STRONG><a name="[3ef]"></a>AVDEV_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, avdevice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Init
</UL>

<P><STRONG><a name="[288]"></a>AVDEV_RegisterHandler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, avdevice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Init
</UL>

<P><STRONG><a name="[518]"></a>AVDEV_DeregisterHandler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, avdevice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[28b]"></a>AVDEV_RegisterChannel</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, avdevice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAllocListeningDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Register
</UL>

<P><STRONG><a name="[28d]"></a>AVDEV_DeregisterChannel</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, avdevice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevFreeDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Deregister
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Register
</UL>

<P><STRONG><a name="[29a]"></a>AVDEV_FindConnectedDevice</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, avdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AVDEV_FindConnectedDevice &rArr; AVDTP_IsConnected
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_IsConnected
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetRemoteDevice
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpFindExistingConnection
</UL>

<P><STRONG><a name="[ade]"></a>AVDEV_ListenSignalLink</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, avdevice.o(.text), UNUSED)

<P><STRONG><a name="[51d]"></a>AVDEV_SignalConnectRsp</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, avdevice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveDataLink
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_DeregisterHandler
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevSendCommand
</UL>

<P><STRONG><a name="[29c]"></a>AVDEV_CreateACLLink</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, avdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = AVDEV_CreateACLLink &rArr; CMGR_CreateDataLink &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RegisterHandler
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_DeregisterHandler
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateDataLink
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAllocListeningDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpOpenNewStream
</UL>

<P><STRONG><a name="[4b5]"></a>AVDEV_CreateSignalLink</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, avdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = AVDEV_CreateSignalLink &rArr; AvdevSendCommand &rArr; AVDTP_GetAllCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IsLinkUp
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpSdpEventHandler
</UL>

<P><STRONG><a name="[51e]"></a>AVDEV_DiscSignalLink</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, avdevice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevSendCommand
</UL>

<P><STRONG><a name="[298]"></a>AVDEV_DiscoverStreamEndpoints</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, avdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = AVDEV_DiscoverStreamEndpoints &rArr; AvdevSendCommand &rArr; AVDTP_GetAllCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdevCallback
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpGetConnectedInfo
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpSdpEventHandler
</UL>

<P><STRONG><a name="[297]"></a>AVDEV_GetCapabilities</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, avdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = AVDEV_GetCapabilities &rArr; AvdevSendCommand &rArr; AVDTP_GetAllCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_GetStreamCapabilities
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpGetConnectedInfo
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpFindNextStreamInfo
</UL>

<P><STRONG><a name="[51f]"></a>AVDEV_RegisterSec</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, avdevice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Register
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[520]"></a>AVDEV_UnregisterSec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, avdevice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Unregister
</UL>

<P><STRONG><a name="[2a0]"></a>AVDEV_IncrementUseCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, avdevice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpSetStreamConfig
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdtpCallback
</UL>

<P><STRONG><a name="[4b7]"></a>AVDEV_DecrementUseCount</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, avdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = AVDEV_DecrementUseCount &rArr; AVDTP_Disconnect &rArr; AvdtpDisconnect &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_IsConnected
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStreamClose
</UL>

<P><STRONG><a name="[adf]"></a>BTDisableAutoSniffMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, conmgr.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>SetRdaEscoProperty</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, conmgr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit
</UL>

<P><STRONG><a name="[ae0]"></a>UnSetRdaEscoProperty</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, conmgr.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>BTStackCheckBB</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, conmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeAppCallback
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRcpCallback
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkConnectReq
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkConnectTask
</UL>

<P><STRONG><a name="[52d]"></a>StartBbCheckTimer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StartBbCheckTimer &rArr; EvmStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrBbCheckTimerNotify
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
</UL>

<P><STRONG><a name="[52e]"></a>PendingBbCheckTimer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, conmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrBbCheckTimerNotify
</UL>

<P><STRONG><a name="[5a8]"></a>AckBbCheckTimer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, conmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
</UL>

<P><STRONG><a name="[5e3]"></a>InitBbCheckTimer</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, conmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
</UL>

<P><STRONG><a name="[2d7]"></a>CMGR_IsLinkUp</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CMGR_IsLinkUp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStartServiceQuery
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetRemoteBDAddr
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Deregister
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfServiceConnectionCallback
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfFindChannel
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfHandleNegotiateComplete
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateClosed
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfSdpEventHandler
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrRegisterAudioHandler
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrHandleModeChange
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_CreateSignalLink
</UL>

<P><STRONG><a name="[321]"></a>CMGR_IndicateLinkActivity</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CMGR_IndicateLinkActivity &rArr; ME_StopSniff &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StopSniff
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrStartIdleTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultEventHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRfCallback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdtpCallback
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServL2CapCallback
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientL2CapCallback
</UL>

<P><STRONG><a name="[3ec]"></a>CMGR_Init</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, conmgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetEventMask
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_RegisterGlobalHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetConnectionRole
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Init
</UL>

<P><STRONG><a name="[2c7]"></a>CMGR_RegisterHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CMGR_RegisterHandler &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Connect
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_CreateACLLink
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_RegisterSec
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAvdtpCallback
</UL>

<P><STRONG><a name="[2b5]"></a>CMGR_DeregisterHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CMGR_DeregisterHandler &rArr; ConnMgrIsLinkUp
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrIsLinkUp
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Deregister
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfRegisterSDPandSEC
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpReportFailedConnect
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvCtpCallback
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_CreateACLLink
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_RegisterSec
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_SignalConnectRsp
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAvdtpCallback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevCmgrCallback
</UL>

<P><STRONG><a name="[2c8]"></a>CMGR_CreateDataLink</STRONG> (Thumb, 288 bytes, Stack size 80 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = CMGR_CreateDataLink &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CreateLink
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_SelectDevice
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_AddDevice
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_FindDevice
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrIsLinkUp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CreateServiceLink
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Connect
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultEventHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRfCallback
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_CreateACLLink
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAvdtpCallback
</UL>

<P><STRONG><a name="[534]"></a>CmgrDeregisterAudioHandler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CmgrDeregisterAudioHandler &rArr; ConnMgrIsLinkUp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_UnregisterHandler
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrCountScoHandlers
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrIsLinkUp
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRfCallback
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveDataLink
</UL>

<P><STRONG><a name="[2b4]"></a>CMGR_RemoveDataLink</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CMGR_RemoveDataLink &rArr; ME_ForceDisconnectLinkWithReason &rArr; MeDisconnectLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CancelCreateLink
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_ForceDisconnectLinkWithReason
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrDeregisterAudioHandler
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrIsOneHandler
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrIsLinkUp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCloseChannel
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpReportFailedConnect
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvCtpCallback
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_SignalConnectRsp
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAvdtpCallback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevCmgrCallback
</UL>

<P><STRONG><a name="[ae1]"></a>CMGR_GetNumLinks</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, conmgr.o(.text), UNUSED)

<P><STRONG><a name="[538]"></a>CMGR_SetAudioDefaultParms</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMGR_SetAudioDefaultParms
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetBtFeatures
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetBtVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_GetAudioDefaultParms
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrRegisterAudioHandler
</UL>

<P><STRONG><a name="[53a]"></a>CmgrRegisterAudioHandler</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CmgrRegisterAudioHandler &rArr; ConnMgrBindSco
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IsLinkUp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_RegisterHandler
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_SetAudioDefaultParms
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrCountScoHandlers
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrBindSco
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRfCallback
</UL>

<P><STRONG><a name="[2e1]"></a>CMGR_CreateAudioLink</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, conmgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StopSniff
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StopPark
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrCreateAudioLink
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrIsLinkUp
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CreateAudioLink
</UL>

<P><STRONG><a name="[53c]"></a>CMGR_AcceptAudioLink</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, conmgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_RejectIncomingConnection
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrAcceptAudioLink
</UL>

<P><STRONG><a name="[2de]"></a>CMGR_RemoveAudioLink</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, conmgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_DisconnectLink
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfDisconnectRFCOMM
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DisconnectAudioLink
</UL>

<P><STRONG><a name="[2dd]"></a>CMGR_IsAudioUp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, conmgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_IsAudioConnected
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfDisconnectRFCOMM
</UL>

<P><STRONG><a name="[53e]"></a>CMGR_GetAudioDefaultParms</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, conmgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_SetAudioDefaultParms
</UL>

<P><STRONG><a name="[248]"></a>CMGR_SetAudioVoiceSettings</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, conmgr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeApp_Init
</UL>

<P><STRONG><a name="[ae2]"></a>CMGR_GetAudioVoiceSettings</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, conmgr.o(.text), UNUSED)

<P><STRONG><a name="[ae3]"></a>CMGR_SetAudioCustomParms</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, conmgr.o(.text), UNUSED)

<P><STRONG><a name="[ae4]"></a>CMGR_GetAudioCustomParms</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, conmgr.o(.text), UNUSED)

<P><STRONG><a name="[ae5]"></a>CMGR_GetNumAudioLinks</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, conmgr.o(.text), UNUSED)

<P><STRONG><a name="[53f]"></a>CMGR_SetMasterRole</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, conmgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetConnectionRole
</UL>

<P><STRONG><a name="[540]"></a>CMGR_GetScoTxPacketLen</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, conmgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetHciFlowParms
</UL>

<P><STRONG><a name="[541]"></a>CMGR_ReadLocalBdAddr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, conmgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetStackInitState
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_ReadLocalBdAddr
</UL>

<P><STRONG><a name="[3fb]"></a>GetRemDev</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, conmgr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoRfcommStartConnection
</UL>

<P><STRONG><a name="[544]"></a>AtTimeout</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hf_at.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + Unknown Stack Size
<LI>Call Chain = AtTimeout &rArr; HfSMHandleEvent &rArr; HfStateDisc &rArr; HfCommandComplete &rArr; HfProcessCompletedCommand &rArr; HfExecuteNextCommand &rArr; HfProcessNextCommandState &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStartNextQueuedCmd
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfSMHandleEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hf_at.o(.text)
</UL>
<P><STRONG><a name="[547]"></a>HfAtSendRfPacket</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hf_at.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = HfAtSendRfPacket &rArr; RF_SendData &rArr; RfMUXCheckTxQueues &rArr; RfMUXCheckNextTxQueue &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendData
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_FrameSize
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRfCallback
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtSendCommand
</UL>

<P><STRONG><a name="[2e0]"></a>AtSendCommand</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, hf_at.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200 + Unknown Stack Size
<LI>Call Chain = AtSendCommand &rArr; HfAtSendRfPacket &rArr; RF_SendData &rArr; RfMUXCheckTxQueues &rArr; RfMUXCheckNextTxQueue &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAtSendRfPacket
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CreateAudioLink
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateOpen
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfHandleNegotiateComplete
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateConnPending
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfProcessNextCommandState
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStartNextQueuedCmd
</UL>

<P><STRONG><a name="[548]"></a>AtParseResultCode</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, hf_at.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = AtParseResultCode &rArr; HfStartNextQueuedCmd &rArr; HfExecuteNextCommand &rArr; HfProcessNextCommandState &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStartNextQueuedCmd
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfParseRfcommData
</UL>

<P><STRONG><a name="[549]"></a>HfRemoveCommand</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hf_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HfRemoveCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCompleteCommand
</UL>

<P><STRONG><a name="[54a]"></a>HfCompleteCommand</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hf_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HfCompleteCommand &rArr; HfAppCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAppCallback
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRemoveCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfFlushCommands
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfProcessNextCommandState
</UL>

<P><STRONG><a name="[54b]"></a>HfFlushCommands</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hf_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HfFlushCommands &rArr; HfCompleteCommand &rArr; HfAppCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCompleteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCloseChannel
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfExecuteNextCommand
</UL>

<P><STRONG><a name="[54f]"></a>HfGetCurrentCommand</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hf_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfProcessCompletedCommand
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfExecuteNextCommand
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStartNextQueuedCmd
</UL>

<P><STRONG><a name="[54e]"></a>HfExecuteNextCommand</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, hf_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = HfExecuteNextCommand &rArr; HfProcessNextCommandState &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfGetCurrentCommand
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfFlushCommands
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfProcessNextCommandState
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAddCommand
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfProcessCompletedCommand
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStartNextQueuedCmd
</UL>

<P><STRONG><a name="[2e2]"></a>HfAddCommand</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, hf_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfExecuteNextCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_WritePhonebookEntry
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_FindPhonebookEntries
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SendAtCommand
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_EnableExtendedErrors
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_QuerySubscriberNumber
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_QueryNetworkOperator
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ReportMicVolume
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetLastVoiceTag
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CallHold
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SyncSpeakerVol
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SelectPhonebook
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ReportSpeakerVolume
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ReportIphoneEvent
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Redial
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ReadPhonebookEntries
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_QueryPhonebooks
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_MemoryDial
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_ListCurrentCalls
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Hangup
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetRemoteDeviceModeInfo
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetRemoteDeviceFactoryInfo
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetPhonebookSize
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GetCurrentPhonebookInfo
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_GenerateDtmf
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_EnableVoiceRecognition
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_EnableCallerIdNotify
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_EnableCallWaitNotify
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_EnableAppleExt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DisableNREC
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DialNumber
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CSCS
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_AnswerCall
</UL>

<P><STRONG><a name="[550]"></a>HfEnumCommands</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hf_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>

<P><STRONG><a name="[2d1]"></a>HfRegisterSdpServices</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, hf_sdp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddRecord
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfRegisterSDPandSEC
</UL>

<P><STRONG><a name="[2d3]"></a>HfDeregisterSdpServices</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hf_sdp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_RemoveRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Deregister
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfRegisterSDPandSEC
</UL>

<P><STRONG><a name="[555]"></a>HfVerifySdpQueryRsp</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, hf_sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HfVerifySdpQueryRsp &rArr; HfVerifySdpQueryProtocolRsp &rArr; SDP_ParseAttributes &rArr; MeDevSdpServiceFound &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAppCallback
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryProtocolRsp
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryProfileRsp
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryNetworkRsp
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryFeaturesRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfSdpEventHandler
</UL>

<P><STRONG><a name="[2d5]"></a>HfStartServiceQuery</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hf_sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = HfStartServiceQuery &rArr; SDP_Query &rArr; StartNextQuery &rArr; SdpClientStartConnection &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IsLinkUp
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Query
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CreateServiceLink
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfServiceConnectionCallback
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfHandleNegotiateIndFail
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfSdpEventHandler
</UL>

<P><STRONG><a name="[546]"></a>HfSMHandleEvent</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, hf_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = HfSMHandleEvent &rArr; HfStateDisc &rArr; HfCommandComplete &rArr; HfProcessCompletedCommand &rArr; HfExecuteNextCommand &rArr; HfProcessNextCommandState &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateDisc
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateOpen
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateNegotiate
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateConnIncoming
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateConnPending
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateClosed
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRfCallback
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtTimeout
</UL>

<P><STRONG><a name="[56]"></a>HfRfCallback</STRONG> (Thumb, 476 bytes, Stack size 216 bytes, hf_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576 + Unknown Stack Size
<LI>Call Chain = HfRfCallback &rArr; HfSMHandleEvent &rArr; HfStateDisc &rArr; HfCommandComplete &rArr; HfProcessCompletedCommand &rArr; HfExecuteNextCommand &rArr; HfProcessNextCommandState &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RespondChannel
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_AdvanceCredit
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IndicateLinkActivity
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CloseChannel
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCloseChannel
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateDataLink
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RemoteDevice
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfParseRfcommData
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfGetClosedChannel
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfFindChannel
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfSMHandleEvent
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAtSendRfPacket
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrRegisterAudioHandler
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrDeregisterAudioHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hf.o(.text)
</UL>
<P><STRONG><a name="[3ed]"></a>HF_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hf_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Init
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Init
</UL>

<P><STRONG><a name="[567]"></a>HfParseRfcommData</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, hf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = HfParseRfcommData &rArr; AtParseResultCode &rArr; HfStartNextQueuedCmd &rArr; HfExecuteNextCommand &rArr; HfProcessNextCommandState &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtParseResultCode
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRfCallback
</UL>

<P><STRONG><a name="[2d8]"></a>HfAppCallback</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, hf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HfAppCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfServiceConnectionCallback
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfPhonebookCallback
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfIndicatorCallback
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfEventCallback
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateDisc
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateOpen
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfHandleNegotiateComplete
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateNegotiate
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateConnPending
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateClosed
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryRsp
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryFeaturesRsp
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCompleteCommand
</UL>

<P><STRONG><a name="[562]"></a>HfPhonebookCallback</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, hf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HfPhonebookCallback &rArr; HfAppCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAppCallback
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Range2MinMax
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateOpen
</UL>

<P><STRONG><a name="[55d]"></a>HfIndicatorCallback</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, hf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HfIndicatorCallback &rArr; HfAppCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAppCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateOpen
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateNegotiate
</UL>

<P><STRONG><a name="[561]"></a>HfEventCallback</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, hf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HfEventCallback &rArr; HfAppCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAppCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateOpen
</UL>

<P><STRONG><a name="[2d6]"></a>HfCloseChannel</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, hf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HfCloseChannel &rArr; HfFlushCommands &rArr; HfCompleteCommand &rArr; HfAppCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveDataLink
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfFlushCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRfCallback
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfServiceConnectionCallback
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DisconnectServiceLink
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfSdpEventHandler
</UL>

<P><STRONG><a name="[564]"></a>HfFindChannel</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HfFindChannel &rArr; CMGR_IsLinkUp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IsLinkUp
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRfCallback
</UL>

<P><STRONG><a name="[566]"></a>HfGetClosedChannel</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hf_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRfCallback
</UL>

<P><STRONG><a name="[545]"></a>HfStartNextQueuedCmd</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, hf_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = HfStartNextQueuedCmd &rArr; HfExecuteNextCommand &rArr; HfProcessNextCommandState &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CloseChannel
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtSendCommand
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfExecuteNextCommand
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfGetCurrentCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateOpen
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtParseResultCode
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtTimeout
</UL>

<P><STRONG><a name="[568]"></a>HfAlloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hfalloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Init
</UL>

<P><STRONG><a name="[ae6]"></a>BTSetUserDefinedHidDescriptorList</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hid_sdp.o(.text), UNUSED)

<P><STRONG><a name="[ae7]"></a>BTSetUserDefinedHidSdpDatabase</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hid_sdp.o(.text), UNUSED)

<P><STRONG><a name="[ae8]"></a>GetDefaultHidSdpDatabase</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hid_sdp.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>HidRegisterSdpService</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, hid_sdp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddRecord
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Register
</UL>

<P><STRONG><a name="[569]"></a>HidDeregisterSdpService</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hid_sdp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_RemoveRecord
</UL>

<P><STRONG><a name="[2c1]"></a>AVRCP_TgSetEventMask</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_RegisterSec
</UL>

<P><STRONG><a name="[ae9]"></a>AVRCP_TgSetPlayerSettingsMask</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, avrcpatg.o(.text), UNUSED)

<P><STRONG><a name="[aea]"></a>AVRCP_TgSetMediaAttributesMask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, avrcpatg.o(.text), UNUSED)

<P><STRONG><a name="[56e]"></a>AVRCP_TgSetPlayerSetting</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpTgSetPlayerSettingNotify
</UL>

<P><STRONG><a name="[aeb]"></a>AVRCP_TgSetPlayerStrings</STRONG> (Thumb, 346 bytes, Stack size 60 bytes, avrcpatg.o(.text), UNUSED)

<P><STRONG><a name="[aec]"></a>AVRCP_TgSetMediaInfo</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, avrcpatg.o(.text), UNUSED)

<P><STRONG><a name="[570]"></a>AVRCP_TgSetPlayStatus</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
</UL>

<P><STRONG><a name="[571]"></a>AVRCP_TgSetPlayPosition</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE32
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
</UL>

<P><STRONG><a name="[572]"></a>AVRCP_TgSetBattStatus</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
</UL>

<P><STRONG><a name="[573]"></a>AVRCP_TgSetSystemStatus</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
</UL>

<P><STRONG><a name="[574]"></a>AVRCP_TgSetTrack</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE32
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
</UL>

<P><STRONG><a name="[575]"></a>AVRCP_TgSignalTrackStart</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
</UL>

<P><STRONG><a name="[576]"></a>AVRCP_TgSignalTrackEnd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
</UL>

<P><STRONG><a name="[aed]"></a>AVRCP_TgSetCurrentCharSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, avrcpatg.o(.text), UNUSED)

<P><STRONG><a name="[aee]"></a>AVRCP_TgGetCurrentCharSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, avrcpatg.o(.text), UNUSED)

<P><STRONG><a name="[578]"></a>AvrcpTgFindRegisteredPlayer</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgNowPlayingChanged
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetAddressedPlayer
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgDeregisterPlayer
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgRegisterPlayer
</UL>

<P><STRONG><a name="[577]"></a>AVRCP_TgRegisterPlayer</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpTgFindRegisteredPlayer
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
</UL>

<P><STRONG><a name="[579]"></a>AVRCP_TgDeregisterPlayer</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpTgFindRegisteredPlayer
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
</UL>

<P><STRONG><a name="[57a]"></a>AvrcpFailNotification</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = AvrcpFailNotification &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpUnregisterNotify
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpIsRegdForNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpNotifyAddrPlayerChanged
</UL>

<P><STRONG><a name="[57c]"></a>AVRCP_TgSetAddressedPlayer</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpTgFindRegisteredPlayer
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpNotifyAddrPlayerChanged
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
</UL>

<P><STRONG><a name="[57d]"></a>AVRCP_TgNowPlayingChanged</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpTgFindRegisteredPlayer
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
</UL>

<P><STRONG><a name="[239]"></a>AVRCP_TgSetAbsoluteVolume</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTPlayCtrlSetAbsVol_
</UL>

<P><STRONG><a name="[aef]"></a>AVRCP_TgCreatePlayItemRsp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, avrcpatg.o(.text), UNUSED)

<P><STRONG><a name="[af0]"></a>AVRCP_TgCreateAddToNowPlayingRsp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, avrcpatg.o(.text), UNUSED)

<P><STRONG><a name="[57e]"></a>AVRCP_TgSendAdvResponse</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>

<P><STRONG><a name="[50b]"></a>AvrcpInitAdvTarget</STRONG> (Thumb, 556 bytes, Stack size 20 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpInitPanel
</UL>

<P><STRONG><a name="[50d]"></a>AvrcpResetAdvTgConnection</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AvrcpResetAdvTgConnection &rArr; AvrcpFlushResponseQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpFlushResponseQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpResetPanelConnection
</UL>

<P><STRONG><a name="[514]"></a>AvrcpHandleAdvCmd</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = AvrcpHandleAdvCmd &rArr; AvrcpHandleAdvancedCommand &rArr; AvrcpHandleSetAddressedPlayerCmd &rArr; AvrcpNotifyAddrPlayerChanged &rArr; AvrcpFailNotification &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmd
</UL>

<P><STRONG><a name="[512]"></a>AvrcpHandleAdvCmdOperands</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = AvrcpHandleAdvCmdOperands &rArr; AvrcpHandleAdvancedCommand &rArr; AvrcpHandleSetAddressedPlayerCmd &rArr; AvrcpNotifyAddrPlayerChanged &rArr; AvrcpFailNotification &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelOperands
</UL>

<P><STRONG><a name="[510]"></a>AvrcpHandleAdvRspTxDone</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = AvrcpHandleAdvRspTxDone &rArr; AvrcpHandleAdvancedCommand &rArr; AvrcpHandleSetAddressedPlayerCmd &rArr; AvrcpNotifyAddrPlayerChanged &rArr; AvrcpFailNotification &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelTxDone
</UL>

<P><STRONG><a name="[af1]"></a>AvrcpEnumRegisteredPlayers</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, avrcpatg.o(.text), UNUSED)

<P><STRONG><a name="[597]"></a>HCI_Init</STRONG> (Thumb, 438 bytes, Stack size 8 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HCI_Init &rArr; RXBUFF_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXBUFF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_HciReset
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioInit
</UL>

<P><STRONG><a name="[335]"></a>HciSendCommand</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCompletedPackets
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SetFlushTimeout
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reset
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IA_EventHandler
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciTxReady
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleReadBufferComplete
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleBuffSizeComplete
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Config
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CONFIG
</UL>

<P><STRONG><a name="[4b0]"></a>HCI_Reset</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCI_Reset &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IA_Init
</UL>

<P><STRONG><a name="[599]"></a>HCI_Config</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCI_Config &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRadioSpecificInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRadioCallback
</UL>

<P><STRONG><a name="[59a]"></a>HCI_Deinit</STRONG> (Thumb, 692 bytes, Stack size 56 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = HCI_Deinit &rArr;  ME_Callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_HciReset
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioDeinit
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioShutdown
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRadioCallback
</UL>

<P><STRONG><a name="[59b]"></a>HCI_IsCommandBusy</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCI_IsCommandBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SetFlushTimeout
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciTxReady
</UL>

<P><STRONG><a name="[69f]"></a>HCI_RegisterTransport</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAN_Init
</UL>

<P><STRONG><a name="[650]"></a>HCI_RegisterRadioHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_HciReset
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioInit
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioDeinit
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioShutdown
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRadioSpecificInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRadioCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrTranCallback
</UL>

<P><STRONG><a name="[339]"></a>HCI_RadioInitialized</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = HCI_RadioInitialized &rArr;  ME_Callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueDeferredCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_HciReset
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRadioSpecificInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRadioCallback
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRetryInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrTranCallback
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleSetFctlComplete
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleBuffSizeComplete
</UL>

<P><STRONG><a name="[59d]"></a>HCI_RadioDeinitializing</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384 + Unknown Stack Size
<LI>Call Chain = HCI_RadioDeinitializing &rArr; ME_Callback &rArr; L2CAP_HciReceive &rArr; L2Cap_ProcessSignal &rArr; L2Cap_ProcessReq &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_HciReset
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioDeinit
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioShutdown
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRadioCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrTranCallback
</UL>

<P><STRONG><a name="[af2]"></a>HCI_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hci.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>HCI_RequestToSend</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HCI_RequestToSend
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetTableEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleModeChange
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_IssueHciRequestToSend
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_QueueTxPacket
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sco_Send
</UL>

<P><STRONG><a name="[3c2]"></a>HCI_GetFlowParms</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, hci.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetHciFlowParms
</UL>

<P><STRONG><a name="[af3]"></a>HCI_SetFlowParms</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hci.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>HCI_SetScoPacketSize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetHciScoPacketSize
</UL>

<P><STRONG><a name="[242]"></a>GetScoHciHandle</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, hci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeAppCallback
</UL>

<P><STRONG><a name="[af4]"></a>BTEnableRoleSwitch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci_evnt.o(.text), UNUSED)

<P><STRONG><a name="[af5]"></a>BTDisableQosSetup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci_evnt.o(.text), UNUSED)

<P><STRONG><a name="[af6]"></a>BTSetSupervisionTimeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hci_evnt.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>HciProcessEvent</STRONG> (Thumb, 648 bytes, Stack size 56 bytes, hci_evnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = HciProcessEvent &rArr;  ME_Callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSupervisionTimeout
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLinkQuality
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRssi
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveHciHandle
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciTransportError
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackCheckBB
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckBbCheckTimer
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleCompletedPackets
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleConnectComplete
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleDisconnectComplete
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleCommandComplete
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessReceivedData
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Deinit
</UL>

<P><STRONG><a name="[48a]"></a>BTEnableHostSoftwareFlowControl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci_util.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBk3515HUart
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
</UL>

<P><STRONG><a name="[32b]"></a>HciGetTableEntry</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, hci_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessReceivedData
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessSentPackets
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHciPackets
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RequestToSend
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSetNewBcHandle
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciDeleteConnection
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciAddConnection
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleCompletedPackets
</UL>

<P><STRONG><a name="[5ab]"></a>HciSetNewBcHandle</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hci_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HciSetNewBcHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetTableEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciAddConnection
</UL>

<P><STRONG><a name="[5a5]"></a>HciAddConnection</STRONG> (Thumb, 438 bytes, Stack size 16 bytes, hci_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HciAddConnection &rArr; HciSetNewBcHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetTableEntry
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSetNewBcHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleConnectComplete
</UL>

<P><STRONG><a name="[5a3]"></a>HciDeleteConnection</STRONG> (Thumb, 490 bytes, Stack size 24 bytes, hci_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = HciDeleteConnection &rArr;  ME_Callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackDataStatusCallBackFunc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSnifferTimer
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetTableEntry
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleDisconnectAcl
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkDisconnectOp
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleDisconnectComplete
</UL>

<P><STRONG><a name="[301]"></a>L2CAP_RegisterPsm</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, l2cap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_IsValidProtocol
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Register
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Init
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpInitServer
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpInitClient
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[5ad]"></a>L2Cap_QueueTxPacket</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RequestToSend
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDataReqWhileNotActive
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessReq
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_Send
</UL>

<P><STRONG><a name="[5ae]"></a>L2Cap_Send</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_QueueTxPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConfigRspInternal
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConfigReqInternal
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendDiscRspInternal
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendDiscReqInternal
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConnRspInternal
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConnReqInternal
</UL>

<P><STRONG><a name="[5af]"></a>L2Cap_SendConnReqInternal</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StartRtx
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetSysPkt
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectReq
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_CONN_CNF
</UL>

<P><STRONG><a name="[5b2]"></a>L2CAP_ConnectReq</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AccessRequest
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_IsValidProtocol
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_FreeChannel
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_AllocLinkChannel
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConnReqInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnect
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnect
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientStartConnection
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfOpenClientChannel
</UL>

<P><STRONG><a name="[5b5]"></a>L2Cap_SendConnRspInternal</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = L2Cap_SendConnRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetSysPkt
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRsp
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CLOSED
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_CONN_RSP
</UL>

<P><STRONG><a name="[2ff]"></a>L2CAP_ConnectRsp</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = L2CAP_ConnectRsp &rArr; L2Cap_SendConnRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetValidChannel
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConnRspInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidL2Callback
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnectRsp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvL2Callback
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpL2Callback
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpL2BrowseCallback
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnectRsp
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServL2CapCallback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfL2Callback
</UL>

<P><STRONG><a name="[5b7]"></a>L2Cap_SendDiscReqInternal</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StopTimer
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StartRtx
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetSysPkt
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectReq
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleConfigRsp
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_DISC_CNF
</UL>

<P><STRONG><a name="[5b9]"></a>L2CAP_DisconnectReq</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetValidChannel
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendDiscReqInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpDisconnect
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpDisconnect
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServL2CapCallback
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpQueryTimerFire
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNextQuery
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfL2Callback
</UL>

<P><STRONG><a name="[2fd]"></a>L2CAP_SendData</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetValidChannel
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidSendKeyWithData_
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidSendRawData_
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidMultiKeySendDownUp_
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidSend2
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidSend
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleHidSetProtocol
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_StreamSendRawPacket
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServFinishUpPacket
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServSendError
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSdpClientQuery
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDataInternal
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCommandPacket
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCmdRsp
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvtpSendPacket
</UL>

<P><STRONG><a name="[2a3]"></a>L2CAP_SetFlushTimeout</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, l2cap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommand
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyPsm
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetValidChannel
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_IsCommandBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_SetSinkDelay
</UL>

<P><STRONG><a name="[2af]"></a>L2CAP_GetTxMtu</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = L2CAP_GetTxMtu &rArr; L2Cap_GetValidChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetValidChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_StreamSendSbcPacket
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStreamSendSbcPacket
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdtpCallback
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearch
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleAttribReq
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearchAttribReq
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSdpClientQuery
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfOpenClientChannel
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateMachine
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateConnPending
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandlePNReq
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvtpSendPacket
</UL>

<P><STRONG><a name="[5bb]"></a>L2Cap_SendDiscRspInternal</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = L2Cap_SendDiscRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetSysPkt
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_DISC_RSP
</UL>

<P><STRONG><a name="[5bc]"></a>L2Cap_SendConfigReqInternal</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = L2Cap_SendConfigReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StartRtx
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoConfigReq
</UL>

<P><STRONG><a name="[5bd]"></a>L2Cap_SendConfigRspInternal</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, l2cap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoConfigRsp
</UL>

<P><STRONG><a name="[5c5]"></a>L2CAP_HciReceive</STRONG> (Thumb, 586 bytes, Stack size 56 bytes, l2cap_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = L2CAP_HciReceive &rArr; L2Cap_ProcessSignal &rArr; L2Cap_ProcessReq &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeMapHciToRemoteDevice
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessChannelData
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessSignal
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleRxError
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetValidChannel
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
</UL>

<P><STRONG><a name="[5c6]"></a>L2CAP_HciTxDone</STRONG> (Thumb, 496 bytes, Stack size 32 bytes, l2cap_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = L2CAP_HciTxDone &rArr;  L2Cap_StateMachine (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeMapHciToRemoteDevice
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyPsm
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_LinkDisconnect
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_FlushChannelTransmits
</UL>

<P><STRONG><a name="[5c8]"></a>L2CAP_HciTxReady</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, l2cap_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = L2CAP_HciTxReady &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommand
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeMapHciToRemoteDevice
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyPsm
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_IsCommandBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
</UL>

<P><STRONG><a name="[368]"></a>L2CAP_LinkDisconnect</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, l2cap_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = L2CAP_LinkDisconnect &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDisconnectComplete
</UL>

<P><STRONG><a name="[53]"></a>L2Cap_SecAccessRsp</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, l2cap_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = L2Cap_SecAccessRsp &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
</UL>
<BR>[Address Reference Count : 5]<UL><LI> avrcp.o(.text)
<LI> meif.o(.text)
<LI> avdevice.o(.text)
<LI> l2cap.o(.text)
<LI> l2cap_sm.o(.text)
</UL>
<P><STRONG><a name="[5c9]"></a>L2CAP_Init</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, l2cap_utl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Init
</UL>

<P><STRONG><a name="[5d4]"></a>L2CAP_Deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, l2cap_utl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Deinit
</UL>

<P><STRONG><a name="[5b6]"></a>L2Cap_GetValidChannel</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2Cap_GetValidChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRsp
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SetFlushTimeout
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetTxMtu
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessReq
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciReceive
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleRxError
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectReq
</UL>

<P><STRONG><a name="[5ac]"></a>L2Cap_IsValidProtocol</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, l2cap_utl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterPsm
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectReq
</UL>

<P><STRONG><a name="[22b]"></a>L2Cap_FindChannelByLocalIdent</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2Cap_FindChannelByLocalIdent
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessRsp
</UL>

<P><STRONG><a name="[6de]"></a>L2Cap_CheckForDupilicateRequest</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = L2Cap_CheckForDupilicateRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessReq
</UL>

<P><STRONG><a name="[5bf]"></a>L2Cap_FindFlushable</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2Cap_FindFlushable
</UL>
<BR>[Called By]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleRxError
</UL>

<P><STRONG><a name="[5b3]"></a>L2Cap_AllocLinkChannel</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = L2Cap_AllocLinkChannel &rArr; AllocChannel &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectReq
</UL>

<P><STRONG><a name="[5cb]"></a>L2Cap_AllocPsmChannel</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = L2Cap_AllocPsmChannel &rArr; AllocChannel &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessReq
</UL>

<P><STRONG><a name="[5b4]"></a>L2Cap_FreeChannel</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = L2Cap_FreeChannel &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDisconnectLink
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyUserAndCloseChannel
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectReq
</UL>

<P><STRONG><a name="[5ba]"></a>L2Cap_NotifyPsm</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L2Cap_NotifyPsm
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SetFlushTimeout
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyUserAndCloseChannel
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciTxReady
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciTxDone
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessChannelData
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CLOSED
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_CONN_RSP
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_OPEN
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CONFIG
</UL>

<P><STRONG><a name="[5cc]"></a>L2Cap_FlushChannelTransmits</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = L2Cap_FlushChannelTransmits &rArr; L2CAP_HciTxDone &rArr;  L2Cap_StateMachine (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyUserAndCloseChannel
</UL>

<P><STRONG><a name="[5cd]"></a>L2Cap_NotifyUserAndCloseChannel</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = L2Cap_NotifyUserAndCloseChannel &rArr; L2Cap_FlushChannelTransmits &rArr; L2CAP_HciTxDone &rArr;  L2Cap_StateMachine (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_FlushChannelTransmits
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyPsm
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_FreeChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CLOSED
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_CONN_CNF
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_CONN_RSP
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_DISC_CNF
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_DISC_RSP
</UL>

<P><STRONG><a name="[5b0]"></a>L2Cap_GetSysPkt</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L2Cap_GetSysPkt
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessReq
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendDiscRspInternal
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendDiscReqInternal
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConnRspInternal
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConnReqInternal
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoConfigRsp
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoConfigReq
</UL>

<P><STRONG><a name="[5ce]"></a>L2Cap_GetMtu</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = L2Cap_GetMtu
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleConfigReq
</UL>

<P><STRONG><a name="[5c1]"></a>L2Cap_ValidateCommand</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = L2Cap_ValidateCommand &rArr; ValidateOptions
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessSignal
</UL>

<P><STRONG><a name="[5d0]"></a>L2Cap_IssueHciRequestToSend</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, l2cap_utl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RequestToSend
</UL>

<P><STRONG><a name="[5b1]"></a>L2Cap_StartRtx</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = L2Cap_StartRtx &rArr; EvmStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessRsp
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConfigReqInternal
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendDiscReqInternal
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConnReqInternal
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CONFIG
</UL>

<P><STRONG><a name="[5d1]"></a>L2Cap_StartErtx</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = L2Cap_StartErtx &rArr; EvmStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CLOSED
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_CONN_CNF
</UL>

<P><STRONG><a name="[5b8]"></a>L2Cap_StopTimer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = L2Cap_StopTimer &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessRsp
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendDiscReqInternal
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_CONN_RSP
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CONFIG
</UL>

<P><STRONG><a name="[af7]"></a>BTDisableSimplePairing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, me.o(.text), UNUSED)

<P><STRONG><a name="[3eb]"></a>ME_Init</STRONG> (Thumb, 370 bytes, Stack size 8 bytes, me.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Init
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Init
</UL>

<P><STRONG><a name="[3f1]"></a>ME_Deinit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, me.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Deinit
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Deinit
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Deinit
</UL>

<P><STRONG><a name="[342]"></a>MeOperationEnd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MeOperationEnd &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleDenyOobDataReqRspOp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecMeHandleRefreshEncryptKeyOp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleRemOobDataReqRspOp
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleSetSmpDbgModeOp
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleGetOobDataOp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleIoCapRspOp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleSecurityModeOp
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleEncryptOp
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleAuthorizeOp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoRspOp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleLinkKeyRspOp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleAuthenticateOp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDiscoverRole
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDisconnectComplete
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemExtFeaturesOp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemFeaturesOp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeChangeConnPacketTypeOp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleCancelRemNameOp
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleCancelConnectOp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleWriteLinkPolicyOp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSwitchRoleOp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleExitParkModeOp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleParkModeOp
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSetSniffSubratingParmsOp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleExitSniffModeOp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSniffModeOp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleHoldModeOp
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleRemNameReqOp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkDisconnectOp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkRejectOp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkAcceptOp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkConnectOp
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailPendingRemDevCommands
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoFailPendingCommands
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleVoiceSettingsOp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkSetupOp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkRejectOp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkDisconnectOp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkConnectOp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkAcceptOp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoChangeConnPacketTypeOp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAccessModeOp
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInquiryOp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCancelInqOp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetInqModeOp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetInqTxPwrOp
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetExtInqRespOp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLocalNameChangeOp
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteCoDOp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteDefLinkPolicyOp
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleGenCmdOp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelClass
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetErrDataRepOp
</UL>

<P><STRONG><a name="[33e]"></a>MeReportResults</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleSimplePairingComplete
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleKeypress
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportSecurityModeResult
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportInqCancelComplete
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportEncryptionResult
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportAuthenticateResult
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoReportScoLinkUp
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleDisconnectComplete
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleDisconnectAcl
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDataReqWhileNotActive
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSniffSubrating
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkSupervTimeout
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleRemHostSuppFeatures
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemExtFeatures
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemFeatures
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleQosSetupComplete
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDisconnectComplete
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSetSniffSubratingParmsOp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkDisconnectOp
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportLinkUp
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportConnPacketTypeChange
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRoleChange
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportModeChange
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAccessModeOp
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInquiryResult
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportInquiryComplete
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetInqModeOp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetInqTxPwrOp
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetExtInqRespOp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetErrDataRepOp
</UL>

<P><STRONG><a name="[341]"></a>MeSendHciCommand</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleSetSmpDbgModeOp
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDenyOobDataReqRspTask
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRefreshEncryptKey
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRemOobDataReqRspTask
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartGetOobDataTask
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCapRequestReject
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCapRequestAccept
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWriteAuthenticateEnableTask
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWriteEncryptModeTask
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartEncryptionTask
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUserIoRspTask
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkKeyRspTask
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAuthenticateTask
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDiscoverRole
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemExtFeaturesOp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemFeaturesOp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeChangeConnPacketTypeOp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleCancelRemNameOp
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleCancelConnectOp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleWriteLinkPolicyOp
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSetSniffSubratingParmsOp
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSwitchRoleTask
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartExitParkModeTask
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartParkModeTask
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartExitSniffModeTask
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSniffModeTask
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartHoldModeTask
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRemNameReqTask
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkDisconnectTask
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkRejectTask
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkAcceptTask
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkConnectTask
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkDisconnectTask
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoVoiceSettings
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkRejectTask
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkAcceptTask
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkSetupTask
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkConnectTask
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWriteScanActivity
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWriteIacLap
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWriteScanEnable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoChangeConnPacketTypeOp
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInquiryTask
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCancelInqOp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetInqModeOp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetInqTxPwrOp
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetExtInqRespOp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLocalNameChangeOp
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteCoDOp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteDefLinkPolicyOp
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleGenCmdOp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelClass
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetErrDataRepOp
</UL>

<P><STRONG><a name="[5a]"></a>MeHandleCompleteTask</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MeHandleCompleteTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
</UL>
<BR>[Address Reference Count : 5]<UL><LI> mesec.o(.text)
<LI> mecon.o(.text)
<LI> me.o(.text)
<LI> mesco.o(.text)
<LI> meacc.o(.text)
</UL>
<P><STRONG><a name="[392]"></a>MeFindMatchingToken</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MeFindMatchingToken &rArr; IsMeCommandEqual &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMeCommandEqual
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeProcessToken
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SendHciCommand
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CancelGetRemoteDeviceName
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportMeCommandComplete
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeProcessGenToken
</UL>

<P><STRONG><a name="[5d8]"></a>MeProcessGenToken</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MeProcessGenToken &rArr; MeFindMatchingToken &rArr; IsMeCommandEqual &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFindMatchingToken
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleGenCmdOp
</UL>

<P><STRONG><a name="[38e]"></a>MeWriteClassOfDevice</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MeWriteClassOfDevice &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetClassOfDevice
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetAccessibleModeNC
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServUpdateClassOfDevice
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleWriteCoDOp
</UL>

<P><STRONG><a name="[393]"></a>MeWriteLocalName</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MeWriteLocalName &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetLocalDeviceName
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLocalNameChangeOp
</UL>

<P><STRONG><a name="[38c]"></a>MeReportInqCancelComplete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = MeReportInqCancelComplete &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CancelInquiry
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailInProgressCommands
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCancelInqOp
</UL>

<P><STRONG><a name="[59]"></a>MeHandleConnectionStatusOnly</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MeHandleConnectionStatusOnly
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
</UL>
<BR>[Address Reference Count : 4]<UL><LI> mesec.o(.text)
<LI> mecon.o(.text)
<LI> me.o(.text)
<LI> mesco.o(.text)
</UL>
<P><STRONG><a name="[349]"></a>MeStartOperation</STRONG> (Thumb, 908 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StopSniff
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetInquiryMode
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetExtInquiryRsp
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetAccessibleModeNC
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Inquiry
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CancelInquiry
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_AcceptIncomingLink
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleIoCapReq
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleConfirmReq
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleRemOobDataReq
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandlePassKeyReq
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoReq
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleLinkKeyReq
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecSetSecurityMode
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAddAuthenticateOpToQueue
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteLocalName
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteDefaultLinkPolicy
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteClassOfDevice
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeProcessToken
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SendHciCommand
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetChannelClassification
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SwitchRole
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StopPark
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StartPark
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetSniffSubratingParms
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StartSniff
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Hold
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GetLocalOobData
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_SetLinkEncryption
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_CancelAccessRequest
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AccessRequest
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_SetSimplePairingDebugMode
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_RejectIncomingLink
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CancelCreateLink
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CreateLink
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CancelGetRemoteDeviceName
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetInqTxPowerLevel
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecSetUserIo
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecProcessAllSecurityTokens
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportNMResults
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportMeCommandComplete
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetConnectionPacketType
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDisconnectLink
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemFeatures
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDisconnectComplete
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAclConComplete
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkConnectReq
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRoleChange
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportModeChange
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_SetupLink
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_RejectIncomingConnection
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_DisconnectLink
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_CreateLink
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_AcceptIncomingConnection
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeProcessGenToken
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_SetErroneousDataReporting
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_SetConnectionPacketType
</UL>

<P><STRONG><a name="[3bd]"></a>MeWriteDefaultLinkPolicy</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MeWriteDefaultLinkPolicy &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetDefaultLinkPolicy
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
</UL>

<P><STRONG><a name="[351]"></a>MeReportNMResults</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = MeReportNMResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleGetOobDataOp
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleCancelConnectOp
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeProcessInitStatus
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
</UL>

<P><STRONG><a name="[347]"></a>MeReportMeCommandComplete</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MeReportMeCommandComplete &rArr; MeFindMatchingToken &rArr; IsMeCommandEqual &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFindMatchingToken
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleRemNameReqComplete
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleRemNameReqOp
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailRemDevCommand
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
</UL>

<P><STRONG><a name="[5df]"></a>MeFailCommand</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = MeFailCommand &rArr; MeReportLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleSetSmpDbgModeOp
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportSecurityModeResult
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportInqCancelComplete
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportEncryptionResult
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportAuthenticateResult
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportMeCommandComplete
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleCancelRemNameOp
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleCancelConnectOp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleWriteLinkPolicyOp
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportLinkUp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAccessModeOp
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportInquiryComplete
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetInqModeOp
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetInqTxPwrOp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleChannelClass
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetErrDataRepOp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailPendingCommands
</UL>

<P><STRONG><a name="[5e0]"></a>MeFailPendingCommands</STRONG> (Thumb, 542 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = MeFailPendingCommands &rArr; MeFailCommand &rArr; MeReportLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeEnumerateRemoteDevices
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailInProgressCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
</UL>

<P><STRONG><a name="[5e2]"></a>MeInitRadio</STRONG> (Thumb, 652 bytes, Stack size 32 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = MeInitRadio &rArr; MeReportNMResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_Open
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetAccessibleModeNC
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteLocalName
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteDefaultLinkPolicy
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteClassOfDevice
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CheckRadioFeature
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportNMResults
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBbCheckTimer
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBbCheckTimer
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeProcessInitStatus
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCompleteTaskRadioParms
</UL>

<P><STRONG><a name="[5e4]"></a>MeProcessInitStatus</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = MeProcessInitStatus &rArr; MeInitRadio &rArr; MeReportNMResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportNMResults
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
</UL>

<P><STRONG><a name="[3e3]"></a>MeFindGeneralEvent</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MeFindGeneralEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleReturnLinkKeys
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[5e5]"></a>MeHandleEvents</STRONG> (Thumb, 622 bytes, Stack size 32 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = MeHandleEvents &rArr; MeHandleDisconnectComplete &rArr; L2CAP_LinkDisconnect &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFindGeneralEvent
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleIoCapRsp
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleIoCapReq
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleEncryptChange
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleLinkKeyNotify
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleReturnLinkKeys
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleAuthenticateComplete
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleSimplePairingComplete
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleConfirmReq
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleRemOobDataReq
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleKeypress
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserPassKeyNotify
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandlePassKeyReq
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoReq
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleLinkKeyReq
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleConnectComplete
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSniffSubrating
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkSupervTimeout
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleRemHostSuppFeatures
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemExtFeatures
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleReadRemFeatures
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleQosSetupComplete
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleConnPacketTypeChange
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleRoleChange
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleModeChange
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleRemNameReqComplete
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDisconnectComplete
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleConnectComplete
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkConnectReq
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleConnChanged
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeProcessGenToken
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInquiryComplete
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInquiryResult
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
</UL>

<P><STRONG><a name="[329]"></a>ME_Callback</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360 + Unknown Stack Size
<LI>Call Chain = ME_Callback &rArr; L2CAP_HciReceive &rArr; L2Cap_ProcessSignal &rArr; L2Cap_ProcessReq &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_Close
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportNMResults
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoMapHciToConnect
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoDataCallback
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeProcessInitStatus
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailPendingCommands
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportCommandSent
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciTxReady
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciTxDone
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciReceive
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioInitialized
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciCheckForTxData
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessReceivedData
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessSentPackets
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetMaxPackets
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciDeleteConnection
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioDeinitializing
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Deinit
</UL>

<P><STRONG><a name="[390]"></a>MeProcessToken</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MeProcessToken &rArr; MeFindMatchingToken &rArr; IsMeCommandEqual &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFindMatchingToken
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetRemoteDeviceName
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_SetSettings
</UL>

<P><STRONG><a name="[3b9]"></a>MeIsValidGeneralToken</STRONG> (Thumb, 598 bytes, Stack size 0 bytes, me.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SendHciCommand
</UL>

<P><STRONG><a name="[3ba]"></a>MeCheckRemDevToken</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, me.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeMapHciToRemoteDevice
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SendHciCommand
</UL>

<P><STRONG><a name="[af8]"></a>BTStatckSetPageTimeOutValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, me.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>MePendingCommandHandler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424 + Unknown Stack Size
<LI>Call Chain = MePendingCommandHandler &rArr; ME_RadioShutdownTime &rArr; RMGR_RadioShutdown &rArr; HCI_RadioDeinitializing &rArr; ME_Callback &rArr; L2CAP_HciReceive &rArr; L2Cap_ProcessSignal &rArr; L2Cap_ProcessReq &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_RadioShutdownTime
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_HasPendingTask
</UL>
<BR>[Address Reference Count : 2]<UL><LI> meif.o(.text)
<LI> me.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>MeHandleAccessModeOp</STRONG> (Thumb, 696 bytes, Stack size 16 bytes, meacc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + In Cycle
<LI>Call Chain = MeHandleAccessModeOp &rArr;  MeHandleAccessModeOp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWriteScanActivity
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWriteIacLap
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWriteScanEnable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAccessModeOp
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAccessModeOp
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[38f]"></a>MeIsAccessModeInfoEqual</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, meacc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetAccessibleModeNC
</UL>

<P><STRONG><a name="[35b]"></a>MeChangeAccessibleMode</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, meacc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MeChangeAccessibleMode
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDisconnectComplete
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAclConComplete
</UL>

<P><STRONG><a name="[38d]"></a>MeIsScanValsLegal</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, meacc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetAccessibleModeNC
</UL>

<P><STRONG><a name="[a7]"></a>ScoChangeConnPacketTypeOp</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ScoChangeConnPacketTypeOp &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[361]"></a>ScoReportScoLinkUp</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ScoReportScoLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleDisconnectAcl
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleConnectComplete
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailRemDevCommand
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkSetupOp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkRejectOp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkConnectOp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkAcceptOp
</UL>

<P><STRONG><a name="[35e]"></a>ScoHandleConnectComplete</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ScoHandleConnectComplete &rArr; ScoReportScoLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoReportScoLinkUp
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleConnectComplete
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[5e6]"></a>ScoHandleConnChanged</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ScoHandleConnChanged
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[a1]"></a>ScoHandleLinkConnectOp</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ScoHandleLinkConnectOp &rArr; ScoReportScoLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoReportScoLinkUp
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkConnectTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>ScoHandleLinkSetupOp</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ScoHandleLinkSetupOp &rArr; ScoReportScoLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoReportScoLinkUp
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkSetupTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[5e7]"></a>ScoMapHciToConnect</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, mesco.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoFailCommand
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoDataCallback
</UL>

<P><STRONG><a name="[365]"></a>ScoHandleDisconnectComplete</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ScoHandleDisconnectComplete &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoFailPendingCommands
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDisconnectComplete
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkDisconnectOp
</UL>

<P><STRONG><a name="[a5]"></a>ScoHandleLinkDisconnectOp</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ScoHandleLinkDisconnectOp &rArr; ScoHandleDisconnectComplete &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleDisconnectComplete
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkDisconnectTask
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciDeleteConnection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>ScoHandleLinkAcceptOp</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ScoHandleLinkAcceptOp &rArr; ScoReportScoLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoReportScoLinkUp
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkAcceptTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>ScoHandleLinkRejectOp</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ScoHandleLinkRejectOp &rArr; ScoReportScoLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoReportScoLinkUp
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoLinkRejectTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>ScoHandleVoiceSettingsOp</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ScoHandleVoiceSettingsOp &rArr; StartScoVoiceSettings &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScoVoiceSettings
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[5f5]"></a>ScoGetFreeConnect</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, mesco.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkConnectReq
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_SetupLink
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_CreateLink
</UL>

<P><STRONG><a name="[356]"></a>ScoHandleLinkConnectReq</STRONG> (Thumb, 648 bytes, Stack size 24 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ScoHandleLinkConnectReq &rArr; ME_CheckRadioFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CheckRadioFeature
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoGetFreeConnect
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkConnectReq
</UL>

<P><STRONG><a name="[367]"></a>ScoHandleDisconnectAcl</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ScoHandleDisconnectAcl &rArr; ScoReportScoLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoReportScoLinkUp
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoFailPendingCommands
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciDeleteConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDisconnectComplete
</UL>

<P><STRONG><a name="[5f6]"></a>RfFreeChannel</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = RfFreeChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectMux
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSecCallback
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAdvanceNegPending
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateDiscPending
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnPending
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnected
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfTimeoutHandler
</UL>

<P><STRONG><a name="[5fc]"></a>RfAdvanceIncomingToOpenState</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RfAdvanceIncomingToOpenState &rArr; EvmStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RespondChannel
</UL>

<P><STRONG><a name="[5fd]"></a>RfSendCommandPacket</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFindDlcIdByDlci
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCommandSent
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCmdRsp
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfTimeoutHandler
</UL>

<P><STRONG><a name="[601]"></a>RfSendAck</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = RfSendAck &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCmdRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RespondChannel
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSecCallback
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfControlChannel
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateSecPending
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateDiscPending
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnIncoming
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnected
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateMachine
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateDiscPending
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateConnIncoming
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDmAck
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleRPNReq
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandlePNCnf
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandlePNReq
</UL>

<P><STRONG><a name="[602]"></a>RfSendCommand</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCmdRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectMux
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectDLC
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateConnPending
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendSABM
</UL>

<P><STRONG><a name="[55]"></a>RfSecCallback</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = RfSecCallback &rArr; RfFreeChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeChannel
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendSABM
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hf.o(.text)
<LI> rfc_sm.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>RfDlcStateDisconnected</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = RfDlcStateDisconnected &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AccessRequest
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDmAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfc_util.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>RfDlcStateConnected</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = RfDlcStateConnected &rArr; RfFreeChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectDLC
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfc_util.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>RfDlcStateConnPending</STRONG> (Thumb, 636 bytes, Stack size 16 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = RfDlcStateConnPending &rArr; RfFreeChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendModemStatus
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectDLC
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeChannel
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCommandSent
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDmAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfc_util.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>RfDlcStateConnIncoming</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = RfDlcStateConnIncoming &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectDLC
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfc_util.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>RfDlcStateDiscPending</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = RfDlcStateDiscPending &rArr; RfFreeChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeChannel
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCommandSent
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDmAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfc_util.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>RfDlcStateDiscIncoming</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = RfDlcStateDiscIncoming &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDmAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfc_util.o(.text)
</UL>
<P><STRONG><a name="[607]"></a>RfAdvanceNegPending</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = RfAdvanceNegPending &rArr; RfFreeChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AccessRequest
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeChannel
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendSABM
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateNegPending
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleNSC
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandlePNCnf
</UL>

<P><STRONG><a name="[c7]"></a>RfDlcStateNegPending</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = RfDlcStateNegPending &rArr; RfAdvanceNegPending &rArr; RfFreeChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectDLC
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAdvanceNegPending
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDmAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfc_util.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>RfDlcStateSecPending</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = RfDlcStateSecPending &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectDLC
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDmAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfc_util.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>RfL2Callback</STRONG> (Thumb, 970 bytes, Stack size 32 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = RfL2Callback &rArr; RfMuxStateMachine &rArr; RfControlChannel &rArr; RfCtlHandleNSC &rArr; RfAdvanceNegPending &rArr; RfFreeChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRsp
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsValidFCS
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFindMuxIdByRemDev
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAllocMux
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateMachine
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfc_util.o(.text)
</UL>
<P><STRONG><a name="[616]"></a>RfSendDataInternal</STRONG> (Thumb, 540 bytes, Stack size 32 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFindDlcIdByDlci
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCalcFCS
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCheckForCreditToSend
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendParmNegotiation
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendModemStatus
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMUXCheckNextTxQueue
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendTest
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAggregateFlow
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendLineStatus
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendRemotePortNeg
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendNSC
</UL>

<P><STRONG><a name="[2da]"></a>RF_RegisterServerChannel</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rfcomm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAllocService
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openServerPort
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_RegisterSec
</UL>

<P><STRONG><a name="[2d2]"></a>RF_DeregisterServerChannel</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rfcomm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeServerChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deRegisterService
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_Deregister
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfRegisterSDPandSEC
</UL>

<P><STRONG><a name="[311]"></a>RF_DeregisterService</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rfcomm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeService
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deRegisterService
</UL>

<P><STRONG><a name="[3f7]"></a>RF_OpenClientChannel</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, rfcomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = RF_OpenClientChannel &rArr; RfOpenClientChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfOpenClientChannel
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFindMuxIdByRemDev
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queryRfcommDataCallback
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfSdpEventHandler
</UL>

<P><STRONG><a name="[2d9]"></a>RF_CloseChannel</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, rfcomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsValidChannel
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsChannelAllocated
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectDLC
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRfCallback
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfServiceConnectionCallback
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfDisconnectRFCOMM
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfHandleNegotiateComplete
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateNegotiate
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfHandleNegotiateIndFail
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateConnPending
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfProcessNextCommandState
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStartNextQueuedCmd
</UL>

<P><STRONG><a name="[322]"></a>RF_RespondChannel</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rfcomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = RF_RespondChannel &rArr; RfSendAck &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsValidChannel
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsChannelAllocated
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAdvanceIncomingToOpenState
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultEventHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRfCallback
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateClosed
</UL>

<P><STRONG><a name="[31a]"></a>RF_SendData</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, rfcomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = RF_SendData &rArr; RfMUXCheckTxQueues &rArr; RfMUXCheckNextTxQueue &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMUXCheckTxQueues
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsValidChannel
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsChannelAllocated
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTiApDataSend_
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendToRfComm
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAtSendRfPacket
</UL>

<P><STRONG><a name="[61e]"></a>RF_SetModemStatus</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, rfcomm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsValidChannel
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsChannelAllocated
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendModemStatus
</UL>

<P><STRONG><a name="[318]"></a>RF_FrameSize</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, rfcomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RF_FrameSize
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsValidChannel
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsChannelAllocated
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advanceCredit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendToRfComm
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAtSendRfPacket
</UL>

<P><STRONG><a name="[31c]"></a>RF_AdvanceCredit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rfcomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = RF_AdvanceCredit &rArr; RfCheckForCreditToSend &rArr; RfSendModemStatus &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsValidChannel
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsChannelAllocated
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCheckForCreditToSend
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advanceCredit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRfCallback
</UL>

<P><STRONG><a name="[31e]"></a>RF_CreditFlowEnabled</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rfcomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RF_CreditFlowEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsValidChannel
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsChannelAllocated
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHighWaterMark
</UL>

<P><STRONG><a name="[565]"></a>RF_RemoteDevice</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rfcomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RF_RemoteDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsValidChannel
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsChannelAllocated
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRfCallback
</UL>

<P><STRONG><a name="[621]"></a>SdpQueryTimerFire</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sdpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = SdpQueryTimerFire &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdpclient.o(.text)
</UL>
<P><STRONG><a name="[625]"></a>SdpClientStartQuery</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sdpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + In Cycle
<LI>Call Chain = SdpClientStartQuery &rArr;  SdpClientCallback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientCallback
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNextQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientL2CapCallback
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientCallback
</UL>

<P><STRONG><a name="[626]"></a>SdpClientCallback</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sdpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = SdpClientCallback &rArr; SdpClientStartQuery &rArr;  SdpClientCallback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientStartQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientL2CapCallback
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientProcessResp
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientStartQuery
</UL>

<P><STRONG><a name="[627]"></a>SdpClientProcessResp</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, sdpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = SdpClientProcessResp &rArr; SdpClientCallback &rArr; SdpClientStartQuery &rArr;  SdpClientCallback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientL2CapCallback
</UL>

<P><STRONG><a name="[629]"></a>SdpClientL2CapCallback</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, sdpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = SdpClientL2CapCallback &rArr; SdpClientProcessResp &rArr; SdpClientCallback &rArr; SdpClientStartQuery &rArr;  SdpClientCallback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IndicateLinkActivity
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpFindRemDevWithSdpChannel
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientProcessResp
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientCallback
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientStartQuery
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpStopQueryTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdpclient.o(.text)
</UL>
<P><STRONG><a name="[62b]"></a>SdpInitClient</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sdpclient.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterPsm
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Init
</UL>

<P><STRONG><a name="[6f9]"></a>SdpDeinitClient</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdpclient.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Deinit
</UL>

<P><STRONG><a name="[3f8]"></a>SDP_Query</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, sdpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = SDP_Query &rArr; StartNextQuery &rArr; SdpClientStartConnection &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpValidateQueryParms
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNextQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStartServiceQuery
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpStartServiceQuery
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStartServiceQuery
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfcommData_Open
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queryRfcommDataCallback
</UL>

<P><STRONG><a name="[3f6]"></a>SDP_ParseAttributes</STRONG> (Thumb, 1698 bytes, Stack size 96 bytes, sdpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SDP_ParseAttributes &rArr; MeDevSdpServiceFound &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevSdpServiceFound
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpUuidCmp
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElementHeader
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queryRfcommDataCallback
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryProtocolRsp
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryProfileRsp
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryNetworkRsp
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryFeaturesRsp
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpVerifySdpQueryRsp
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpVerifySdpQueryRsp
</UL>

<P><STRONG><a name="[62f]"></a>SDP_KeepClientAlive</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sdpclient.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNextQuery
</UL>

<P><STRONG><a name="[630]"></a>SdpServSendError</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = SdpServSendError &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServL2CapCallback
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServParseQuery
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearch
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleAttribReq
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearchAttribReq
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpVerifyParmLength
</UL>

<P><STRONG><a name="[631]"></a>SdpServFinishUpPacket</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = SdpServFinishUpPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearch
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleAttribReq
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearchAttribReq
</UL>

<P><STRONG><a name="[632]"></a>SdpMarkAttribute</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SdpMarkAttribute &rArr; SdpParseElement
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServMarkAttribs
</UL>

<P><STRONG><a name="[633]"></a>SdpServMarkAttribs</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SdpServMarkAttribs &rArr; SdpMarkAttribute &rArr; SdpParseElement
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpMarkAttribute
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleAttribReq
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearchAttribReq
</UL>

<P><STRONG><a name="[63c]"></a>SdpServFindMarkedRecord</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sdpserv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearchAttribReq
</UL>

<P><STRONG><a name="[635]"></a>SdpServFindMarkedAttribute</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SdpServFindMarkedAttribute
</UL>
<BR>[Called By]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpHandleMarkedRecord
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpStoreAttribData
</UL>

<P><STRONG><a name="[634]"></a>SdpStoreAttribData</STRONG> (Thumb, 872 bytes, Stack size 24 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SdpStoreAttribData &rArr; SdpParseElement
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE32
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServFindMarkedAttribute
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleAttribReq
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearchAttribReq
</UL>

<P><STRONG><a name="[63b]"></a>SdpServGetNextContState</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, sdpserv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearch
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleAttribReq
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearchAttribReq
</UL>

<P><STRONG><a name="[636]"></a>SdpFindUuidInAttrib</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = SdpFindUuidInAttrib &rArr;  SdpFindUuidInAttrib (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpFindUuidInAttrib
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpUuidCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpFindUuidInRecord
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpFindUuidInAttrib
</UL>

<P><STRONG><a name="[637]"></a>SdpFindUuidInRecord</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SdpFindUuidInRecord &rArr; SdpFindUuidInAttrib &rArr;  SdpFindUuidInAttrib (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpFindUuidInAttrib
</UL>
<BR>[Called By]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServMarkMatches
</UL>

<P><STRONG><a name="[638]"></a>SdpServMarkMatches</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SdpServMarkMatches &rArr; SdpFindUuidInRecord &rArr; SdpFindUuidInAttrib &rArr;  SdpFindUuidInAttrib (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpFindUuidInRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearch
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearchAttribReq
</UL>

<P><STRONG><a name="[639]"></a>SdpVerifyParmLength</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = SdpVerifyParmLength &rArr; SdpServSendError &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServSendError
</UL>
<BR>[Called By]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearch
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleAttribReq
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearchAttribReq
</UL>

<P><STRONG><a name="[63a]"></a>SdpServHandleServiceSearchAttribReq</STRONG> (Thumb, 770 bytes, Stack size 80 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = SdpServHandleServiceSearchAttribReq &rArr; SdpVerifyParmLength &rArr; SdpServSendError &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetTxMtu
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpVerifyParmLength
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServMarkMatches
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServGetNextContState
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpStoreAttribData
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServFindMarkedRecord
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServMarkAttribs
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServFinishUpPacket
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServSendError
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpValidateQueryParms
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServParseQuery
</UL>

<P><STRONG><a name="[63e]"></a>SdpServFindSdpRecord</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sdpserv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleAttribReq
</UL>

<P><STRONG><a name="[63d]"></a>SdpServHandleAttribReq</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = SdpServHandleAttribReq &rArr; SdpVerifyParmLength &rArr; SdpServSendError &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetTxMtu
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost32
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServFindSdpRecord
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpVerifyParmLength
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServGetNextContState
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpStoreAttribData
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServMarkAttribs
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServFinishUpPacket
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServSendError
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpValidateQueryParms
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServParseQuery
</UL>

<P><STRONG><a name="[63f]"></a>SdpServHandleServiceSearch</STRONG> (Thumb, 590 bytes, Stack size 72 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = SdpServHandleServiceSearch &rArr; SdpVerifyParmLength &rArr; SdpServSendError &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetTxMtu
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE32
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpVerifyParmLength
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServMarkMatches
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServGetNextContState
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServFinishUpPacket
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServSendError
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpValidateQueryParms
</UL>
<BR>[Called By]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServParseQuery
</UL>

<P><STRONG><a name="[640]"></a>SdpServParseQuery</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = SdpServParseQuery &rArr; SdpServHandleServiceSearchAttribReq &rArr; SdpVerifyParmLength &rArr; SdpServSendError &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearch
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleAttribReq
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearchAttribReq
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServSendError
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServL2CapCallback
</UL>

<P><STRONG><a name="[641]"></a>SdpServGetInfo</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SdpServGetInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeEnumerateRemoteDevices
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServL2CapCallback
</UL>

<P><STRONG><a name="[642]"></a>SdpServL2CapCallback</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, sdpserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = SdpServL2CapCallback &rArr; SdpServParseQuery &rArr; SdpServHandleServiceSearchAttribReq &rArr; SdpVerifyParmLength &rArr; SdpServSendError &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IndicateLinkActivity
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRsp
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServGetInfo
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServParseQuery
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServSendError
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpFindRemDevWithSdpChannel
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdpserv.o(.text)
</UL>
<P><STRONG><a name="[643]"></a>SdpInitServer</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, sdpserv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetSystemTime
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterPsm
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE32
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Init
</UL>

<P><STRONG><a name="[6f8]"></a>SdpDeinitServer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdpserv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Deinit
</UL>

<P><STRONG><a name="[644]"></a>SdpUpdateServiceDatabaseState</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sdpserv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetSystemTime
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE32
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_RemoveRecord
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddRecord
</UL>

<P><STRONG><a name="[645]"></a>SdpServUpdateClassOfDevice</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sdpserv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteClassOfDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_RemoveRecord
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddRecord
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_UnlockRecord
</UL>

<P><STRONG><a name="[646]"></a>SdpServVerifyRecord</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, sdpserv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpVerifyDataElement
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddRecord
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_UnlockRecord
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_LockRecord
</UL>

<P><STRONG><a name="[314]"></a>SDP_AddRecord</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, sdpserv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetSystemTime
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServVerifyRecord
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServUpdateClassOfDevice
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpUpdateServiceDatabaseState
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSdpService
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidRegisterSdpService
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRegisterSdpServices
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpRegisterSdp
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpRegisterSdpService
</UL>

<P><STRONG><a name="[388]"></a>SDP_CreateEIRServiceClassList</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, sdpserv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost32
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE32
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_AutoCreateExtInquiryRsp
</UL>

<P><STRONG><a name="[648]"></a>SdpHandleMarkedRecord</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sdpserv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeEnumerateRemoteDevices
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServFindMarkedAttribute
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_RemoveRecord
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_UnlockRecord
</UL>

<P><STRONG><a name="[30f]"></a>SDP_RemoveRecord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sdpserv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpHandleMarkedRecord
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServUpdateClassOfDevice
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpUpdateServiceDatabaseState
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeSdpService
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDeregisterSdpServices
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpRegisterSdp
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpDeregisterSdp
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpDeregisterSdpService
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDeregisterSdpService
</UL>

<P><STRONG><a name="[649]"></a>SDP_LockRecord</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sdpserv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServVerifyRecord
</UL>

<P><STRONG><a name="[64a]"></a>SDP_UnlockRecord</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, sdpserv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetSystemTime
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpHandleMarkedRecord
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServVerifyRecord
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServUpdateClassOfDevice
</UL>

<P><STRONG><a name="[382]"></a>SdpParseElement</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, sdputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SdpParseElement
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost32
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_CreateEIRServiceClassList
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevSdpServiceFound
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyServiceSearchPattern
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyAttributeIdList
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpVerifyDataElement
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearch
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleAttribReq
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearchAttribReq
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServMarkMatches
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpFindUuidInRecord
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpFindUuidInAttrib
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpStoreAttribData
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServMarkAttribs
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpMarkAttribute
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpValidateQueryParms
</UL>

<P><STRONG><a name="[62c]"></a>SdpValidateQueryParms</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, sdputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SdpValidateQueryParms &rArr; VerifyAttributeIdList &rArr; SdpParseElement
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyServiceSearchPattern
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyAttributeIdList
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Query
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearch
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleAttribReq
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServHandleServiceSearchAttribReq
</UL>

<P><STRONG><a name="[647]"></a>SdpVerifyDataElement</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, sdputil.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpVerifyDataElement
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpVerifyDataElement
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServVerifyRecord
</UL>

<P><STRONG><a name="[62a]"></a>SdpFindRemDevWithSdpChannel</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sdputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SdpFindRemDevWithSdpChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeEnumerateRemoteDevices
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpServL2CapCallback
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientL2CapCallback
</UL>

<P><STRONG><a name="[62d]"></a>SdpParseElementHeader</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sdputil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
</UL>

<P><STRONG><a name="[64d]"></a>SdpPromoteUUIDto32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sdputil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpUuidCmp
</UL>

<P><STRONG><a name="[62e]"></a>SdpUuidCmp</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, sdputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SdpUuidCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpPromoteUUIDto32
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpFindUuidInAttrib
</UL>

<P><STRONG><a name="[33a]"></a>RMGR_HciReset</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, radiomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = RMGR_HciReset &rArr; HCI_RadioDeinitializing &rArr; ME_Callback &rArr; L2CAP_HciReceive &rArr; L2Cap_ProcessSignal &rArr; L2Cap_ProcessReq &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioInitialized
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAN_Shutdown
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAN_Init
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRadioSpecificInit
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioDeinitializing
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RegisterRadioHandler
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Deinit
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRetryInit
</UL>

<P><STRONG><a name="[3ea]"></a>RMGR_RadioInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, radiomgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAN_Init
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRadioSpecificInit
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RegisterRadioHandler
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Init
</UL>

<P><STRONG><a name="[3c0]"></a>RMGR_RadioShutdown</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, radiomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = RMGR_RadioShutdown &rArr; HCI_RadioDeinitializing &rArr; ME_Callback &rArr; L2CAP_HciReceive &rArr; L2Cap_ProcessSignal &rArr; L2Cap_ProcessReq &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_Close
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Shutdown
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAN_Shutdown
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioDeinitializing
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RegisterRadioHandler
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_RadioShutdownTime
</UL>

<P><STRONG><a name="[3f0]"></a>RMGR_RadioDeinit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, radiomgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioDeinitializing
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RegisterRadioHandler
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Deinit
</UL>

<P><STRONG><a name="[412]"></a>HandleDifferentStream</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, decodesubframe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = HandleDifferentStream &rArr; SkipBufferFrom &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipBufferFrom
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextPayload
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_decode
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstPacketInWma
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsJoin
</UL>

<P><STRONG><a name="[413]"></a>BitsJoin</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, decodesubframe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = BitsJoin &rArr; HandleDifferentStream &rArr; SkipBufferFrom &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipBufferFrom
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleDifferentStream
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextPayload
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillBufAndUpdatePoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_decode
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubFrame
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeRunlevel
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeFrameHeaderNoisesub
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeFrameHeaderLpc
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeFrameHeaderBark
</UL>

<P><STRONG><a name="[655]"></a>StartWmaHwDecoder</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, decodesubframe.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaDecoderStart
</UL>

<P><STRONG><a name="[40e]"></a>DecodeSubFrame</STRONG> (Thumb, 1224 bytes, Stack size 40 bytes, decodesubframe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = DecodeSubFrame &rArr; DecodeFrameHeaderBark &rArr; BitsJoin &rArr; HandleDifferentStream &rArr; SkipBufferFrom &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextPayload
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsJoin
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaDecoderStart
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillBufAndUpdatePoint
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeRunlevel
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeFrameHeaderNoisesub
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeFrameHeaderLpc
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeFrameHeaderBark
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_decode
</UL>

<P><STRONG><a name="[414]"></a>StartWithNextPayload</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, startwithnewpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = StartWithNextPayload &rArr; SkipBufferFrom &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipBufferFrom
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_decode
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstPacketInWma
</UL>

<P><STRONG><a name="[407]"></a>ParseWmaHeaderObject</STRONG> (Thumb, 1438 bytes, Stack size 80 bytes, wma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = ParseWmaHeaderObject &rArr; WmaInfoGet &rArr; skip_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_le
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_le
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaInfoGet
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_initialize
</UL>

<P><STRONG><a name="[411]"></a>FindNextPayload</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, wma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FindNextPayload &rArr; ASFReadPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_le
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_le
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint8
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASFReadPacketHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_decode
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipBufferFrom
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleDifferentStream
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFirstPacketInWma
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubFrame
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsJoin
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeRunlevel
</UL>

<P><STRONG><a name="[654]"></a>FillBufAndUpdatePoint</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = FillBufAndUpdatePoint &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubFrame
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsJoin
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeRunlevel
</UL>

<P><STRONG><a name="[410]"></a>SkipBufferFrom</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, wma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = SkipBufferFrom &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_feof
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_ftell
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fread
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextPayload
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_decode
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWithNextPayload
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleDifferentStream
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsJoin
</UL>

<P><STRONG><a name="[40b]"></a>FindFirstPacketInWma</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, wma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = FindFirstPacketInWma &rArr; HandleDifferentStream &rArr; SkipBufferFrom &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartWithNextPayload
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleDifferentStream
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextPayload
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_seek
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_initialize
</UL>

<P><STRONG><a name="[408]"></a>WmaDecodeInit</STRONG> (Thumb, 2132 bytes, Stack size 36 bytes, wma_decoder_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WmaDecodeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_initialize
</UL>

<P><STRONG><a name="[af9]"></a>mpx_show_bits16_at</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mp3_decode.o(.text), UNUSED)

<P><STRONG><a name="[41f]"></a>mpx_skip_buffer_to</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mp3_decode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_decode
</UL>

<P><STRONG><a name="[41a]"></a>mpx_header_check</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, mp3_decode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_decode
</UL>

<P><STRONG><a name="[41b]"></a>mpx_find_sync_word</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mp3_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mpx_find_sync_word
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_bits25
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_uint32_be
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_decode
</UL>

<P><STRONG><a name="[419]"></a>mpx_fill_buffer</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, mp3_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = mpx_fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_feof
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fread
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_meom
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_mread
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_seek
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_decode
</UL>

<P><STRONG><a name="[41c]"></a>mpx_header_parse</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, mp3_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mpx_header_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_uint32_be
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_decode
</UL>

<P><STRONG><a name="[421]"></a>mp2_audio_data_parse</STRONG> (Thumb, 1704 bytes, Stack size 120 bytes, mp3_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = mp2_audio_data_parse &rArr; hw_mp3_decoder_start &rArr; audio_decoder_hardware_start_callback &rArr; MixerProcess &rArr; MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_mp3_decoder_start
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_decode
</UL>

<P><STRONG><a name="[65d]"></a>mp3_side_info_parse</STRONG> (Thumb, 504 bytes, Stack size 48 bytes, mp3_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mp3_side_info_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_audio_data_parse
</UL>

<P><STRONG><a name="[65e]"></a>mp3_scale_factors_parse</STRONG> (Thumb, 1042 bytes, Stack size 64 bytes, mp3_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mp3_scale_factors_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_6
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_5
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_audio_data_parse
</UL>

<P><STRONG><a name="[420]"></a>mp3_audio_data_parse</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, mp3_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = mp3_audio_data_parse &rArr; hw_mp3_decoder_start &rArr; audio_decoder_hardware_start_callback &rArr; MixerProcess &rArr; MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_mp3_decoder_start
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_huffman_decode
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_scale_factors_parse
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_side_info_parse
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_decode
</UL>

<P><STRONG><a name="[418]"></a>mp3_id3_v1_parse</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, mp3_id3_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = mp3_id3_v1_parse &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fread
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
</UL>

<P><STRONG><a name="[417]"></a>mp3_id3_v2_parse</STRONG> (Thumb, 1122 bytes, Stack size 72 bytes, mp3_id3_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = mp3_id3_v2_parse &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fsof
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits32
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint8
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
</UL>

<P><STRONG><a name="[afa]"></a>sbc_joint_stereo</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sbc_decode.o(.text), UNUSED)

<P><STRONG><a name="[662]"></a>sbc_audio_samples_and_reconstruction</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, sbc_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sbc_audio_samples_and_reconstruction
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decode_frame
</UL>

<P><STRONG><a name="[664]"></a>sbc_bit_allocation</STRONG> (Thumb, 1316 bytes, Stack size 40 bytes, sbc_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sbc_bit_allocation
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decode_frame
</UL>

<P><STRONG><a name="[663]"></a>sbc_scale_factor</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sbc_decode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
</UL>

<P><STRONG><a name="[426]"></a>sbc_frame_header</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, sbc_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sbc_frame_header
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_uint32_le
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint8
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decode_frame
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_preview
</UL>

<P><STRONG><a name="[428]"></a>sbc_decode_frame</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, sbc_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sbc_decode_frame &rArr; sbc_audio_samples_and_reconstruction
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_frame_header
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_byte
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_overflow
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_bit_allocation
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_audio_samples_and_reconstruction
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_decode
</UL>

<P><STRONG><a name="[423]"></a>sbc_find_synword</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, sbc_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sbc_find_synword
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_uint32_le
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_uint8
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_decode
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_preview
</UL>

<P><STRONG><a name="[665]"></a>msbc_plc_cross_correlation</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, msbc_plc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sqrt_fixed
</UL>

<P><STRONG><a name="[667]"></a>msbc_plc_pattern_match</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, msbc_plc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sqrt_fixed
</UL>

<P><STRONG><a name="[afb]"></a>msbc_plc_amplitude_match</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, msbc_plc.o(.text), UNUSED)

<P><STRONG><a name="[425]"></a>msbc_plc_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, msbc_plc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = msbc_plc_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_preview
</UL>

<P><STRONG><a name="[42b]"></a>msbc_plc_bad_frame</STRONG> (Thumb, 730 bytes, Stack size 48 bytes, msbc_plc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sqrt_fixed
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_decoder_plc_process
</UL>

<P><STRONG><a name="[42c]"></a>msbc_plc_good_frame</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, msbc_plc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_decoder_plc_process
</UL>

<P><STRONG><a name="[668]"></a>wav_info_parse</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, wav_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = wav_info_parse &rArr; skip_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_le
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_uint8
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_header_parse
</UL>

<P><STRONG><a name="[42e]"></a>wav_header_parse</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, wav_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = wav_header_parse &rArr; wav_info_parse &rArr; skip_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_ftell
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_le
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_le
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_info_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_preview
</UL>

<P><STRONG><a name="[430]"></a>wav_adpcm_decode</STRONG> (Thumb, 402 bytes, Stack size 112 bytes, wav_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wav_adpcm_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_le
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint8
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_decode
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_decode
</UL>

<P><STRONG><a name="[afc]"></a>pcm2alaw</STRONG> (Thumb, 160 bytes, Stack size 4 bytes, aulaw.o(.text), UNUSED)

<P><STRONG><a name="[afd]"></a>pcm2ulaw</STRONG> (Thumb, 148 bytes, Stack size 4 bytes, aulaw.o(.text), UNUSED)

<P><STRONG><a name="[431]"></a>alaw2pcm</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, aulaw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_decode
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_decode
</UL>

<P><STRONG><a name="[432]"></a>ulaw2pcm</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, aulaw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_decode
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_decode
</UL>

<P><STRONG><a name="[afe]"></a>alaw2ulaw</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, aulaw.o(.text), UNUSED)

<P><STRONG><a name="[aff]"></a>ulaw2alaw</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, aulaw.o(.text), UNUSED)

<P><STRONG><a name="[451]"></a>TNSFilter</STRONG> (Thumb, 874 bytes, Stack size 176 bytes, aac_tns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TNSFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
</UL>

<P><STRONG><a name="[669]"></a>DecodeProgramConfigElement</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, aac_decelmnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DecodeProgramConfigElement
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackADIFHeader
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNextElement
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_audio_specific_config
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_general_audio_specific_config
</UL>

<P><STRONG><a name="[44b]"></a>DecodeNextElement</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, aac_decelmnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DecodeNextElement &rArr; DecodeICSInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_byte
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeICSInfo
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeProgramConfigElement
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADTSChannelMapping
</UL>

<P><STRONG><a name="[44d]"></a>Dequantize</STRONG> (Thumb, 920 bytes, Stack size 168 bytes, aac_dequant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Dequantize
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
</UL>

<P><STRONG><a name="[450]"></a>DeinterleaveShortBlocks</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aac_dequant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
</UL>

<P><STRONG><a name="[448]"></a>UnpackADTSHeader</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, aac_filefmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UnpackADTSHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_initialize
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_prepare
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_adts_bitrate_calc
</UL>

<P><STRONG><a name="[44a]"></a>GetADTSChannelMapping</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, aac_filefmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GetADTSChannelMapping &rArr; DecodeNoiselessData &rArr; DecodeSpectrumShort &rArr; show_bits32
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNoiselessData
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNextElement
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
</UL>

<P><STRONG><a name="[454]"></a>UnpackADIFHeader</STRONG> (Thumb, 562 bytes, Stack size 48 bytes, aac_filefmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UnpackADIFHeader &rArr; DecodeProgramConfigElement
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_le
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_byte
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeProgramConfigElement
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_initialize
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_prepare
</UL>

<P><STRONG><a name="[b00]"></a>PrepareRawBlock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, aac_filefmt.o(.text), UNUSED)

<P><STRONG><a name="[66b]"></a>FlushCodec</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, aac_filefmt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[452]"></a>IMDCT</STRONG> (Thumb, 2128 bytes, Stack size 72 bytes, aac_imdct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = IMDCT &rArr; DCT4 &rArr; R4FFT &rArr; R4Core
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCT4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
</UL>

<P><STRONG><a name="[66d]"></a>mp4_atom_header_read</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, aac_m4ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mp4_atom_header_read
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_be
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_le
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint8
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_header_parse
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_moov_atom_parse
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_trak_atom_parse
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_mdia_atom_parse
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_minf_atom_parse
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stbl_atom_parse
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stsd_atom_parse
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_mp4a_atom_parse
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_udta_atom_parse
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_meta_atom_parse
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_ilst_atom_parse
</UL>

<P><STRONG><a name="[66f]"></a>mp4_ilst_atom_parse</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, aac_m4ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_atom_header_read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[670]"></a>mp4_meta_atom_parse</STRONG> (Thumb, 408 bytes, Stack size 88 bytes, aac_m4ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = mp4_meta_atom_parse &rArr; skip_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_atom_header_read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_moov_atom_parse
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_udta_atom_parse
</UL>

<P><STRONG><a name="[671]"></a>mp4_udta_atom_parse</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, aac_m4ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_meta_atom_parse
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_atom_header_read
</UL>

<P><STRONG><a name="[672]"></a>mp4_stco_atom_parse</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, aac_m4ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fsof
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_ftell
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_be
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[673]"></a>mp4_stsc_atom_parse</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, aac_m4ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_ftell
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_be
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
</UL>

<P><STRONG><a name="[674]"></a>mp4_descr_length_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, aac_m4ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint8
</UL>

<P><STRONG><a name="[675]"></a>mp4_general_audio_specific_config</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, aac_m4ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeProgramConfigElement
</UL>

<P><STRONG><a name="[676]"></a>mp4_audio_specific_config</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, aac_m4ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mp4_audio_specific_config &rArr; DecodeProgramConfigElement
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeProgramConfigElement
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_esds_atom_parse
</UL>

<P><STRONG><a name="[677]"></a>mp4_esds_atom_parse</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, aac_m4ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = mp4_esds_atom_parse &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits32
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint8
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_audio_specific_config
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stbl_atom_parse
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stsd_atom_parse
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_mp4a_atom_parse
</UL>

<P><STRONG><a name="[678]"></a>mp4_mp4a_atom_parse</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, aac_m4ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_be
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_esds_atom_parse
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_atom_header_read
</UL>

<P><STRONG><a name="[679]"></a>mp4_stsd_atom_parse</STRONG> (Thumb, 242 bytes, Stack size 112 bytes, aac_m4ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_be
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_be
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_esds_atom_parse
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_atom_header_read
</UL>

<P><STRONG><a name="[67a]"></a>mp4_stbl_atom_parse</STRONG> (Thumb, 1118 bytes, Stack size 176 bytes, aac_m4ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = mp4_stbl_atom_parse &rArr; mp4_esds_atom_parse &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fsof
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_ftell
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_be
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_be
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_esds_atom_parse
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_atom_header_read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_moov_atom_parse
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_trak_atom_parse
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_mdia_atom_parse
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_minf_atom_parse
</UL>

<P><STRONG><a name="[67b]"></a>mp4_minf_atom_parse</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, aac_m4ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stbl_atom_parse
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_atom_header_read
</UL>

<P><STRONG><a name="[67c]"></a>mp4_mdia_atom_parse</STRONG> (Thumb, 252 bytes, Stack size 104 bytes, aac_m4ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stbl_atom_parse
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_atom_header_read
</UL>

<P><STRONG><a name="[67d]"></a>mp4_trak_atom_parse</STRONG> (Thumb, 362 bytes, Stack size 120 bytes, aac_m4ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stbl_atom_parse
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_atom_header_read
</UL>

<P><STRONG><a name="[67e]"></a>mp4_moov_atom_parse</STRONG> (Thumb, 780 bytes, Stack size 200 bytes, aac_m4ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = mp4_moov_atom_parse &rArr; mp4_stbl_atom_parse &rArr; mp4_esds_atom_parse &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stbl_atom_parse
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_meta_atom_parse
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_atom_header_read
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_mp4_header_parse
</UL>

<P><STRONG><a name="[455]"></a>aac_mp4_header_parse</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, aac_m4ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604 + Unknown Stack Size
<LI>Call Chain = aac_mp4_header_parse &rArr; mp4_moov_atom_parse &rArr; mp4_stbl_atom_parse &rArr; mp4_esds_atom_parse &rArr; fill_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fsof
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_feof
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_moov_atom_parse
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_atom_header_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_initialize
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_prepare
</UL>

<P><STRONG><a name="[449]"></a>aac_mp4_next_chunk_get</STRONG> (Thumb, 624 bytes, Stack size 112 bytes, aac_m4ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = aac_mp4_next_chunk_get &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fread
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_be
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_seek
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
</UL>

<P><STRONG><a name="[66a]"></a>DecodeICSInfo</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, aac_noiseless.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DecodeICSInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNextElement
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeICS
</UL>

<P><STRONG><a name="[44c]"></a>DecodeNoiselessData</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, aac_noiseless.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DecodeNoiselessData &rArr; DecodeSpectrumShort &rArr; show_bits32
</UL>
<BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSpectrumShort
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSpectrumLong
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeICS
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetADTSChannelMapping
</UL>

<P><STRONG><a name="[44f]"></a>PNS</STRONG> (Thumb, 1226 bytes, Stack size 156 bytes, aac_pns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = PNS
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
</UL>

<P><STRONG><a name="[44e]"></a>StereoProcess</STRONG> (Thumb, 954 bytes, Stack size 168 bytes, aac_stproc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = StereoProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_decode
</UL>

<P><STRONG><a name="[684]"></a>af_convert_from_ieee_extended</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, aif_decode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[457]"></a>aif_header_parse</STRONG> (Thumb, 734 bytes, Stack size 48 bytes, aif_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = aif_header_parse &rArr; skip_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_feof
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_ftell
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_be
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_be
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_preview
</UL>

<P><STRONG><a name="[68b]"></a>CSR_BcCmd_Malloc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bccmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootStrap
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_boot_strap_bccmd
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_boot_strap_pskey_set
</UL>

<P><STRONG><a name="[b01]"></a>CSR_BcCmd_Free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bccmd.o(.text), UNUSED)

<P><STRONG><a name="[68f]"></a>BootstrapSetBaudrate</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, bccmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bc06_pskeys_info
</UL>

<P><STRONG><a name="[b02]"></a>BootstrapSetUartConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bccmd.o(.text), UNUSED)

<P><STRONG><a name="[690]"></a>BootstrapSetBdAddress</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bccmd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bc06_pskeys_info
</UL>

<P><STRONG><a name="[b03]"></a>BootstrapSetFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bccmd.o(.text), UNUSED)

<P><STRONG><a name="[689]"></a>BootstrapSetLocalName</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bccmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bc06_pskeys_info
</UL>

<P><STRONG><a name="[b04]"></a>BootstrapSetFtrim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bccmd.o(.text), UNUSED)

<P><STRONG><a name="[b05]"></a>BootstrapSetMapScoPCM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bccmd.o(.text), UNUSED)

<P><STRONG><a name="[b06]"></a>BootstrapSetPCMConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bccmd.o(.text), UNUSED)

<P><STRONG><a name="[b07]"></a>BootstrapSetPCMSlot</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bccmd.o(.text), UNUSED)

<P><STRONG><a name="[68d]"></a>BootStrap</STRONG> (Thumb, 760 bytes, Stack size 136 bytes, bccmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSR_BcCmd_Malloc
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_boot_strap_bccmd
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_boot_strap_pskey_set
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bccmd_boot_process
</UL>

<P><STRONG><a name="[68e]"></a>set_bc06_pskeys_info</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bccmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapSetLocalName
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapSetBdAddress
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapSetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bccmd_boot_process
</UL>

<P><STRONG><a name="[477]"></a>init_bccmd_boot_process</STRONG> (Thumb, 162 bytes, Stack size 992 bytes, bccmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bc06_pskeys_info
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootStrap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_CSRBC6
</UL>

<P><STRONG><a name="[691]"></a>hci_send_cmd</STRONG> (Thumb, 60 bytes, Stack size 216 bytes, broadcom_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[474]"></a>broadcom_write_bd_addr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, broadcom_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_BCM20702
</UL>

<P><STRONG><a name="[473]"></a>broadcom_write_baud_rate</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, broadcom_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_BCM20702
</UL>

<P><STRONG><a name="[692]"></a>broadcom_write_sco_pcm_format</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, broadcom_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_config_pcm_data
</UL>

<P><STRONG><a name="[693]"></a>broadcom_wrtie_sco_time_slot</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, broadcom_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
</UL>

<P><STRONG><a name="[694]"></a>broadcom_wrtie_sco_pcm_int_param</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, broadcom_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_config_pcm_data
</UL>

<P><STRONG><a name="[475]"></a>broadcom_config_pcm_data</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, broadcom_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_wrtie_sco_pcm_int_param
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_write_sco_pcm_format
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_BCM20702
</UL>

<P><STRONG><a name="[695]"></a>broadcom_write_pcm_mute_param</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, broadcom_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
</UL>

<P><STRONG><a name="[696]"></a>BROADCOM_IOP_TEST_TX</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, broadcom_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
</UL>

<P><STRONG><a name="[697]"></a>BROADCOM_IOP_TEST_RX</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, broadcom_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[48b]"></a>mtk_set_bt_low</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mtk_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtMtkRestEn
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtMtkLDOEn
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
</UL>

<P><STRONG><a name="[48c]"></a>mtk_set_power_on</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mtk_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtMtkRestEn
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtMtkLDOEn
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
</UL>

<P><STRONG><a name="[69a]"></a>mtk_hci_send_cmd</STRONG> (Thumb, 60 bytes, Stack size 216 bytes, mtk_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[490]"></a>mtk_hci_write_bd_addr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mtk_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
</UL>

<P><STRONG><a name="[b08]"></a>SetMtkTxPower</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mtk_cmd.o(.text), UNUSED)

<P><STRONG><a name="[492]"></a>mtk_hci_set_radio</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mtk_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
</UL>

<P><STRONG><a name="[493]"></a>hci_reset</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mtk_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
</UL>

<P><STRONG><a name="[48d]"></a>mtk_hci_write_baud_rate</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, mtk_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
</UL>

<P><STRONG><a name="[48e]"></a>mtk_set_pcm_data</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mtk_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
</UL>

<P><STRONG><a name="[491]"></a>mtk_set_sleep</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mtk_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
</UL>

<P><STRONG><a name="[b09]"></a>SetMtEV3Property</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mtk_cmd.o(.text), UNUSED)

<P><STRONG><a name="[b0a]"></a>SetMt3EV3Property</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mtk_cmd.o(.text), UNUSED)

<P><STRONG><a name="[48f]"></a>hci_write_local_feature</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, mtk_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
</UL>

<P><STRONG><a name="[488]"></a>hci_mtk_patch_on</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mtk_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTK_extra_patch
</UL>

<P><STRONG><a name="[489]"></a>MT6622_DownloadPatch</STRONG> (Thumb, 284 bytes, Stack size 296 bytes, mtk_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTK_extra_patch
</UL>

<P><STRONG><a name="[4a4]"></a>AT_TEncode_Handsfree</STRONG> (Thumb, 1002 bytes, Stack size 40 bytes, at_hf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = AT_TEncode_Handsfree &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtItoA
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode
</UL>

<P><STRONG><a name="[4ac]"></a>AT_TDecode_Handsfree</STRONG> (Thumb, 1292 bytes, Stack size 232 bytes, at_hf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = AT_TDecode_Handsfree &rArr; AtParseParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackDataStatusCallBackFunc
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtMakeString
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtParseParameters
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtAtoI
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode
</UL>

<P><STRONG><a name="[55c]"></a>AT_MapHfIndicators</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, at_hf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AT_MapHfIndicators
</UL>
<BR>[Calls]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateNegotiate
</UL>

<P><STRONG><a name="[4a3]"></a>AT_TEncode_Headset</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, at_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AT_TEncode_Headset &rArr; AtItoA
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtItoA
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode
</UL>

<P><STRONG><a name="[4ab]"></a>AT_TDecode_Headset</STRONG> (Thumb, 138 bytes, Stack size 200 bytes, at_hs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AT_TDecode_Headset &rArr; AtParseParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtParseParameters
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtAtoI
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode
</UL>

<P><STRONG><a name="[4a5]"></a>AT_TEncode_Phonebook</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, at_pb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AT_TEncode_Phonebook &rArr; AtItoA
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtItoA
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode
</UL>

<P><STRONG><a name="[4ad]"></a>AT_TDecode_Phonebook</STRONG> (Thumb, 834 bytes, Stack size 216 bytes, at_pb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_TDecode_Phonebook &rArr; AtParseParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtMakeString
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtParseParameters
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtAtoI
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode
</UL>

<P><STRONG><a name="[651]"></a>TRAN_Init</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, transprt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TRAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RegisterTransport
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_HciReset
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrTranCallback
</UL>

<P><STRONG><a name="[652]"></a>TRAN_Shutdown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, transprt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_HciReset
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioShutdown
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRadioCallback
</UL>

<P><STRONG><a name="[4bb]"></a>AvctpConnInitStateMachine</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, avctpcon.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Init
</UL>

<P><STRONG><a name="[64]"></a>AvctpL2Callback</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, avctpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = AvctpL2Callback &rArr; L2CAP_ConnectRsp &rArr; L2Cap_SendConnRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRsp
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnFindFreeChannel
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnFindChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avctp.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>AvctpL2BrowseCallback</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, avctpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = AvctpL2BrowseCallback &rArr; L2CAP_ConnectRsp &rArr; L2Cap_SendConnRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRsp
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnFindFreeChannel
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnFindChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avctp.o(.text)
</UL>
<P><STRONG><a name="[6b4]"></a>AvctpInitConn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, avctpcon.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvtpMsgInit
</UL>

<P><STRONG><a name="[4c2]"></a>AvctpDisconnect</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, avctpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = AvctpDisconnect &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Disconnect
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgCb
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleRcpCommand
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleRcpResponse
</UL>

<P><STRONG><a name="[4bf]"></a>AvctpConnect</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, avctpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = AvctpConnect &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectReq
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnFindChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Connect
</UL>

<P><STRONG><a name="[4c1]"></a>AvctpConnectRsp</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, avctpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = AvctpConnectRsp &rArr; L2CAP_ConnectRsp &rArr; L2Cap_SendConnRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_ConnectRsp
</UL>

<P><STRONG><a name="[4bd]"></a>AvctpIsConnected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, avctpcon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Disconnect
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Deregister
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_ConnectRsp
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_RemoteDevice
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Connect
</UL>

<P><STRONG><a name="[4c0]"></a>AvctpIsPendingAccept</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, avctpcon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_ConnectRsp
</UL>

<P><STRONG><a name="[4c3]"></a>AvctpSendNextFrame</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, avctpmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpSendNextRcpFrame
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpSendNextBrwsFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_SendResponse
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_SendCommand
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgCb
</UL>

<P><STRONG><a name="[4bc]"></a>AvtpMsgInit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, avctpmsg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpInitConn
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Register
</UL>

<P><STRONG><a name="[4c5]"></a>AvdtpAlloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, avalloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Init
</UL>

<P><STRONG><a name="[4d0]"></a>AvdtpDisconnect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, avdtpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = AvdtpDisconnect &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectReq
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpStrmConnCallback
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Disconnect
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrConnCallback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrSignalCallback
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleResponse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnDiscPending
</UL>

<P><STRONG><a name="[4c6]"></a>AvdtpConnInitStateMachine</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, avdtpcon.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Init
</UL>

<P><STRONG><a name="[66]"></a>AvL2Callback</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, avdtpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = AvL2Callback &rArr; L2CAP_ConnectRsp &rArr; L2Cap_SendConnRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRsp
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnFindOrphanedStreamConn
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnFindConn
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnFindFreeChannel
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnFindChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avdtp.o(.text)
</UL>
<P><STRONG><a name="[4d1]"></a>AvdtpInitConn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, avdtpcon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_RegisterStream
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigInit
</UL>

<P><STRONG><a name="[4cc]"></a>AvdtpConnect</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, avdtpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = AvdtpConnect &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectReq
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Connect
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleResponse
</UL>

<P><STRONG><a name="[4ce]"></a>AvdtpConnectRsp</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, avdtpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = AvdtpConnectRsp &rArr; L2CAP_ConnectRsp &rArr; L2Cap_SendConnRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpStrmConnCallback
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_ConnectRsp
</UL>

<P><STRONG><a name="[4ca]"></a>AvdtpIsConnected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, avdtpcon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_OpenStream
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpStrmConnCallback
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetAllCapabilities
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetCapabilities
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_DiscoverStreams
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Disconnect
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_ConnectRsp
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Connect
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Deregister
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrConnCallback
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleResponse
</UL>

<P><STRONG><a name="[4d4]"></a>AvdtpSigStreamSendSimpleCmd</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_OpenStream
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_CloseStream
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_AbortStream
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_SuspendStream
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_StartStream
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetConfig
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetAllCapabilities
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetCapabilities
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_DiscoverStreams
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrSignalCallback
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleTimeout
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleResponse
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleReject
</UL>

<P><STRONG><a name="[4db]"></a>AvdtpSigDelayReport</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = AvdtpSigDelayReport &rArr; AvdtpSigStreamSendCmdWithParms &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendCmdWithParms
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_ReportSinkDelay
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrSignalCallback
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleResponse
</UL>

<P><STRONG><a name="[4c8]"></a>AvdtpSigInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AvdtpSigInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpInitConn
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Register
</UL>

<P><STRONG><a name="[4d9]"></a>AvdtpSigStreamSetConfig</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = AvdtpSigStreamSetConfig &rArr; AvdtpSigStreamSendCmdWithParms &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigEncodeCapabilities
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendCmdWithParms
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_OpenStream
</UL>

<P><STRONG><a name="[4dd]"></a>AvdtpSigStreamReconfig</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, avsigmgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigEncodeCapabilities
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendCmdWithParms
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Reconfig
</UL>

<P><STRONG><a name="[4de]"></a>AvdtpSigStreamReconfigRsp</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = AvdtpSigStreamReconfigRsp &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_ReconfigRsp
</UL>

<P><STRONG><a name="[4e3]"></a>AvdtpSigStreamSecurityCtrl</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, avsigmgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigSendCommand
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_SecurityControlRsp
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_SecurityControlReq
</UL>

<P><STRONG><a name="[4e0]"></a>AvdtpSigStreamStartRsp</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = AvdtpSigStreamStartRsp &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_StartStreamRsp
</UL>

<P><STRONG><a name="[67]"></a>AvdtpStrmConnCallback</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = AvdtpStrmConnCallback &rArr; AvdtpConnectRsp &rArr; L2CAP_ConnectRsp &rArr; L2Cap_SendConnRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpIsConnected
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpDisconnect
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnectRsp
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpCloseStream
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrClearConnection
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpInsertStreamList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avdtp.o(.text)
</UL>
<P><STRONG><a name="[6af]"></a>AVTP_InitChannel</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, avtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AVTP_InitChannel &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrConnCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnCb
</UL>

<P><STRONG><a name="[6b0]"></a>AVTP_DeinitChannel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, avtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AVTP_DeinitChannel &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrConnCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnCb
</UL>

<P><STRONG><a name="[4da]"></a>AVTP_SendStart</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, avtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetTxMtu
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvtpSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_OpenStreamRsp
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamStartRsp
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSecurityCtrl
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamReconfigRsp
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvtpSendNextPacket
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrSignalCallback
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigSendCommand
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpSendNextRcpFrame
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpSendNextBrwsFrame
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpRejectCommand
</UL>

<P><STRONG><a name="[6b2]"></a>AVTP_SendFailed</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, avtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = AVTP_SendFailed &rArr; AvtpSendNextPacket &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvtpSendNextPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrConnCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnCb
</UL>

<P><STRONG><a name="[6b1]"></a>AVTP_SendContinue</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, avtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = AVTP_SendContinue &rArr; AvtpSendNextPacket &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvtpSendNextPacket
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvtpSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrConnCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnCb
</UL>

<P><STRONG><a name="[6b3]"></a>AVTP_Receive</STRONG> (Thumb, 360 bytes, Stack size 80 bytes, avtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AVTP_Receive &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrConnCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnCb
</UL>

<P><STRONG><a name="[5c7]"></a>L2Cap_StateMachine</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, l2cap_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_CancelAccessRequest
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyUserAndCloseChannel
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyPsm
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_FreeChannel
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendDiscRspInternal
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CLOSED
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_CONN_CNF
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_CONN_RSP
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_OPEN
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CONFIG
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_DISC_CNF
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_DISC_RSP
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SecAccessRsp
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_LinkDisconnect
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_TimerFire
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessRsp
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessReq
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciTxDone
</UL>

<P><STRONG><a name="[5c3]"></a>L2Cap_ProcessReq</STRONG> (Thumb, 696 bytes, Stack size 80 bytes, l2cap_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = L2Cap_ProcessReq &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_AllocPsmChannel
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_CheckForDupilicateRequest
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetValidChannel
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetSysPkt
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_QueueTxPacket
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessSignal
</UL>

<P><STRONG><a name="[5c2]"></a>L2Cap_ProcessRsp</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, l2cap_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = L2Cap_ProcessRsp &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_FindChannelByLocalIdent
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StopTimer
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StartRtx
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessSignal
</UL>

<P><STRONG><a name="[b0b]"></a>SCO_Init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, mescodat.o(.text), UNUSED)

<P><STRONG><a name="[6df]"></a>Sco_Send</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mescodat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RequestToSend
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_SendData
</UL>

<P><STRONG><a name="[5e8]"></a>ScoDataCallback</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, mescodat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ScoDataCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoMapHciToConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
</UL>

<P><STRONG><a name="[526]"></a>SCO_SetupLink</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, mescoif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCO_SetupLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoGetFreeConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_CreateLink
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrCreateAudioLink
</UL>

<P><STRONG><a name="[527]"></a>SCO_CreateLink</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, mescoif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SCO_CreateLink &rArr; SCO_SetupLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CheckRadioFeature
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_SetupLink
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoGetFreeConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrCreateAudioLink
</UL>

<P><STRONG><a name="[53d]"></a>SCO_DisconnectLink</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, mescoif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveAudioLink
</UL>

<P><STRONG><a name="[6e0]"></a>SCO_SetConnectionPacketType</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mescoif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>

<P><STRONG><a name="[6e1]"></a>SCO_SetSettings</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mescoif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeProcessToken
</UL>

<P><STRONG><a name="[6e2]"></a>SCO_SendData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mescoif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sco_Send
</UL>

<P><STRONG><a name="[53b]"></a>SCO_RegisterHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mescoif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrRegisterAudioHandler
</UL>

<P><STRONG><a name="[536]"></a>SCO_UnregisterHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mescoif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrDeregisterAudioHandler
</UL>

<P><STRONG><a name="[529]"></a>SCO_AcceptIncomingConnection</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mescoif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCO_AcceptIncomingConnection &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrAcceptAudioLink
</UL>

<P><STRONG><a name="[532]"></a>SCO_RejectIncomingConnection</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mescoif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCO_RejectIncomingConnection &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_AcceptAudioLink
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
</UL>

<P><STRONG><a name="[6e3]"></a>SCO_SetErroneousDataReporting</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mescoif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
</UL>

<P><STRONG><a name="[b0c]"></a>SCO_GetErroneousDataReporting</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mescoif.o(.text), UNUSED)

<P><STRONG><a name="[60d]"></a>RfSendParmNegotiation</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = RfSendParmNegotiation &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDataInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfOpenClientChannel
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateConnPending
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandlePNReq
</UL>

<P><STRONG><a name="[5fa]"></a>RfSendModemStatus</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = RfSendModemStatus &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDataInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCheckForCreditToSend
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetModemStatus
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnPending
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAdvanceToOpenTimeoutHandler
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleMSCReq
</UL>

<P><STRONG><a name="[6e7]"></a>RfSendRemotePortNeg</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = RfSendRemotePortNeg &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDataInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleRPNReq
</UL>

<P><STRONG><a name="[6e9]"></a>RfSendLineStatus</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = RfSendLineStatus &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDataInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleRLSReq
</UL>

<P><STRONG><a name="[6eb]"></a>RfSendAggregateFlow</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = RfSendAggregateFlow &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDataInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleAggregateFlow
</UL>

<P><STRONG><a name="[6ee]"></a>RfSendTest</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = RfSendTest &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDataInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleTEST
</UL>

<P><STRONG><a name="[612]"></a>RfControlChannel</STRONG> (Thumb, 494 bytes, Stack size 32 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = RfControlChannel &rArr; RfCtlHandleNSC &rArr; RfAdvanceNegPending &rArr; RfFreeChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFindDlcIdByDlci
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlParseParms
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleCnf
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleNSC
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleTEST
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleAggregateFlow
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendNSC
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleRLSReq
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleRPNReq
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleMSCReq
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandlePNCnf
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandlePNReq
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateMachine
</UL>

<P><STRONG><a name="[600]"></a>RfCalcFCS</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rfc_fcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RfCalcFCS
</UL>
<BR>[Called By]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDataInternal
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCmdRsp
</UL>

<P><STRONG><a name="[615]"></a>RfIsValidFCS</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, rfc_fcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RfIsValidFCS
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfL2Callback
</UL>

<P><STRONG><a name="[5d3]"></a>RF_Init</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, rfc_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_RegisterPsm
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Init
</UL>

<P><STRONG><a name="[5d6]"></a>RF_Deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rfc_util.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Deinit
</UL>

<P><STRONG><a name="[61b]"></a>RfIsValidChannel</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rfc_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendData
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RespondChannel
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_FrameSize
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CreditFlowEnabled
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_AdvanceCredit
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CloseChannel
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RemoteDevice
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetModemStatus
</UL>

<P><STRONG><a name="[61c]"></a>RfIsChannelAllocated</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, rfc_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendData
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RespondChannel
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_FrameSize
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CreditFlowEnabled
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_AdvanceCredit
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CloseChannel
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RemoteDevice
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SetModemStatus
</UL>

<P><STRONG><a name="[60b]"></a>RfFreeUsePendingChannel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfc_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateOpen
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfServiceTimeoutHandler
</UL>

<P><STRONG><a name="[609]"></a>RfGetFreeServiceChannel</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RfGetFreeServiceChannel &rArr; EvmStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateOpen
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfServiceTimeoutHandler
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleRPNReq
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandlePNReq
</UL>

<P><STRONG><a name="[617]"></a>RfAllocService</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, rfc_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RegisterServerChannel
</UL>

<P><STRONG><a name="[618]"></a>RfFreeServerChannel</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, rfc_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_DeregisterServerChannel
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeService
</UL>

<P><STRONG><a name="[619]"></a>RfFreeService</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, rfc_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeServerChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_DeregisterService
</UL>

<P><STRONG><a name="[605]"></a>RfDisconnectDLC</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CloseChannel
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateSecPending
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateNegPending
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnIncoming
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnPending
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnected
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfTimeoutHandler
</UL>

<P><STRONG><a name="[61f]"></a>RfCheckForCreditToSend</STRONG> (Thumb, 846 bytes, Stack size 24 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = RfCheckForCreditToSend &rArr; RfSendModemStatus &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendModemStatus
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDataInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_AdvanceCredit
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleCnf
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandlePNCnf
</UL>

<P><STRONG><a name="[6f3]"></a>RfMUXCheckNextTxQueue</STRONG> (Thumb, 836 bytes, Stack size 16 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = RfMUXCheckNextTxQueue &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDataInternal
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsDlcFlowOn
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMUXCheckTxQueues
</UL>

<P><STRONG><a name="[61d]"></a>RfMUXCheckTxQueues</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = RfMUXCheckTxQueues &rArr; RfMUXCheckNextTxQueue &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMUXCheckNextTxQueue
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfIsMuxFlowOn
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendData
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleCnf
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleAggregateFlow
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleMSCReq
</UL>

<P><STRONG><a name="[5fb]"></a>RfAppCallback</STRONG> (Thumb, 646 bytes, Stack size 40 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMUXCheckTxQueues
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCheckForCreditToSend
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectDLC
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSecCallback
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateDiscIncoming
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateDiscPending
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnIncoming
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnPending
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnected
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateDisconnected
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateMachine
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAdvanceToOpenTimeoutHandler
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleCnf
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleNSC
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleMSCReq
</UL>

<P><STRONG><a name="[5f9]"></a>RfFreeDLC</STRONG> (Thumb, 1004 bytes, Stack size 24 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_CancelAccessRequest
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSecCallback
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfOpenClientChannel
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateSecPending
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateDiscIncoming
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnPending
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateDisconnected
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeChannel
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendSABM
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAdvanceToClosedTimeoutHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAdvanceToOpenTimeoutHandler
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeAllDLCs
</UL>

<P><STRONG><a name="[611]"></a>RfFreeMux</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RfFreeMux &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeAllDLCs
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfOpenClientChannel
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateMachine
</UL>

<P><STRONG><a name="[5f8]"></a>RfDisconnectL2CAP</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = RfDisconnectL2CAP &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeMux
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectReq
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfOpenClientChannel
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfL2Callback
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateSecPending
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateNegPending
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnIncoming
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnPending
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnected
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeChannel
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateMachine
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateDiscPending
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateConnIncoming
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateConnPending
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfTimeoutHandler
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlParseParms
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandlePNCnf
</UL>

<P><STRONG><a name="[6f7]"></a>RfTimeoutHandler</STRONG> (Thumb, 664 bytes, Stack size 24 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = RfTimeoutHandler &rArr; RfFreeChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectDLC
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCommandPacket
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfc_util.o(.text)
</UL>
<P><STRONG><a name="[613]"></a>RfAllocMux</STRONG> (Thumb, 696 bytes, Stack size 32 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RfAllocMux
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfOpenClientChannel
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfL2Callback
</UL>

<P><STRONG><a name="[614]"></a>RfFindMuxIdByRemDev</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RfFindMuxIdByRemDev
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OpenClientChannel
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfOpenClientChannel
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfL2Callback
</UL>

<P><STRONG><a name="[60a]"></a>RfAllocDLC</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RfAllocDLC &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfOpenClientChannel
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateOpen
</UL>

<P><STRONG><a name="[5fe]"></a>RfFindDlcIdByDlci</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RfFindDlcIdByDlci
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfControlChannel
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDataInternal
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCommandPacket
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateMachine
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateOpen
</UL>

<P><STRONG><a name="[5f7]"></a>RfDisconnectMux</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = RfDisconnectMux &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeChannel
</UL>

<P><STRONG><a name="[5d2]"></a>SDP_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sdp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpInitServer
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpInitClient
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Init
</UL>

<P><STRONG><a name="[5d5]"></a>SDP_Deinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sdp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpDeinitServer
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpDeinitClient
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Deinit
</UL>

<P><STRONG><a name="[65b]"></a>ASFReadPacketHeader</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, asf_packet_header.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ASFReadPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_le
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_le
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint8
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextPayload
</UL>

<P><STRONG><a name="[658]"></a>DecodeFrameHeaderLpc</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, decodeframeheaderlpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = DecodeFrameHeaderLpc &rArr; BitsJoin &rArr; HandleDifferentStream &rArr; SkipBufferFrom &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsJoin
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2weight
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubFrame
</UL>

<P><STRONG><a name="[656]"></a>DecodeFrameHeaderNoisesub</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, decodeframeheadernoisesub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = DecodeFrameHeaderNoisesub &rArr; BitsJoin &rArr; HandleDifferentStream &rArr; SkipBufferFrom &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsJoin
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHuff
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubFrame
</UL>

<P><STRONG><a name="[659]"></a>DecodeRunlevel</STRONG> (Thumb, 666 bytes, Stack size 96 bytes, runlevel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DecodeRunlevel &rArr; BitsJoin &rArr; HandleDifferentStream &rArr; SkipBufferFrom &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindNextPayload
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsJoin
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_num_bits_left
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaHwHuffmanTableLookup
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaHwHuffmanTableSelect
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillBufAndUpdatePoint
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubFrame
</UL>

<P><STRONG><a name="[657]"></a>DecodeFrameHeaderBark</STRONG> (Thumb, 406 bytes, Stack size 136 bytes, decodeframeheaderbark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = DecodeFrameHeaderBark &rArr; BitsJoin &rArr; HandleDifferentStream &rArr; SkipBufferFrom &rArr; mv_fseek &rArr; FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsJoin
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHuff
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSubFrame
</UL>

<P><STRONG><a name="[661]"></a>mp3_huffman_decode</STRONG> (Thumb, 718 bytes, Stack size 88 bytes, mp3_huffman_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mp3_huffman_decode &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_bits25
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_audio_data_parse
</UL>

<P><STRONG><a name="[66c]"></a>DCT4</STRONG> (Thumb, 712 bytes, Stack size 56 bytes, aac_dct4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = DCT4 &rArr; R4FFT &rArr; R4Core
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R4FFT
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMDCT
</UL>

<P><STRONG><a name="[683]"></a>DecodeHuffmanScalar</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, aac_huffman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DecodeHuffmanScalar
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeICS
</UL>

<P><STRONG><a name="[680]"></a>DecodeSpectrumLong</STRONG> (Thumb, 1148 bytes, Stack size 136 bytes, aac_huffman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DecodeSpectrumLong &rArr; show_bits32
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_bits32
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnpackZeros
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNoiselessData
</UL>

<P><STRONG><a name="[681]"></a>DecodeSpectrumShort</STRONG> (Thumb, 1208 bytes, Stack size 160 bytes, aac_huffman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DecodeSpectrumShort &rArr; show_bits32
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_bits32
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNoiselessData
</UL>

<P><STRONG><a name="[6ff]"></a>pf_pow_minus_quater</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, pf_mul.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2weight
</UL>

<P><STRONG><a name="[700]"></a>pf_div</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, pf_mul.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2weight
</UL>

<P><STRONG><a name="[6fe]"></a>pf_int2pf</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, pf_mul.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2weight
</UL>

<P><STRONG><a name="[b0d]"></a>pf_mul</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, pf_mul.o(.text), UNUSED)

<P><STRONG><a name="[b0e]"></a>pf_add</STRONG> (Thumb, 144 bytes, Stack size 4 bytes, pf_mul.o(.text), UNUSED)

<P><STRONG><a name="[701]"></a>ReadHuff</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, read_huff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadHuff
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeFrameHeaderNoisesub
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeFrameHeaderBark
</UL>

<P><STRONG><a name="[703]"></a>R4FFT</STRONG> (Thumb, 740 bytes, Stack size 128 bytes, aac_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = R4FFT &rArr; R4Core
</UL>
<BR>[Calls]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R4Core
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCT4
</UL>

<P><STRONG><a name="[b0f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b10]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[41e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_seek
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_decode
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flac_decoder_seek
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_initialize
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_seek
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_decoder_initialize
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_metadata
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseWmaHeaderObject
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aac_adts_bitrate_calc
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[b11]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[66e]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_atom_header_read
</UL>

<P><STRONG><a name="[b12]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[441]"></a>__aeabi_lasr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe2
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_subframe_lpc
</UL>

<P><STRONG><a name="[b13]"></a>_ll_sshift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[415]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_seek
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_seek
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_seek
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_seek
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_decoder_preview
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_preview
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_decoder_preview
</UL>

<P><STRONG><a name="[706]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[ef]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemindFillStreamCallback
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemindFillStream
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSeek
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskStop
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSeek
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskResume
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskPlayStart
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskPause
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskWaitResp
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStop
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStart
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderGetType
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemStandbyControl
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffControl
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SilenceMuteDetInit
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysVol
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetQuickResponseFlag
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_SaveInfo
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_kernel
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiPowerOnInitProcess
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffDetect
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarInit
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerOnControl
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInitialize
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAt8563tInit
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceDetect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskEntrance
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootUpgradeChk
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_LoadInfo
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioProcessTaskEntrance
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpMuteControl
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayLunarDate
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceMsgCtrl
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInterrupt
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trapfault_handler_dumpstack
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTAudioPlayStop
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTAudioPlayStart
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioSysInfoSetBreakPoint
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayerMute
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetAt8563tSystemTime
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetAt8563tSystemTime
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcTimerCB
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcCurAlarmSleepAndStop
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcControlProcess
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcAlarmRingPlaying
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSysModeProcess
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSpecialFunction
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSendResp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshLoad1of8Dev
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSave8DevRec
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshUpdateAllPairedList
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshPairedListSync
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshErasePairedListArea
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcKeyInit
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAdjustVolScan
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAdjustVolInit
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_CmdProcess
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiStateCheck
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayerSwitchEQ
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSoundRemind
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBPInfoToFlash
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBPInfoFromFlash
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteBytes
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetAt8563tAlarmTime
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLdoinLevelMonitor
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidSendKey_
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidSendKeyWithData_
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackiApMemAlloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackSppMemAlloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackMemAlloc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidSendRawData_
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidMultiKeySendDownUp_
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSupervisionTimeout
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartSendData
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_debug
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartRcvData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartH5RcvData
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcv_debug
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiUpgradeMcuSoftRunning
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSoundRemindStateSet
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuWeekDay
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuSystemTime
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuAlarmTime
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiRequestMcuPowerOff
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiNoticeMcuNextAlarmTime
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuSleepModeSet
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuSleepModeDeal
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankFlashErase
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankDataUpgrade
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_tmrchk_cbfun
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_delay
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidRegisterSdpService
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidIsReadyUserMode
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidMultiKeySend
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidL2Callback
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDataHandler
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Register
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeAppCallback
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackAdvAvrcpMemAlloc
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBk3515HUart
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_RTL8761
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_interrupt
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDoRfcommStartConnection
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfcommData_Open
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfcLinkCallBack
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queryRfcommDataCallback
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfDataCallbackFunc
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCapRequestAccept
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtk_DownloadPatch
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMTK662xTypeInfo
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_write_baud_rate
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
</UL>

<P><STRONG><a name="[69c]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode_Handsfree
</UL>

<P><STRONG><a name="[709]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsSyncInit
</UL>

<P><STRONG><a name="[70b]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[70c]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[70a]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[fb]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[70e]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[fe]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[70f]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[710]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[711]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[246]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeAppCallback
</UL>

<P><STRONG><a name="[245]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeAppCallback
</UL>

<P><STRONG><a name="[1e8]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetpairedListIndex
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshPairedListSync
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_CmdProcess
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLatestBPBak
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DdbFindRecord
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_RcvWiFiDataProcess
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_RcvWiFiCmd
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuAlarmTime
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcIsTrimmed
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatSaveDirSec
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelRsp
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmd
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_FindConnectedDevice
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleRemOobDataReq
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCapRequestAccept
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_FindDevice
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkConnectReq
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleConnectComplete
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleConnectComplete
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_FindRemoteDeviceP
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_metadata
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseWmaHeaderObject
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevCmgrCallback
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmdControl
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpUuidCmp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLocalNameChangeOp
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMeCommandEqual
</UL>

<P><STRONG><a name="[274]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDialOnePhoneNumber
</UL>

<P><STRONG><a name="[273]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_SendAtCommand
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDialOnePhoneNumber
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateDisc
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateOpen
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode_Phonebook
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode_Handsfree
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Range2MinMax
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TE_Encode_Common
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapSetLocalName
</UL>

<P><STRONG><a name="[45c]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_initialize
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemindFillStream
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAt8563tInit
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePlayCtrlProcess
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshUpdateAllPairedList
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshPairedListSync
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_FindRecord
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_AddRecord
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get1of8RecInfo
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetExtInquiryRsp
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSppBuf
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtGetInquiryResultParams
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetExtInqResponseData
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_callback
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNameResultHandler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartSendData
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartH5SendData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartRcvData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartH5RcvData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSpecialCharacters
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringConvert
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatReadDirSec
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatFileGetFullName
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FileRead
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatSaveDirSec
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLongName
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRateConvert
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidMultiKeySendDown
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidDataSend
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidMultiKeySend
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRegisterSdpServices
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_OpenStreamRsp
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_decoder_initialize
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_mwrite
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_mread
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTiApDataSend
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XA_StageInput
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleLinkKeyNotify
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleReturnLinkKeys
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRemOobDataReqRspTask
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleGetOobDataCommandComplete
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUserIoRspTask
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartLinkKeyRspTask
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_OobDataReceived
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetExtInqData
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_AutoCreateExtInquiryRsp
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecSetUserIo
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_plc_good_frame
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_plc_bad_frame
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3_v2_parse
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_id3_v1_parse
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseWmaHeaderObject
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buffer
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvCmdOperands
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvCmd
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpQueueRxCmd
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvRsp
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpAdvancedRspFragment
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSetConfig
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSecurityCtrl
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamReconfigRsp
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamReconfig
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode_Phonebook
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode_Handsfree
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TEncode
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TE_Encode_Common
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtk_DownloadPatch
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT6622_DownloadPatch
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bccmd_boot_process
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpStoreAttribData
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpUuidCmp
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInquiryResult
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetExtInqRespOp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleLocalNameChangeOp
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleGenCmdOp
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessReq
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciReceive
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpEncodeMediaElemAttr
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpGetPlayerValueTxtRsp
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpGetPlayerAttrTxtRsp
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleTEST
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoConfigRsp
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvtpSendPacket
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigEncodeCapabilities
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleSrvCatMdaCODEC
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleSrvCatCP
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleResponse
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpSendNextRcpFrame
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpSendNextBrwsFrame
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_hci_send_cmd
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_meta_atom_parse
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_ilst_atom_parse
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_info_parse
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaInfoGet
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[714]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[b14]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[401]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_plc_bad_frame
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpx_fill_buffer
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_audio_data_parse
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SkipBufferFrom
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
</UL>

<P><STRONG><a name="[715]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[b15]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControlGpioInit
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayLunarDate
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnableChannel
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_DeleteRecord
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbdAllocateRecord
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidRegisterSdpService
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpStartServiceQuery
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpRegisterSdp
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStreamClose
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpRegisterSdpService
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_restore
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_AddDevice
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportMeCommandComplete
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDataReqWhileNotActive
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_plc_good_frame
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_plc_bad_frame
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_RegisterSec
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmdControl
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeBtBautRate
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_post_filter
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_amr
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_dtx_dec
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_syn_filt
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciReceive
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaInfoGet
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[b16]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b17]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b18]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshLoad1of8Dev
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSave8DevRec
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshPairedListSync
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExfatFullName2ShortName
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_stack_frame
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_MarkAfhChannels
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateNegotiate
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_initialize
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInitialize
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAt8563tInit
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmMemFillData
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetExtInquiryRsp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidSendKey_
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_callback
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmDataExtract
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBitMapSec
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatReadDirSec
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatFileGetFullName
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatSaveDirSec
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLongName
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeAppCallback
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_seek
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_context_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_restore
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_AutoCreateExtInquiryRsp
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_buffer
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_buffer
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buffer
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtParseParameters
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_interface_decoder_mms
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInquiryResult
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleSetExtInqRespOp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[718]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[717]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarInit
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioProcessTaskEntrance
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackRemoveAllDevice
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshUpdateAllPairedList
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_CmdProcess
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cInfoInit
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsSyncInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidSendKeyWithData_
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackiApMemAlloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackSppMemAlloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackMemAlloc
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_UartInit
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRxQueue
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiUpgradeMcuSoftRunning
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuRevPassThroughData
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSContextBufferFree
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSContextBufferAlloc
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFat
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneSec
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDirSec
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_task_register
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHidMultiKeySendDown
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RegisterHandler
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateDataLink
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_Register
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpAlloc
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStreamClose
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAlloc
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Register
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_RegisterSec
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdGet
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_RegisterSec
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_Register
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wma_decoder_decode
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sbc_decoder_decode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_initialize
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtInitMemory
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevEventHandler
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeGetFreeRemoteDevice
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msbc_plc_init
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAllocListeningDevice
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAlloc
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpAlloc
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Register
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpAlloc
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtk_DownloadPatch
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT6622_DownloadPatch
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA_uart_write_array
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdabt_write_memory
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bccmd_boot_process
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_interface_decode
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_frame_reset
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_interface_init
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_frame_init
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_amr
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_dtx_dec
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_amr_reset
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocChannel
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessReq
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAlloc
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpCloseStream
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_InitChannel
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_hci_send_cmd
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BROADCOM_IOP_TEST_RX
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stbl_atom_parse
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp4_stco_atom_parse
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlushCodec
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_huffman_decode
</UL>

<P><STRONG><a name="[b19]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b1a]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[719]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[244]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeAppCallback
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootstrapSetLocalName
</UL>

<P><STRONG><a name="[69e]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGeneratePid
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_MapHfIndicators
</UL>

<P><STRONG><a name="[71a]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[71c]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[70d]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[708]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[ca]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[71d]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[100]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[102]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[707]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[b1b]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[b1c]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[71f]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[716]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[b1d]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[71b]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[b1e]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[b1f]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[721]"></a>AdcAdjustVolInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, adc_adjust_vol.o(i.AdcAdjustVolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = AdcAdjustVolInit &rArr; AdcAdjustVolScan &rArr; McuSyncWiFiVolume &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcGpioSel
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcChannelGetValue
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAdjustVolScan
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInit
</UL>

<P><STRONG><a name="[724]"></a>AdcAdjustVolScan</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, adc_adjust_vol.o(i.AdcAdjustVolScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = AdcAdjustVolScan &rArr; McuSyncWiFiVolume &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysVol
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcChannelGetValue
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuSyncWiFiVolume
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcAdjustVolIndexVal
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAdjustVolInit
</UL>

<P><STRONG><a name="[755]"></a>AdcAlcConfig</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, audio_adc.o(i.AdcAlcConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AdcAlcConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
</UL>

<P><STRONG><a name="[756]"></a>AdcAlcGainSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, audio_adc.o(i.AdcAlcGainSet))
<BR><BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
</UL>

<P><STRONG><a name="[757]"></a>AdcAlcSel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, audio_adc.o(i.AdcAlcSel))
<BR><BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
</UL>

<P><STRONG><a name="[72a]"></a>AdcClose</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, audio_adc.o(i.AdcClose))
<BR><BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
</UL>

<P><STRONG><a name="[729]"></a>AdcConfig</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, audio_adc.o(i.AdcConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AdcConfig &rArr; __IsFunction__
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcClose
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsFunction__
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcToPmem
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcToI2s
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
</UL>

<P><STRONG><a name="[764]"></a>AdcDacClkModeSet</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dac.o(i.AdcDacClkModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdcDacClkModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutputInit
</UL>

<P><STRONG><a name="[72b]"></a>AdcKeyInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adc_key.o(i.AdcKeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = AdcKeyInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcGpioSel
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInit
</UL>

<P><STRONG><a name="[72c]"></a>AdcKeyScan</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, adc_key.o(i.AdcKeyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AdcKeyScan &rArr; GetAdcKeyIndex &rArr; AdcChannelKeyGet &rArr; SarAdcChannelGetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcKeyIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
</UL>

<P><STRONG><a name="[72f]"></a>AdcMixCurrWritePointGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, audio_adc.o(i.AdcMixCurrWritePointGet))
<BR><BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcPmemPcmRemainLenGet
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcPcmDataRead
</UL>

<P><STRONG><a name="[72e]"></a>AdcPcmDataRead</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, audio_adc.o(i.AdcPcmDataRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AdcPcmDataRead &rArr; PcmDataExtract
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmDataExtract
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcMixCurrWritePointGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioProcessTaskEntrance
</UL>

<P><STRONG><a name="[731]"></a>AdcPmemPcmRemainLenGet</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, audio_adc.o(i.AdcPmemPcmRemainLenGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AdcPmemPcmRemainLenGet
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcMixCurrWritePointGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioProcessTaskEntrance
</UL>

<P><STRONG><a name="[74a]"></a>AdcPmemWriteDis</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, audio_adc.o(i.AdcPmemWriteDis))
<BR><BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
</UL>

<P><STRONG><a name="[744]"></a>AdcPmemWriteEn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, audio_adc.o(i.AdcPmemWriteEn))
<BR><BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaInit
</UL>

<P><STRONG><a name="[732]"></a>AdcToI2s</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, audio_adc.o(i.AdcToI2s))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AdcToI2s &rArr; AdcConfig &rArr; __IsFunction__
</UL>
<BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
</UL>

<P><STRONG><a name="[733]"></a>AdcToPmem</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, audio_adc.o(i.AdcToPmem))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AdcToPmem &rArr; AdcConfig &rArr; __IsFunction__
</UL>
<BR>[Calls]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmemDataPathSel
</UL>
<BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaInit
</UL>

<P><STRONG><a name="[74b]"></a>AdcVolumeSet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, audio_adc.o(i.AdcVolumeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AdcVolumeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[735]"></a>AmpMuteControl</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, sys_vol.o(i.AmpMuteControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = AmpMuteControl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankFlashErase
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankDataUpgrade
</UL>

<P><STRONG><a name="[741]"></a>AudioAnaInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sys_vol.o(i.AudioAnaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AudioAnaInit &rArr; AdcToPmem &rArr; AdcConfig &rArr; __IsFunction__
</UL>
<BR>[Calls]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sWritePmemDis
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sInToPmemConfig
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMicBiasEn
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecAdcAnaInit
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcToPmem
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcPmemWriteEn
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[747]"></a>AudioAnaSetChannel</STRONG> (Thumb, 622 bytes, Stack size 16 bytes, sys_vol.o(i.AudioAnaSetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = AudioAnaSetChannel &rArr; PcmMemFillData &rArr; MixerSetData &rArr; MixerProcess &rArr; MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerEnable
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerConfigFormat
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysVol
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcVolumeSet
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmMemFillData
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst12p288GeneratorModule
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmFifoClear
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetMasterMode
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSampleRateSet
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcPmemWriteDis
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerDisable
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sWritePmemEn
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecAdcMicGainConfig
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecAdcChannelSel
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcPmemWriteEn
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAlcSel
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAlcGainSet
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAlcConfig
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sPortSet
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioProcessTaskEntrance
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceMsgCtrl
</UL>

<P><STRONG><a name="[758]"></a>AudioDacOutSetChannel</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sys_vol.o(i.AudioDacOutSetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AudioDacOutSetChannel &rArr; CodecDacChannelSel &rArr; CodecDacChannelDisconnect &rArr; CodecMixPgaDisconnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacSoftMuteSet
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstPhubModule
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstMclk
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhubPathSel
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhubPathClose
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmFifoClear
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacConfig
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacAdcSampleRateSet
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelSel
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmTxSetPcmDataMode
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutputInit
</UL>

<P><STRONG><a name="[762]"></a>AudioI2sOutSetChannel</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, sys_vol.o(i.AudioI2sOutSetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AudioI2sOutSetChannel &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstPhubModule
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstMclk
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhubPathSel
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhubPathClose
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmFifoClear
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetMasterMode
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSampleRateSet
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacAdcSampleRateSet
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutputInit
</UL>

<P><STRONG><a name="[763]"></a>AudioOutputInit</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, sys_vol.o(i.AudioOutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AudioOutputInit &rArr; AudioDacOutSetChannel &rArr; CodecDacChannelSel &rArr; CodecDacChannelDisconnect &rArr; CodecMixPgaDisconnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst12p288GeneratorModule
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcDacClkModeSet
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacMonoConfig
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sPortSet
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioI2sOutSetChannel
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDacOutSetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[767]"></a>AudioPlayerMute</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sys_vol.o(i.AudioPlayerMute))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = AudioPlayerMute &rArr; SoundRemind &rArr; DecoderTaskSyncPlay &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacSoftMuteSet
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskResume
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskPause
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
</UL>

<P><STRONG><a name="[905]"></a>AudioPlayerPlayPause</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, player_control.o(i.AudioPlayerPlayPause), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePlayCtrlProcess
</UL>

<P><STRONG><a name="[904]"></a>AudioPlayerStop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, player_control.o(i.AudioPlayerStop), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePlayCtrlProcess
</UL>

<P><STRONG><a name="[76b]"></a>AudioPlayerSwitchEQ</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sys_vol.o(i.AudioPlayerSwitchEQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = AudioPlayerSwitchEQ &rArr; EqStyleSelect &rArr; EqStyleConfigure &rArr; EqFilterCoefsCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacAdcSampleRateGet
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqStyleSelect
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqStyleNameGet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
</UL>

<P><STRONG><a name="[d6]"></a>AudioProcessTaskEntrance</STRONG> (Thumb, 662 bytes, Stack size 0 bytes, task_audio_process.o(i.AudioProcessTaskEntrance))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = AudioProcessTaskEntrance &rArr; AudioAnaSetChannel &rArr; PcmMemFillData &rArr; MixerSetData &rArr; MixerProcess &rArr; MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SilenceAmpMuteProc
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerSetData
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerIsDone
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalGainSet
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSoundRemindPlaying
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dc_blocker
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_dc_blocker
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sPmemPcmRemainLenGet
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sPcmDataRead
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcPmemPcmRemainLenGet
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcPcmDataRead
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[779]"></a>AudioSampleRateSet</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, sys_vol.o(i.AudioSampleRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AudioSampleRateSet &rArr; AudioStaOutSetChannel &rArr; DacSoftMuteSet &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst12p288GeneratorModule
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSampleRateSet
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacAdcSampleRateSet
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sPortSet
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStart
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
</UL>

<P><STRONG><a name="[766]"></a>AudioStaOutSetChannel</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, sys_vol.o(i.AudioStaOutSetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AudioStaOutSetChannel &rArr; DacSoftMuteSet &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacSoftMuteSet
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstPhubModule
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstMclk
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhubPathSel
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhubPathClose
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmFifoClear
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSetMasterMode
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacConfig
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacAdcSampleRateSet
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcClose
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sClassdSTASampleRateSet
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sClassdMasterModeSet
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecAdcFmGainConfig
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecAdcChannelSel
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecAdcAnaInit
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcToI2s
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioSampleRateSet
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutputInit
</UL>

<P><STRONG><a name="[77d]"></a>AudioSysInfoSetBreakPoint</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, sys_app.o(i.AudioSysInfoSetBreakPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = AudioSysInfoSetBreakPoint &rArr; BP_SaveInfo &rArr; SaveBPInfoToFlash &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_SaveInfo
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_GetInfo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiRequestMcuPowerOff
</UL>

<P><STRONG><a name="[77e]"></a>BP_GetInfo</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, breakpoint.o(i.BP_GetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioSysInfoSetBreakPoint
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiWwwStateSet
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankDataUpgrade
</UL>

<P><STRONG><a name="[780]"></a>BP_LoadInfo</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, breakpoint.o(i.BP_LoadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = BP_LoadInfo &rArr; LoadBPInfoFromFlash &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmRead
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBPInfoFromFlash
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc8CheckSum
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77f]"></a>BP_SaveInfo</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, breakpoint.o(i.BP_SaveInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = BP_SaveInfo &rArr; SaveBPInfoToFlash &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBPInfoToFlash
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc8CheckSum
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioSysInfoSetBreakPoint
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarDeinit
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiWwwStateSet
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankDataUpgrade
</UL>

<P><STRONG><a name="[784]"></a>BTAudioPlayStart</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bt_app_func.o(i.BTAudioPlayStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = BTAudioPlayStart &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
</UL>

<P><STRONG><a name="[785]"></a>BTAudioPlayStop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bt_app_func.o(i.BTAudioPlayStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = BTAudioPlayStop &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
</UL>

<P><STRONG><a name="[786]"></a>BTDevicePowerOff</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bt_device_cfg.o(i.BTDevicePowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BTDevicePowerOff &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoDeepSleepGpioCfg
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoPowerDownGpioCfg
</UL>

<P><STRONG><a name="[231]"></a>BTStackDataStatusCallBackFunc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bt_play_internal_api.o(i.BTStackDataStatusCallBackFunc))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeAppCallback
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleModeChange
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TDecode_Handsfree
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciDeleteConnection
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
</UL>

<P><STRONG><a name="[134]"></a>BTStackStatusCallBackFunc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bt_app_ui_callback.o(i.BTStackStatusCallBackFunc))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_AddRecord
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPEventHandle
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSppBuf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpApp_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_callback
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNameResultHandler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartRcvData
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidL2Callback
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDataHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvCtpCallback
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeAppCallback
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPasserAVRCP_EVENT_ADV_RESPONSE
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppA2dpCallBack
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppRcpCallback
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfDataCallbackFunc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevEventHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrBbCheckTimerNotify
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAccessModeOp
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleRxError
</UL>

<P><STRONG><a name="[787]"></a>BootUpgradeChk</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, upgrade_detect.o(i.BootUpgradeChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = BootUpgradeChk &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmRead
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioPorSysReset
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsLock
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsGetCurContext
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[476]"></a>BtLDOEn</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bt_device_cfg.o(i.BtLDOEn), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_CSRBC6
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_RTL8761
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bk3515HPowerOn
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDABT_core_Intialization
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA_pin_to_low
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA_pin_to_high
</UL>

<P><STRONG><a name="[698]"></a>BtMtkLDOEn</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bt_device_cfg.o(i.BtMtkLDOEn), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_set_power_on
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_set_bt_low
</UL>

<P><STRONG><a name="[699]"></a>BtMtkRestEn</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bt_device_cfg.o(i.BtMtkRestEn), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_set_power_on
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_set_bt_low
</UL>

<P><STRONG><a name="[1a6]"></a>BuartDevInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, buart.o(i.BuartDevInfo), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRun
</UL>

<P><STRONG><a name="[211]"></a>BuartDevInfo_</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, buart.o(i.BuartDevInfo_), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit
</UL>

<P><STRONG><a name="[963]"></a>BuartExFifoInit</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, buart.o(i.BuartExFifoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BuartExFifoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_UartInit
</UL>

<P><STRONG><a name="[115]"></a>BuartIOctl</STRONG> (Thumb, 654 bytes, Stack size 24 bytes, buart.o(i.BuartIOctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BuartIOctl &rArr; GetBuartBaudClk &rArr; ClkUseOsc32kCheckRc48m &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuartBaudClk
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInterrupt
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartRcvData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartH5RcvData
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_UartInit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBk3515HUart
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_RDA5876a
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_CSRBC6
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_BCM20702
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_RTL8761
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_baud_rate
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bk3515HPowerOn
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPatchArray
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_hci_write_baud_rate
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_mtk_patch_on
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMTK662xTypeInfo
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDABT_core_Intialization
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_write_baud_rate
</UL>

<P><STRONG><a name="[472]"></a>BuartInit</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, buart.o(i.BuartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BuartInit &rArr; GetBuartBaudClk &rArr; ClkUseOsc32kCheckRc48m &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuartBaudClk
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_UartInit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBk3515HUart
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_RDA5876a
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_CSRBC6
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_BCM20702
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_mtk
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_RTL8761
</UL>

<P><STRONG><a name="[129]"></a>BuartRecv</STRONG> (Thumb, 550 bytes, Stack size 56 bytes, buart.o(i.BuartRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BuartRecv &rArr; Wait4EventTimeout &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsFunction2__
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait4EventTimeout
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTick1MsCnt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_TimerPollingRcvUartData
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRcvDataBlocking
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_RcvUartData
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBk3515HUart
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_RDA5876a
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_CSRBC6
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDownloadAllPatchSuccess
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_baud_rate
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_hci_write_baud_rate
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMTK662xTypeInfo
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RDA_uart_write_array
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bccmd_boot_process
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_write_baud_rate
</UL>

<P><STRONG><a name="[12e]"></a>BuartSend</STRONG> (Thumb, 578 bytes, Stack size 32 bytes, buart.o(i.BuartSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSupervisionTimeout
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSupervisionTimeout
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendH4HciCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendScanDisableData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendScanEnableData
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartSendData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;H5_SendData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartH5RcvData
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBk3515HUart
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_RDA5876a
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackBuartIoInit_CSRBC6
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDeviceInit_RTL8761
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtk_DownloadPatch
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_baud_rate
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_bd_addr
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPatchArray
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_set_sleep
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_set_pcm_data
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_hci_write_bd_addr
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_hci_write_baud_rate
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_hci_set_radio
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_write_local_feature
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_mtk_patch_on
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MT6622_DownloadPatch
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMTK662xTypeInfo
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_mtk_set_xo_trim
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeBtBautRate
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rdabt_write_memory
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bccmd_boot_process
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_write_bd_addr
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_write_baud_rate
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtk_hci_send_cmd
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BROADCOM_IOP_TEST_RX
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BROADCOM_IOP_TEST_TX
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_write_pcm_mute_param
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_wrtie_sco_pcm_int_param
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_wrtie_sco_time_slot
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broadcom_write_sco_pcm_format
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_cmd
</UL>

<P><STRONG><a name="[78f]"></a>CacheInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, cache.o(i.CacheInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CacheInit
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdToCache
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[791]"></a>CheckFreeClus</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, fat.o(i.CheckFreeClus), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBitMapSec
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextClusNum
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFATSec
</UL>
<BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeClusAlloc
</UL>

<P><STRONG><a name="[795]"></a>CheckTimer</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timer_api.o(i.CheckTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CheckTimer &rArr; GetDiffMs
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDiffMs
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTick1MsCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcControlProcess
</UL>

<P><STRONG><a name="[797]"></a>ClearRxQueue</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wifi_uart_com.o(i.ClearRxQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ClearRxQueue &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiUpgradeMcuSoftMsg
</UL>

<P><STRONG><a name="[84a]"></a>ClkCurrentClkModeGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clk.o(i.ClkCurrentClkModeGet))
<BR><BR>[Called By]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashClkSet
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuartBaudClk
</UL>

<P><STRONG><a name="[798]"></a>ClkDpllClose</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, clk.o(i.ClkDpllClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClkDpllClose
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoDeepSleep
</UL>

<P><STRONG><a name="[79e]"></a>ClkFshcClkSelGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clk.o(i.ClkFshcClkSelGet))
<BR><BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetFshcClkFreq
</UL>

<P><STRONG><a name="[ec]"></a>ClkGetCurrentSysClkFreq</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, clk.o(i.ClkGetCurrentSysClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC48MHzTrimBy1MHz
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUseOsc32kCheckRc48m
</UL>
<BR>[Called By]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Set
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetFshcClkFreq
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_delay
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Set
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[79d]"></a>ClkGetFshcClkFreq</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, get_bootup_info.o(i.ClkGetFshcClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ClkGetFshcClkFreq &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetCurrentSysClkFreq
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkFshcClkSelGet
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79f]"></a>ClkMclkSel</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, clk.o(i.ClkMclkSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ClkMclkSel &rArr; Rst12p288GeneratorModule
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst12p288GeneratorModule
</UL>
<BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkMclkSelBySampleRate
</UL>

<P><STRONG><a name="[7a0]"></a>ClkMclkSelBySampleRate</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, clk.o(i.ClkMclkSelBySampleRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ClkMclkSelBySampleRate &rArr; ClkMclkSel &rArr; Rst12p288GeneratorModule
</UL>
<BR>[Calls]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkMclkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSampleRateSet
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacAdcSampleRateSet
</UL>

<P><STRONG><a name="[8ef]"></a>ClkModuleDivGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clk.o(i.ClkModuleDivGet))
<BR><BR>[Called By]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashClkSet
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcChannelGetValue
</UL>

<P><STRONG><a name="[97f]"></a>ClkModuleEn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, clk.o(i.ClkModuleEn))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>ClkModuleGateDis</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(i.ClkModuleGateDis))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashInfoInit
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCtrlRegInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntClr
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnableChannel
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisableChannel
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashWrite
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashErase
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashIOCtl
</UL>

<P><STRONG><a name="[f9]"></a>ClkModuleGateEn</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(i.ClkModuleGateEn))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashInfoInit
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCtrlRegInit
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntClr
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnableChannel
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisableChannel
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashWrite
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashErase
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashIOCtl
</UL>

<P><STRONG><a name="[7a1]"></a>ClkOsc32kNoNeedExtCapacitanceSet</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, clk.o(i.ClkOsc32kNoNeedExtCapacitanceSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ClkOsc32kNoNeedExtCapacitanceSet
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osc32kExtCapCalibrate
</UL>

<P><STRONG><a name="[7a2]"></a>ClkPorRcToDpll</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, clk.o(i.ClkPorRcToDpll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ClkPorRcToDpll
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[923]"></a>ClkSwitchDpllToRc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(i.ClkSwitchDpllToRc))
<BR><BR>[Called By]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoDeepSleep
</UL>

<P><STRONG><a name="[79b]"></a>ClkUseOsc32kCheckRc48m</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, clk.o(i.ClkUseOsc32kCheckRc48m))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ClkUseOsc32kCheckRc48m &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetCurrentSysClkFreq
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuartBaudClk
</UL>

<P><STRONG><a name="[7a3]"></a>ClrSCL</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c.o(i.ClrSCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ClrSCL &rArr; GpioClrRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteByte
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStart
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendNoAck
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendAck
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadByte
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cChkAck
</UL>

<P><STRONG><a name="[7a4]"></a>ClrSDA</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c.o(i.ClrSDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ClrSDA &rArr; GpioClrRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteByte
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStop
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStart
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendAck
</UL>

<P><STRONG><a name="[73d]"></a>CodecAdcAnaDeInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, audio_adc.o(i.CodecAdcAnaDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogModulePowerDwon
</UL>

<P><STRONG><a name="[743]"></a>CodecAdcAnaInit</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, audio_adc.o(i.CodecAdcAnaInit))
<BR><BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaInit
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
</UL>

<P><STRONG><a name="[7a5]"></a>CodecAdcChannelDisconnect</STRONG> (Thumb, 300 bytes, Stack size 0 bytes, audio_adc.o(i.CodecAdcChannelDisconnect))
<BR><BR>[Called By]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecAdcChannelSel
</UL>

<P><STRONG><a name="[73b]"></a>CodecAdcChannelSel</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, audio_adc.o(i.CodecAdcChannelSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CodecAdcChannelSel &rArr; CodecPgaSrcSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecPgaSrcSelect
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecFmSrcSelect
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecAdcChannelDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogModulePowerDwon
</UL>

<P><STRONG><a name="[77a]"></a>CodecAdcFmGainConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, audio_adc.o(i.CodecAdcFmGainConfig))
<BR><BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
</UL>

<P><STRONG><a name="[74c]"></a>CodecAdcMicGainConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, audio_adc.o(i.CodecAdcMicGainConfig))
<BR><BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
</UL>

<P><STRONG><a name="[7b8]"></a>CodecClockEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dac.o(i.CodecClockEnable))
<BR><BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacMuteSet
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecPgaSrcSelect
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecFmSrcSelect
</UL>

<P><STRONG><a name="[7b6]"></a>CodecClockRestore</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dac.o(i.CodecClockRestore))
<BR><BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacInit
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacMuteSet
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecPgaSrcSelect
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecFmSrcSelect
</UL>

<P><STRONG><a name="[7a8]"></a>CodecDacChannelDisconnect</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, dac.o(i.CodecDacChannelDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CodecDacChannelDisconnect &rArr; CodecMixPgaDisconnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixPgaDisconnect
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixLineinDisconnect
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixFmDisconnect
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixDacDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelSel
</UL>

<P><STRONG><a name="[73a]"></a>CodecDacChannelSel</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, dac.o(i.CodecDacChannelSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CodecDacChannelSel &rArr; CodecDacChannelDisconnect &rArr; CodecMixPgaDisconnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecPgainIsConnect
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixPgaConnect
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixLineinConnect
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixFmConnect
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixDacConnect
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecLineinIsConnect
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecFminIsConnect
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerInit
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDacOutSetChannel
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogModulePowerDwon
</UL>

<P><STRONG><a name="[73e]"></a>CodecDacDeinit</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dac.o(i.CodecDacDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CodecDacDeinit &rArr; CodecDacVmidChargeOp &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacVmidChargeOp
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogModulePowerDwon
</UL>

<P><STRONG><a name="[760]"></a>CodecDacInit</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, dac.o(i.CodecDacInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CodecDacInit &rArr; CodecDacVmidChargeOp &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacMonoConfig
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacDigitalMuteSet
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecClockRestore
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacPhaseDiffConfig
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacVmidChargeOp
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerInit
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDacOutSetChannel
</UL>

<P><STRONG><a name="[7b9]"></a>CodecDacIsAnaMute</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, dac.o(i.CodecDacIsAnaMute))
<BR><BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacMuteSet
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixDacDisconnect
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixDacConnect
</UL>

<P><STRONG><a name="[7ba]"></a>CodecDacIsSoftMute</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dac.o(i.CodecDacIsSoftMute))
<BR><BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacSoftMuteSet
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixDacDisconnect
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixDacConnect
</UL>

<P><STRONG><a name="[73c]"></a>CodecDacMuteSet</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, dac.o(i.CodecDacMuteSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CodecDacMuteSet &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecClockRestore
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecClockEnable
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacIsAnaMute
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogModulePowerDwon
</UL>

<P><STRONG><a name="[7b4]"></a>CodecDacVmidChargeOp</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dac.o(i.CodecDacVmidChargeOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CodecDacVmidChargeOp &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacInit
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacDeinit
</UL>

<P><STRONG><a name="[7a7]"></a>CodecFmSrcSelect</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, audio_adc.o(i.CodecFmSrcSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CodecFmSrcSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecClockRestore
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecAdcChannelSel
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixFmConnect
</UL>

<P><STRONG><a name="[7b0]"></a>CodecFminIsConnect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dac.o(i.CodecFminIsConnect))
<BR><BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelSel
</UL>

<P><STRONG><a name="[7ae]"></a>CodecLineinIsConnect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dac.o(i.CodecLineinIsConnect))
<BR><BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelSel
</UL>

<P><STRONG><a name="[742]"></a>CodecMicBiasEn</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, dac.o(i.CodecMicBiasEn))
<BR><BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaInit
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecPgaSrcSelect
</UL>

<P><STRONG><a name="[7ad]"></a>CodecMixDacConnect</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, dac.o(i.CodecMixDacConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CodecMixDacConnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacIsSoftMute
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacIsAnaMute
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelSel
</UL>

<P><STRONG><a name="[7a9]"></a>CodecMixDacDisconnect</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, dac.o(i.CodecMixDacDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CodecMixDacDisconnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacIsSoftMute
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacIsAnaMute
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelDisconnect
</UL>

<P><STRONG><a name="[7b1]"></a>CodecMixFmConnect</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, dac.o(i.CodecMixFmConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CodecMixFmConnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecFmSrcSelect
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelSel
</UL>

<P><STRONG><a name="[7ab]"></a>CodecMixFmDisconnect</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, dac.o(i.CodecMixFmDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CodecMixFmDisconnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelDisconnect
</UL>

<P><STRONG><a name="[7af]"></a>CodecMixLineinConnect</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, dac.o(i.CodecMixLineinConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CodecMixLineinConnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelSel
</UL>

<P><STRONG><a name="[7aa]"></a>CodecMixLineinDisconnect</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, dac.o(i.CodecMixLineinDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CodecMixLineinDisconnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelDisconnect
</UL>

<P><STRONG><a name="[7b3]"></a>CodecMixPgaConnect</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, dac.o(i.CodecMixPgaConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CodecMixPgaConnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelSel
</UL>

<P><STRONG><a name="[7ac]"></a>CodecMixPgaDisconnect</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dac.o(i.CodecMixPgaDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CodecMixPgaDisconnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelDisconnect
</UL>

<P><STRONG><a name="[7a6]"></a>CodecPgaSrcSelect</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, audio_adc.o(i.CodecPgaSrcSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CodecPgaSrcSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMicBiasEn
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecClockRestore
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecAdcChannelSel
</UL>

<P><STRONG><a name="[7b2]"></a>CodecPgainIsConnect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dac.o(i.CodecPgainIsConnect))
<BR><BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelSel
</UL>

<P><STRONG><a name="[7bb]"></a>CodingKeyInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, coding_key.o(i.CodingKeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CodingKeyInit &rArr; GpioIntEn &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInit
</UL>

<P><STRONG><a name="[7bd]"></a>CodingKeyScan</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, coding_key.o(i.CodingKeyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CodingKeyScan &rArr; IsTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
</UL>

<P><STRONG><a name="[7be]"></a>CommonMsgProccess</STRONG> (Thumb, 790 bytes, Stack size 8 bytes, sys_vol.o(i.CommonMsgProccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = CommonMsgProccess &rArr; WiFi_CmdProcess &rArr; Mcu_RcvWiFiCmd &rArr; Mcu_RcvWiFiDataProcess &rArr; WiFi_SendCmdToMcu &rArr; WiFiAppSetPlayMode &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysVol
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSoundRemindPlaying
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioSysInfoSetBreakPoint
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayerMute
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSendMessage
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcControlProcess
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuSyncWiFiVolume
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_CmdProcess
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiWorkStateSet
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiStateCheck
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiPowerOnInitStateGet
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayerSwitchEQ
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
</UL>

<P><STRONG><a name="[76c]"></a>DacAdcSampleRateGet</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, dac.o(i.DacAdcSampleRateGet))
<BR><BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAudioProcess
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayerSwitchEQ
</UL>

<P><STRONG><a name="[75f]"></a>DacAdcSampleRateSet</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, dac.o(i.DacAdcSampleRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DacAdcSampleRateSet &rArr; ClkMclkSelBySampleRate &rArr; ClkMclkSel &rArr; Rst12p288GeneratorModule
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmFifoClear
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkMclkSelBySampleRate
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioSampleRateSet
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerInit
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioI2sOutSetChannel
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDacOutSetChannel
</UL>

<P><STRONG><a name="[75e]"></a>DacConfig</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, dac.o(i.DacConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DacConfig &rArr; __IsFunction__
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsFunction__
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerInit
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDacOutSetChannel
</UL>

<P><STRONG><a name="[7b5]"></a>DacDigitalMuteSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dac.o(i.DacDigitalMuteSet))
<BR><BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacInit
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiTalkStateSet
</UL>

<P><STRONG><a name="[7c6]"></a>DacDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dac.o(i.DacDisable))
<BR><BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacConfig
</UL>

<P><STRONG><a name="[765]"></a>DacMonoConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dac.o(i.DacMonoConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DacMonoConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutputInit
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacInit
</UL>

<P><STRONG><a name="[7b7]"></a>DacPhaseDiffConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dac.o(i.DacPhaseDiffConfig))
<BR><BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacInit
</UL>

<P><STRONG><a name="[759]"></a>DacSoftMuteSet</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dac.o(i.DacSoftMuteSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = DacSoftMuteSet &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacIsSoftMute
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerInit
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayerMute
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAudioProcess
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDacOutSetChannel
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiTalkStateSet
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiMuteStateSet
</UL>

<P><STRONG><a name="[85b]"></a>DacVolumeSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dac.o(i.DacVolumeSet))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiTalkStateSet
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiMuteStateSet
</UL>

<P><STRONG><a name="[d4]"></a>DecoderTaskEntrance</STRONG> (Thumb, 420 bytes, Stack size 0 bytes, task_decoder.o(i.DecoderTaskEntrance))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = DecoderTaskEntrance &rArr; MsgRecv &rArr; SysDeviceMsgCtrl &rArr; GotoNextMode &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_seek
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStop
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStart
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAddSet
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgRecv
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[7e2]"></a>DecoderTaskIsSongEnd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, task_decoder.o(i.DecoderTaskIsSongEnd))
<BR><BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
</UL>

<P><STRONG><a name="[768]"></a>DecoderTaskPause</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, task_decoder.o(i.DecoderTaskPause))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DecoderTaskPause &rArr; DecoderTaskWaitResp &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerMute
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskWaitResp
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayerMute
</UL>

<P><STRONG><a name="[7da]"></a>DecoderTaskPlayStart</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, task_decoder.o(i.DecoderTaskPlayStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = DecoderTaskPlayStart &rArr; DecoderTaskWaitResp &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskWaitResp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
</UL>

<P><STRONG><a name="[76a]"></a>DecoderTaskResume</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, task_decoder.o(i.DecoderTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DecoderTaskResume &rArr; DecoderTaskWaitResp &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerUnmute
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskWaitResp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayerMute
</UL>

<P><STRONG><a name="[7db]"></a>DecoderTaskSeek</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, task_decoder.o(i.DecoderTaskSeek), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskWaitResp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePlayCtrlProcess
</UL>

<P><STRONG><a name="[7dc]"></a>DecoderTaskStop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, task_decoder.o(i.DecoderTaskStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DecoderTaskStop &rArr; DecoderTaskWaitResp &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerMute
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskWaitResp
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
</UL>

<P><STRONG><a name="[7dd]"></a>DecoderTaskSyncPlay</STRONG> (Thumb, 564 bytes, Stack size 48 bytes, task_decoder.o(i.DecoderTaskSyncPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = DecoderTaskSyncPlay &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerUnmute
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerMute
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerConfigVolume
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerConfigFormat
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacSoftMuteSet
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacAdcSampleRateGet
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioSampleRateSet
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskStop
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskPlayStart
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskIsSongEnd
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSlaveSounBoxCntGet
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetQuickResponseFlag
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerSetFadeSpeed
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQuickResponseFlag
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutputInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
</UL>

<P><STRONG><a name="[21a]"></a>DelayMs</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, setup.o(i.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacSoftMuteSet
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskStop
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskPause
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffControl
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuSetPlayMode
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuGetWiFiPlayStateParams
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitorInit
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSetWakeUpSrcInDeepSleep
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAdjustVolInit
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiStateCheck
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacInit
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioI2sOutSetChannel
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDacOutSetChannel
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacMuteSet
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSetWakeUpSrcInPowerDown
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiUpgradeMcuSoftMsg
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiTalkStateSet
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetProjectParams
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixPgaDisconnect
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixPgaConnect
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixLineinDisconnect
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixLineinConnect
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixFmDisconnect
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixFmConnect
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixDacDisconnect
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecMixDacConnect
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacVmidChargeOp
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacDeinit
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitMs
</UL>

<P><STRONG><a name="[7e5]"></a>DeviceDetect</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, dev_detect_driver.o(i.DeviceDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DeviceDetect &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgClear
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMicInLink
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLineInLink
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[777]"></a>DigitalGainSet</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, sys_vol.o(i.DigitalGainSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DigitalGainSet
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioProcessTaskEntrance
</UL>

<P><STRONG><a name="[7e9]"></a>DirEnterParentFolder</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, dir.o(i.DirEnterParentFolder), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDirSec
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderGetInfo
</UL>

<P><STRONG><a name="[7eb]"></a>DirEnterSonFolder</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, dir.o(i.DirEnterSonFolder), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDirSec
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecNum
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileOpenByNum
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderGetInfo
</UL>

<P><STRONG><a name="[7ed]"></a>DirFindNextFolder</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, dir.o(i.DirFindNextFolder), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirGetNextEntry
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDirSec
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileOpenByNum
</UL>

<P><STRONG><a name="[7ee]"></a>DirGetNextEntry</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, dir.o(i.DirGetNextEntry), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDirSec
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSecNum
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileOpenByNum
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderGetInfo
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirFindNextFolder
</UL>

<P><STRONG><a name="[7f0]"></a>DirGetSonClusNum</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dir.o(i.DirGetSonClusNum), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDirSec
</UL>
<BR>[Called By]<UL><LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileGetInfo
</UL>

<P><STRONG><a name="[7f1]"></a>DirGetSonSecNum</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dir.o(i.DirGetSonSecNum), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDirSec
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecNum
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
</UL>

<P><STRONG><a name="[7f2]"></a>DirSetSonClusNum</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dir.o(i.DirSetSonClusNum), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDirSec
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatSaveDirSec
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
</UL>

<P><STRONG><a name="[7f4]"></a>DirSetStartEntry</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dir.o(i.DirSetStartEntry), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDirSec
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSINFO_InitOpenFolder
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSINFO_FindLastNode
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderGetInfo
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSINFO_InitOpenFile
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
</UL>

<P><STRONG><a name="[7f5]"></a>DispInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, led_display.o(i.DispInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DispInit &rArr; SingleLedFlushDispInit &rArr; PwmEnableChannel &rArr; GpioClrRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleLedFlushDispInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f7]"></a>DispMute</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_display.o(i.DispMute))
<BR><BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSendMessage
</UL>

<P><STRONG><a name="[7bf]"></a>DispSendMessage</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, led_display.o(i.DispSendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DispSendMessage &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMute
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuAlarmTime
</UL>

<P><STRONG><a name="[7f8]"></a>Display</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led_display.o(i.Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Display &rArr; LedFlushDisp &rArr; SingleLedChangeDutyFunc &rArr; PwmEnableChannel &rArr; GpioClrRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedFlushDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7fe]"></a>DualBankDataSaveFlash</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wifi_control.o(i.DualBankDataSaveFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DualBankDataSaveFlash &rArr; SpiFlashWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiUpgradeMcuSoftRunning
</UL>

<P><STRONG><a name="[800]"></a>DualBankDataUpgrade</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, wifi_control.o(i.DualBankDataUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = DualBankDataUpgrade &rArr; BP_SaveInfo &rArr; SaveBPInfoToFlash &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_SaveInfo
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_GetInfo
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpMuteControl
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioPorSysReset
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSoundRemindStateSet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiWorkStateSet
</UL>

<P><STRONG><a name="[802]"></a>DualBankFlashErase</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, wifi_control.o(i.DualBankFlashErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DualBankFlashErase &rArr; AmpMuteControl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpMuteControl
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashErase
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgDis
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSoundRemindStateSet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiUpgradeMcuSoftMsg
</UL>

<P><STRONG><a name="[9ad]"></a>ENTER_CRITICAL_SECTION</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, setup.o(i.ENTER_CRITICAL_SECTION))
<BR><BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[9ae]"></a>EXIT_CRITICAL_SECTION</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, setup.o(i.EXIT_CRITICAL_SECTION))
<BR><BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[981]"></a>EnableSwUartAsFuart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i.EnableSwUartAsFuart))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[815]"></a>EqDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eq.o(i.EqDisable))
<BR><BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqStyleSelect
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAudioProcess
</UL>

<P><STRONG><a name="[816]"></a>EqEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eq.o(i.EqEnable))
<BR><BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqStyleSelect
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAudioProcess
</UL>

<P><STRONG><a name="[804]"></a>EqFilterCoefsCalculate</STRONG> (Thumb, 1846 bytes, Stack size 112 bytes, eq.o(i.EqFilterCoefsCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = EqFilterCoefsCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqStyleConfigure
</UL>

<P><STRONG><a name="[814]"></a>EqStyleConfigure</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, eq.o(i.EqStyleConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = EqStyleConfigure &rArr; EqFilterCoefsCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqStyleSelect
</UL>

<P><STRONG><a name="[986]"></a>EqStyleInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, eq_params.o(i.EqStyleInit))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76d]"></a>EqStyleNameGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eq_params.o(i.EqStyleNameGet))
<BR><BR>[Called By]<UL><LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayerSwitchEQ
</UL>

<P><STRONG><a name="[76e]"></a>EqStyleSelect</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eq_params.o(i.EqStyleSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = EqStyleSelect &rArr; EqStyleConfigure &rArr; EqFilterCoefsCalculate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqDisable
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqEnable
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqStyleConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAudioProcess
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayerSwitchEQ
</UL>

<P><STRONG><a name="[817]"></a>ExFatFileGetFullName</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, exfat.o(i.ExFatFileGetFullName), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneSec
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSecNum
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileGetLongName
</UL>

<P><STRONG><a name="[819]"></a>ExFatReadDirSec</STRONG> (Thumb, 478 bytes, Stack size 48 bytes, exfat.o(i.ExFatReadDirSec), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExfatFullName2ShortName
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneSec
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSecNum
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDirSec
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatSaveDirSec
</UL>

<P><STRONG><a name="[7f3]"></a>ExFatSaveDirSec</STRONG> (Thumb, 1926 bytes, Stack size 200 bytes, exfat.o(i.ExFatSaveDirSec), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBitMapSec
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBitMapSec
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatReadDirSec
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSecNum
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDirSec
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirSetSonClusNum
</UL>

<P><STRONG><a name="[81a]"></a>ExfatFullName2ShortName</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, exfat.o(i.ExfatFullName2ShortName), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringConvert
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatReadDirSec
</UL>

<P><STRONG><a name="[5]"></a>FSContextBufferAlloc</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fsmount_buffermanager.o(i.FSContextBufferAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = FSContextBufferAlloc &rArr; FsSyncInit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsSyncInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsmount_buffermanager.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>FSContextBufferFree</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fsmount_buffermanager.o(i.FSContextBufferFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSContextBufferFree &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsmount_buffermanager.o(.data)
</UL>
<P><STRONG><a name="[820]"></a>FSDeInit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, presearch.o(i.FSDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FSDeInit &rArr; FsLock
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsLock
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsMount
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsGetLogicIdByDeviceType
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsGetContextByDeviceType
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsUnLock
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceMsgCtrl
</UL>

<P><STRONG><a name="[825]"></a>FSINFO_FindLastNode</STRONG> (Thumb, 642 bytes, Stack size 40 bytes, fsinfo.o(i.FSINFO_FindLastNode), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirSetStartEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderGetInfo
</UL>

<P><STRONG><a name="[826]"></a>FSINFO_InitOpenFile</STRONG> (Thumb, 1188 bytes, Stack size 24 bytes, fsinfo.o(i.FSINFO_InitOpenFile), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirSetStartEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileOpenByNum
</UL>

<P><STRONG><a name="[827]"></a>FSINFO_InitOpenFolder</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, fsinfo.o(i.FSINFO_InitOpenFolder), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirSetStartEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
</UL>

<P><STRONG><a name="[1fd]"></a>FileClose</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, fat_file.o(i.FileClose), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsLock
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsUnLock
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFatSec
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDirSec
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDirSec
</UL>
<BR>[Called By]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveFileSystemProcess
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fclose
</UL>

<P><STRONG><a name="[1f9]"></a>FileEOF</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fat_file.o(i.FileEOF))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_feof
</UL>

<P><STRONG><a name="[82a]"></a>FileGetInfo</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, fat_file.o(i.FileGetInfo), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsGetCurContext
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDirSec
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirGetSonClusNum
</UL>
<BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileOpenByNum
</UL>

<P><STRONG><a name="[82b]"></a>FileGetLongName</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, fat_file.o(i.FileGetLongName), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsLock
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsUnLock
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatFileGetFullName
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLongName
</UL>
<BR>[Called By]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveFileSystemProcess
</UL>

<P><STRONG><a name="[830]"></a>FileGetType</STRONG> (Thumb, 374 bytes, Stack size 8 bytes, presearch.o(i.FileGetType), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileOpenByNum
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderGetInfo
</UL>

<P><STRONG><a name="[82d]"></a>FileOpenByNum</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, fat_file.o(i.FileOpenByNum), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsLock
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileGetType
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RewindFolderStart
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsGetCurContext
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirGetNextEntry
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirEnterSonFolder
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsUnLock
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidityCheck
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSINFO_InitOpenFile
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileGetInfo
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirFindNextFolder
</UL>
<BR>[Called By]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveFileSystemProcess
</UL>

<P><STRONG><a name="[1f1]"></a>FileRead</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, fat_file.o(i.FileRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileReadCallBack
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FileRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fread
</UL>

<P><STRONG><a name="[832]"></a>FileReadCallBack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fat_file.o(i.FileReadCallBack))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileRead
</UL>

<P><STRONG><a name="[1f7]"></a>FileSeek</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, fat_file.o(i.FileSeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = FileSeek &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsLock
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEntryNoFatChain
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsUnLock
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextClusNum
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStart
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fseek
</UL>

<P><STRONG><a name="[1fb]"></a>FileSof</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fat_file.o(i.FileSof))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fsof
</UL>

<P><STRONG><a name="[1f5]"></a>FileTell</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fat_file.o(i.FileTell))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_ftell
</UL>

<P><STRONG><a name="[1f3]"></a>FileWrite</STRONG> (Thumb, 1064 bytes, Stack size 40 bytes, fat_file.o(i.FileWrite), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsLock
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEntryNoFatChain
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirSetStartEntry
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirGetNextEntry
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsUnLock
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFat
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFolderNoFatChain
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextClusNum
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOneSec
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneSec
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecNum
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeClusAlloc
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirSetSonClusNum
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_fwrite
</UL>

<P><STRONG><a name="[1ea]"></a>FlashSave8DevRec</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, bte2prom.o(i.FlashSave8DevRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = FlashSave8DevRec &rArr; FlshPairedListSync &rArr; FlshSavePairedList &rArr; FlshUpdateAllPairedList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashWrite
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshSavePairedList
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshPairedListSync
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshGetPairingInfoWriteOffset
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshGetBtPairingInfoOffsetCallBk
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_DeleteRecord
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_AddRecord
</UL>

<P><STRONG><a name="[83d]"></a>FlashUnlock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sys_app.o(i.FlashUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FlashUnlock &rArr; SpiFlashIOCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashIOCtl
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83e]"></a>FlshBTInfoAreaInit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bte2prom.o(i.FlshBTInfoAreaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FlshBTInfoAreaInit &rArr; SpiFlashWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashWrite
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashErase
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e2]"></a>FlshLoad1of8Dev</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, bte2prom.o(i.FlshLoad1of8Dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = FlshLoad1of8Dev &rArr; FlshPairedListSync &rArr; FlshSavePairedList &rArr; FlshUpdateAllPairedList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshSavePairedList
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshPairedListSync
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshGetBtPairingInfoOffsetCallBk
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_Open
</UL>

<P><STRONG><a name="[842]"></a>FolderGetInfo</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, folder.o(i.FolderGetInfo), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileGetType
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEntryNoFatChain
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirSetStartEntry
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirGetNextEntry
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirEnterSonFolder
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSINFO_FindLastNode
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFolderNoFatChain
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirEnterParentFolder
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
</UL>

<P><STRONG><a name="[843]"></a>FolderGetLongName</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, folder.o(i.FolderGetLongName), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsLock
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsUnLock
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLongName
</UL>
<BR>[Called By]<UL><LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveFileSystemProcess
</UL>

<P><STRONG><a name="[844]"></a>FolderOpenByNum</STRONG> (Thumb, 716 bytes, Stack size 40 bytes, folder.o(i.FolderOpenByNum), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsLock
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileGetType
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEntryNoFatChain
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RewindFolderStart
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsGetCurContext
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirSetStartEntry
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirGetNextEntry
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirEnterSonFolder
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsUnLock
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValidFolderNum
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSINFO_InitOpenFolder
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderGetInfo
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFolderNoFatChain
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirGetSonSecNum
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirFindNextFolder
</UL>
<BR>[Called By]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePlayCtrlProcess
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveFileSystemProcess
</UL>

<P><STRONG><a name="[836]"></a>FreeClusAlloc</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, fat.o(i.FreeClusAlloc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBitMapSec
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBitMapSec
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextClusNum
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFatItem
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFreeClus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
</UL>

<P><STRONG><a name="[822]"></a>FsGetContextByDeviceType</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fs_mount.o(i.FsGetContextByDeviceType))
<BR><BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDeInit
</UL>

<P><STRONG><a name="[788]"></a>FsGetCurContext</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_mount.o(i.FsGetCurContext))
<BR><BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootUpgradeChk
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileOpenByNum
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileGetInfo
</UL>

<P><STRONG><a name="[821]"></a>FsGetLogicIdByDeviceType</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_mount.o(i.FsGetLogicIdByDeviceType))
<BR><BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDeInit
</UL>

<P><STRONG><a name="[789]"></a>FsLock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, presearch.o(i.FsLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FsLock
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSeek
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootUpgradeChk
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDeInit
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderGetLongName
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileOpenByNum
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileGetLongName
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileClose
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FileRead
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
</UL>

<P><STRONG><a name="[823]"></a>FsMount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_mount.o(i.FsMount))
<BR><BR>[Called By]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDeInit
</UL>

<P><STRONG><a name="[81f]"></a>FsSyncInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, presearch.o(i.FsSyncInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = FsSyncInit &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_waitqueue_head
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atomic_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSContextBufferAlloc
</UL>

<P><STRONG><a name="[824]"></a>FsUnLock</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, presearch.o(i.FsUnLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FsUnLock
</UL>
<BR>[Calls]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up_op
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSeek
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDeInit
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderGetLongName
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileOpenByNum
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileGetLongName
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileClose
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FileRead
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
</UL>

<P><STRONG><a name="[97c]"></a>FuartSend</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, fuart.o(i.FuartSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FuartSend
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[725]"></a>GetAdcAdjustVolIndexVal</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, adc_adjust_vol.o(i.GetAdcAdjustVolIndexVal))
<BR><BR>[Called By]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAdjustVolScan
</UL>

<P><STRONG><a name="[72d]"></a>GetAdcKeyIndex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adc_key.o(i.GetAdcKeyIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetAdcKeyIndex &rArr; AdcChannelKeyGet &rArr; SarAdcChannelGetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcChannelKeyGet
</UL>
<BR>[Called By]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcKeyScan
</UL>

<P><STRONG><a name="[850]"></a>GetAdcKeyState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc_key.o(i.GetAdcKeyState))
<BR><BR>[Called By]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyState
</UL>

<P><STRONG><a name="[98c]"></a>GetBootVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, get_bootup_info.o(i.GetBootVersion))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98a]"></a>GetBootVersionEx</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, get_bootup_info.o(i.GetBootVersionEx))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84e]"></a>GetBuartDevInfoId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, buart.o(i.GetBuartDevInfoId))
<BR><BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceClassType
</UL>

<P><STRONG><a name="[84b]"></a>GetCodeEncryptedInfo</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, get_bootup_info.o(i.GetCodeEncryptedInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetCodeEncryptedInfo &rArr; SpiFlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84c]"></a>GetCodeSize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, get_bootup_info.o(i.GetCodeSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetCodeSize &rArr; SpiFlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[781]"></a>GetCrc8CheckSum</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, breakpoint.o(i.GetCrc8CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetCrc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_SaveInfo
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_LoadInfo
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBakBPInfo
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBakBPInfo
</UL>

<P><STRONG><a name="[8bf]"></a>GetCurBatterLevelAverage</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, power_management.o(i.GetCurBatterLevelAverage))
<BR><BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiStateCheck
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLdoinLevelMonitor
</UL>

<P><STRONG><a name="[84d]"></a>GetDeviceClassType</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gpio.o(i.GetDeviceClassType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDeviceClassType
</UL>
<BR>[Calls]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuartDevInfoId
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__IsFunction2__
</UL>

<P><STRONG><a name="[7fc]"></a>GetEarthlyBranch</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtc_lunar.o(i.GetEarthlyBranch))
<BR><BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayLunarDate
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRtcProcess
</UL>

<P><STRONG><a name="[7fd]"></a>GetHeavenlyStem</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtc_lunar.o(i.GetHeavenlyStem))
<BR><BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayLunarDate
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRtcProcess
</UL>

<P><STRONG><a name="[84f]"></a>GetKeyState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key.o(i.GetKeyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyState
</UL>
<BR>[Calls]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcKeyState
</UL>
<BR>[Called By]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
</UL>

<P><STRONG><a name="[991]"></a>GetLibVersionDriver</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(i.GetLibVersionDriver))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[992]"></a>GetLibVersionFreertos</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setup.o(i.GetLibVersionFreertos))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[993]"></a>GetLibVersionFs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsinfo.o(i.GetLibVersionFs))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82c]"></a>GetLongName</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, dir.o(i.GetLongName), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneSec
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSecNum
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderGetLongName
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileGetLongName
</UL>

<P><STRONG><a name="[92c]"></a>GetModeSwitchState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_app.o(i.GetModeSwitchState), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserProcSppData
</UL>

<P><STRONG><a name="[793]"></a>GetNextClusNum</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fat.o(i.GetNextClusNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetNextClusNum &rArr; ReadFATSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFATSec
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSeek
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFat
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FileRead
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextSecNum
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeClusAlloc
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFreeClus
</UL>

<P><STRONG><a name="[862]"></a>GetNextModeId</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, dev_state_machine.o(i.GetNextModeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetNextModeId
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceMsgCtrl
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSysModeProcess
</UL>

<P><STRONG><a name="[7ef]"></a>GetNextSecNum</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fat.o(i.GetNextSecNum), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextClusNum
</UL>
<BR>[Called By]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirGetNextEntry
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatReadDirSec
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatFileGetFullName
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatSaveDirSec
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLongName
</UL>

<P><STRONG><a name="[98b]"></a>GetPatchVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, get_bootup_info.o(i.GetPatchVersion))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[903]"></a>GetPlayState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, player_control.o(i.GetPlayState), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePlayCtrlProcess
</UL>

<P><STRONG><a name="[d3]"></a>GetQuickResponseFlag</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dev_detect_driver.o(i.GetQuickResponseFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GetQuickResponseFlag &rArr; SetQuickResponseFlag &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetQuickResponseFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[899]"></a>GetRxQueueData</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wifi_uart_com.o(i.GetRxQueueData))
<BR><BR>[Called By]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_RcvWiFiCmd
</UL>

<P><STRONG><a name="[851]"></a>GetSDA</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, i2c.o(i.GetSDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetSDA
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioGetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadByte
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cChkAck
</UL>

<P><STRONG><a name="[852]"></a>GetSdkVer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, get_bootup_info.o(i.GetSdkVer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetSdkVer &rArr; SpiFlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7ec]"></a>GetSecNum</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fat.o(i.GetSecNum))
<BR><BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirEnterSonFolder
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FileRead
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirGetSonSecNum
</UL>

<P><STRONG><a name="[995]"></a>GetSilenceMuteFlag</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys_vol.o(i.GetSilenceMuteFlag))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[961]"></a>GetSingleLedDispMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, singled_display.o(i.GetSingleLedDispMode))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[78d]"></a>GetSysTick1MsCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, setup.o(i.GetSysTick1MsCnt))
<BR><BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PastTimeGet
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimer
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDiffMs
</UL>

<P><STRONG><a name="[845]"></a>GetValidFolderNum</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, fsinfo.o(i.GetValidFolderNum), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
</UL>

<P><STRONG><a name="[98e]"></a>GetWakeupSrcName</STRONG> (Thumb, 250 bytes, Stack size 0 bytes, get_bootup_info.o(i.GetWakeupSrcName))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[889]"></a>GetWiFiAlarmRemindState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wifi_control.o(i.GetWiFiAlarmRemindState))
<BR><BR>[Called By]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
</UL>

<P><STRONG><a name="[854]"></a>GpioA0SetMode</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gpio.o(i.GpioA0SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpioA0SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[935]"></a>GpioBuartRxIoConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(i.GpioBuartRxIoConfig))
<BR><BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControlGpioInit
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_UartInit
</UL>

<P><STRONG><a name="[936]"></a>GpioBuartTxIoConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(i.GpioBuartTxIoConfig))
<BR><BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControlGpioInit
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_UartInit
</UL>

<P><STRONG><a name="[882]"></a>GpioClrRegBits</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, gpio.o(i.GpioClrRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GpioClrRegBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwUartTxInit
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInCharge
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoDeepSleepGpioCfg
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveGpioProcess
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoPowerDownGpioCfg
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftPowerKeyDetect
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChargeFull
</UL>

<P><STRONG><a name="[737]"></a>GpioClrRegOneBit</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, gpio.o(i.GpioClrRegOneBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GpioClrRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffControl
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControlGpioInit
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerOnControl
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpMuteControl
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntEn
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodingKeyInit
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtMtkRestEn
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtMtkLDOEn
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtLDOEn
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcGpioSel
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnableChannel
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDevicePowerOff
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInputSDA
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSDA
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSCL
</UL>

<P><STRONG><a name="[10f]"></a>GpioGetReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.GpioGetReg))
<BR><BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInCharge
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntFlagGet
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInterrupt
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveGpioProcess
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDA
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftPowerKeyDetect
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChargeFull
</UL>

<P><STRONG><a name="[878]"></a>GpioI2sIoConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gpio.o(i.GpioI2sIoConfig))
<BR><BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControlGpioInit
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sPortSet
</UL>

<P><STRONG><a name="[10e]"></a>GpioIntClr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio.o(i.GpioIntClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GpioIntClr &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateEn
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateDis
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_gpio_c_0b4f8ea1____DISABLE_IRQ
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_gpio_c_0b4f8ea1____ENABLE_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInterrupt
</UL>

<P><STRONG><a name="[7bc]"></a>GpioIntEn</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gpio.o(i.GpioIntEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GpioIntEn &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodingKeyInit
</UL>

<P><STRONG><a name="[10d]"></a>GpioIntFlagGet</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, gpio.o(i.GpioIntFlagGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GpioIntFlagGet
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioGetReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInterrupt
</UL>

<P><STRONG><a name="[879]"></a>GpioMclkIoConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(i.GpioMclkIoConfig))
<BR><BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControlGpioInit
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sPortSet
</UL>

<P><STRONG><a name="[78a]"></a>GpioPorSysReset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GpioPorSysReset))
<BR><BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootUpgradeChk
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankDataUpgrade
</UL>

<P><STRONG><a name="[857]"></a>GpioSetReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(i.GpioSetReg))
<BR><BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntEn
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveGpioProcess
</UL>

<P><STRONG><a name="[881]"></a>GpioSetRegBits</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, gpio.o(i.GpioSetRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GpioSetRegBits
</UL>
<BR>[Called By]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwUartTxInit
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInCharge
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoDeepSleepGpioCfg
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveGpioProcess
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoPowerDownGpioCfg
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftPowerKeyDetect
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChargeFull
</UL>

<P><STRONG><a name="[736]"></a>GpioSetRegOneBit</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, gpio.o(i.GpioSetRegOneBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GpioSetRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemStandbyControl
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffControl
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControlGpioInit
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerOnControl
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpMuteControl
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntEn
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioIntClr
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtMtkRestEn
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtMtkLDOEn
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtLDOEn
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcGpioSel
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDevicePowerOff
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSDA
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSCL
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputSDA
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputSCL
</UL>

<P><STRONG><a name="[d5]"></a>GuiTaskEntrance</STRONG> (Thumb, 516 bytes, Stack size 0 bytes, task_main.o(i.GuiTaskEntrance))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = GuiTaskEntrance &rArr; WiFiControl &rArr; CommonMsgProccess &rArr; WiFi_CmdProcess &rArr; Mcu_RcvWiFiCmd &rArr; Mcu_RcvWiFiDataProcess &rArr; WiFi_SendCmdToMcu &rArr; WiFiAppSetPlayMode &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSlaveSounBoxCntGet
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemStandbyControl
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffControl
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SilenceMuteDetInit
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysVol
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetQuickResponseFlag
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgClearClass
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAddSet
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuSetPlayMode
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuGetWiFiPlayStateParams
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextModeId
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_SaveInfo
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_GetInfo
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControlGpioInit
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInCharge
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacVolumeSet
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutputInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[877]"></a>I2SCurrWritePointGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2s.o(i.I2SCurrWritePointGet))
<BR><BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sPmemPcmRemainLenGet
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sPcmDataRead
</UL>

<P><STRONG><a name="[864]"></a>I2cChkAck</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, i2c.o(i.I2cChkAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2cChkAck &rArr; SetSCL &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSCL
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInputSDA
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDA
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSCL
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteByte
</UL>

<P><STRONG><a name="[868]"></a>I2cMasterCreate</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, i2c.o(i.I2cMasterCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2cMasterCreate &rArr; I2cInfoInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cInfoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAt8563tInit
</UL>

<P><STRONG><a name="[869]"></a>I2cReadByte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, i2c.o(i.I2cReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2cReadByte &rArr; SetSCL &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSCL
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputSDA
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInputSDA
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDA
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSCL
</UL>
<BR>[Called By]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadBytes
</UL>

<P><STRONG><a name="[86b]"></a>I2cReadBytes</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, i2c.o(i.I2cReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2cReadBytes &rArr; I2cReadByte &rArr; SetSCL &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendNoAck
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendAck
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadNByte
</UL>

<P><STRONG><a name="[86e]"></a>I2cReadNByte</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, i2c.o(i.I2cReadNByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = I2cReadNByte &rArr; I2cSendAddr &rArr; I2cWriteByte &rArr; I2cChkAck &rArr; SetSCL &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStop
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendAddr
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetAt8563tAlarmTime
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAt8563tReadParam
</UL>

<P><STRONG><a name="[86d]"></a>I2cSendAck</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i2c.o(i.I2cSendAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2cSendAck &rArr; SetSCL &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSCL
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSDA
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSCL
</UL>
<BR>[Called By]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadBytes
</UL>

<P><STRONG><a name="[86f]"></a>I2cSendAddr</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, i2c.o(i.I2cSendAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2cSendAddr &rArr; I2cWriteByte &rArr; I2cChkAck &rArr; SetSCL &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteByte
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStop
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStart
</UL>
<BR>[Called By]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteNByte
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadNByte
</UL>

<P><STRONG><a name="[86c]"></a>I2cSendNoAck</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i2c.o(i.I2cSendNoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2cSendNoAck &rArr; SetSDA &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSDA
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSCL
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSCL
</UL>
<BR>[Called By]<UL><LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadBytes
</UL>

<P><STRONG><a name="[871]"></a>I2cStart</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, i2c.o(i.I2cStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2cStart &rArr; SetSDA &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSDA
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSCL
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputSDA
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputSCL
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSDA
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSCL
</UL>
<BR>[Called By]<UL><LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendAddr
</UL>

<P><STRONG><a name="[870]"></a>I2cStop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, i2c.o(i.I2cStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2cStop &rArr; SetSDA &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSDA
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSCL
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputSDA
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputSCL
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetInputSDA
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSDA
</UL>
<BR>[Called By]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteNByte
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendAddr
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadNByte
</UL>

<P><STRONG><a name="[872]"></a>I2cWriteByte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, i2c.o(i.I2cWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2cWriteByte &rArr; I2cChkAck &rArr; SetSCL &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSDA
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSCL
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputSDA
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cChkAck
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSDA
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSCL
</UL>
<BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteBytes
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendAddr
</UL>

<P><STRONG><a name="[875]"></a>I2cWriteBytes</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, i2c.o(i.I2cWriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = I2cWriteBytes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteNByte
</UL>

<P><STRONG><a name="[876]"></a>I2cWriteNByte</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, i2c.o(i.I2cWriteNByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = I2cWriteNByte &rArr; I2cWriteBytes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteBytes
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStop
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetAt8563tSystemTime
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetAt8563tAlarmTime
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAt8563tWriteParam
</UL>

<P><STRONG><a name="[77c]"></a>I2sClassdMasterModeSet</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, i2s.o(i.I2sClassdMasterModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2sClassdMasterModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
</UL>

<P><STRONG><a name="[77b]"></a>I2sClassdSTASampleRateSet</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, i2s.o(i.I2sClassdSTASampleRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2sClassdSTASampleRateSet &rArr; I2sSampleRateSet &rArr; ClkMclkSelBySampleRate &rArr; ClkMclkSel &rArr; Rst12p288GeneratorModule
</UL>
<BR>[Calls]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sSampleRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
</UL>

<P><STRONG><a name="[746]"></a>I2sInToPmemConfig</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, i2s.o(i.I2sInToPmemConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2sInToPmemConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmemDataPathSel
</UL>
<BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaInit
</UL>

<P><STRONG><a name="[776]"></a>I2sPcmDataRead</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, i2s.o(i.I2sPcmDataRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2sPcmDataRead &rArr; PcmDataExtract
</UL>
<BR>[Calls]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmDataExtract
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SCurrWritePointGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioProcessTaskEntrance
</UL>

<P><STRONG><a name="[771]"></a>I2sPmemPcmRemainLenGet</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, i2s.o(i.I2sPmemPcmRemainLenGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2sPmemPcmRemainLenGet
</UL>
<BR>[Calls]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SCurrWritePointGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioProcessTaskEntrance
</UL>

<P><STRONG><a name="[750]"></a>I2sPortSet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_vol.o(i.I2sPortSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2sPortSet
</UL>
<BR>[Calls]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMclkIoConfig
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioI2sIoConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioSampleRateSet
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutputInit
</UL>

<P><STRONG><a name="[751]"></a>I2sSampleRateSet</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, i2s.o(i.I2sSampleRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2sSampleRateSet &rArr; ClkMclkSelBySampleRate &rArr; ClkMclkSel &rArr; Rst12p288GeneratorModule
</UL>
<BR>[Calls]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkMclkSelBySampleRate
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioSampleRateSet
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sClassdSTASampleRateSet
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioI2sOutSetChannel
</UL>

<P><STRONG><a name="[753]"></a>I2sSetMasterMode</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, i2s.o(i.I2sSetMasterMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2sSetMasterMode
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioI2sOutSetChannel
</UL>

<P><STRONG><a name="[745]"></a>I2sWritePmemDis</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2s.o(i.I2sWritePmemDis))
<BR><BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaInit
</UL>

<P><STRONG><a name="[754]"></a>I2sWritePmemEn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2s.o(i.I2sWritePmemEn))
<BR><BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
</UL>

<P><STRONG><a name="[861]"></a>IdleControl</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, idle_control.o(i.IdleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = IdleControl &rArr; CommonMsgProccess &rArr; WiFi_CmdProcess &rArr; Mcu_RcvWiFiCmd &rArr; Mcu_RcvWiFiDataProcess &rArr; WiFi_SendCmdToMcu &rArr; WiFiAppSetPlayMode &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioSampleRateSet
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControlGpioInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerOnControl
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleLedDisplayModeSet
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgRecv
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInCharge
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpMuteControl
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModeSwitchState
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
</UL>

<P><STRONG><a name="[87d]"></a>InitDeviceDetect</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dev_detect_driver.o(i.InitDeviceDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitDeviceDetect &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxtmr_count_get
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPcLink
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLineInLink
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87f]"></a>InitTimer</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timer_api.o(i.InitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTick1MsCnt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInitialize
</UL>

<P><STRONG><a name="[90f]"></a>IsCardLink</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dev_detect_driver.o(i.IsCardLink))
<BR><BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceMsgCtrl
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSysModeProcess
</UL>

<P><STRONG><a name="[880]"></a>IsChargeFull</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, power_management.o(i.IsChargeFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IsChargeFull &rArr; GpioSetRegBits
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioGetReg
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegBits
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegBits
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitor
</UL>

<P><STRONG><a name="[996]"></a>IsEarphoneLink</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dev_detect_driver.o(i.IsEarphoneLink))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[835]"></a>IsFolderNoFatChain</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, exfat.o(i.IsFolderNoFatChain), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderGetInfo
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
</UL>

<P><STRONG><a name="[858]"></a>IsInCharge</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, power_management.o(i.IsInCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IsInCharge &rArr; GpioSetRegBits
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioGetReg
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegBits
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegBits
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitorInit
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitor
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiStateCheck
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLdoinLevelMonitor
</UL>

<P><STRONG><a name="[7e6]"></a>IsLineInLink</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dev_detect_driver.o(i.IsLineInLink))
<BR><BR>[Called By]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDeviceDetect
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceDetect
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceMsgCtrl
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSysModeProcess
</UL>

<P><STRONG><a name="[7e8]"></a>IsMicInLink</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dev_detect_driver.o(i.IsMicInLink))
<BR><BR>[Called By]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceDetect
</UL>

<P><STRONG><a name="[90d]"></a>IsModeEnvOk</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dev_state_machine.o(i.IsModeEnvOk), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSysModeProcess
</UL>

<P><STRONG><a name="[87e]"></a>IsPcLink</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dev_detect_driver.o(i.IsPcLink))
<BR><BR>[Called By]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDeviceDetect
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceMsgCtrl
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSysModeProcess
</UL>

<P><STRONG><a name="[902]"></a>IsPlayerEnvironmentOk</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, player_control.o(i.IsPlayerEnvironmentOk), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePlayCtrlProcess
</UL>

<P><STRONG><a name="[883]"></a>IsRtcAlarmRingPlaying</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtc_control.o(i.IsRtcAlarmRingPlaying))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = IsRtcAlarmRingPlaying &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
</UL>

<P><STRONG><a name="[884]"></a>IsRtcCurrentTimeCompliant</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rtc.o(i.IsRtcCurrentTimeCompliant))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IsRtcCurrentTimeCompliant &rArr; RtcSetRefRegCnt &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetRefRegCnt
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetRefRegCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCurrTime
</UL>

<P><STRONG><a name="[778]"></a>IsSoundRemindPlaying</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sound_remind.o(i.IsSoundRemindPlaying))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioProcessTaskEntrance
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcControlProcess
</UL>

<P><STRONG><a name="[128]"></a>IsTimeOut</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timeout.o(i.IsTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTick1MsCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SilenceAmpMuteProc
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskWaitResp
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffDetect
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitor
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDeviceDetect
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodingKeyScan
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcTimerCB
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRcvCmd
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcKeyScan
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiStateCheck
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacInit
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLdoinLevelMonitor
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedFlushDisp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRcvDataBlocking
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_RcvWiFiCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiLedCb
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuSleepModeDeal
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUseOsc32kCheckRc48m
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacDeinit
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetRefRegCnt
</UL>

<P><STRONG><a name="[90e]"></a>IsUDiskLink</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dev_detect_driver.o(i.IsUDiskLink))
<BR><BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceMsgCtrl
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSysModeProcess
</UL>

<P><STRONG><a name="[d9]"></a>IsWiFiCardLink</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wifi_control.o(i.IsWiFiCardLink))
<BR><BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcControlProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_state_machine.o(.constdata)
</UL>
<P><STRONG><a name="[887]"></a>KeyInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key.o(i.KeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = KeyInit &rArr; AdcAdjustVolInit &rArr; AdcAdjustVolScan &rArr; McuSyncWiFiVolume &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodingKeyInit
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcKeyInit
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAdjustVolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[888]"></a>KeyScan</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, key.o(i.KeyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = KeyScan &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetQuickResponseFlag
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFirmwareUpgradeStateGet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodingKeyScan
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModeSwitchState
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcCurAlarmSleepAndStop
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcAlarmRingPlaying
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuChildLockStateGet
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWiFiAlarmRemindState
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcKeyScan
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAdjustVolScan
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyState
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88c]"></a>LcdCtrlRegInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lcd_seg.o(i.LcdCtrlRegInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LcdCtrlRegInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateEn
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateDis
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_lcd_seg_c_909eeb87____DISABLE_IRQ
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___9_lcd_seg_c_909eeb87____ENABLE_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f5]"></a>LdoGetOtpTrimValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ldo_config.o(i.LdoGetOtpTrimValue))
<BR><BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcLoadParamFromOTP
</UL>

<P><STRONG><a name="[7f9]"></a>LedFlushDisp</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, singled_display.o(i.LedFlushDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LedFlushDisp &rArr; SingleLedChangeDutyFunc &rArr; PwmEnableChannel &rArr; GpioClrRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnableChannel
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmConfig
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleLedChangeDutyFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
</UL>

<P><STRONG><a name="[911]"></a>LoadLunarInfo</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, rtc_lunar.o(i.LoadLunarInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoadLunarInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarToLunar
</UL>

<P><STRONG><a name="[79a]"></a>LpWriteDis</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wakeup.o(i.LpWriteDis))
<BR><BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioA0SetMode
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkPorRcToDpll
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAlarmIntClear
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSetWakeUpSrcInDeepSleep
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkOsc32kNoNeedExtCapacitanceSet
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSetWakeUpSrcInPowerDown
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkDpllClose
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUseOsc32kCheckRc48m
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetRefCnt
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarmCnt
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcLoadCurrAlarm
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcCurrentTimeCompliant
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetSwMode
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetOnkeyCnt
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetMcuOffSeq
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetHwMode
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetBypassMode
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrRst8s
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrMcuOffSeq
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrWakeCore
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetRefRegCnt
</UL>

<P><STRONG><a name="[799]"></a>LpWriteEn</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wakeup.o(i.LpWriteEn))
<BR><BR>[Called By]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioA0SetMode
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkPorRcToDpll
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAlarmIntClear
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSetWakeUpSrcInDeepSleep
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkOsc32kNoNeedExtCapacitanceSet
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSetWakeUpSrcInPowerDown
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkDpllClose
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUseOsc32kCheckRc48m
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetRefCnt
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarmCnt
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcLoadCurrAlarm
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcCurrentTimeCompliant
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetSwMode
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetOnkeyCnt
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetMcuOffSeq
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetHwMode
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetBypassMode
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrRst8s
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrMcuOffSeq
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrWakeCore
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetRefRegCnt
</UL>

<P><STRONG><a name="[95e]"></a>MasterMcuRevPassThroughCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wifi_control.o(i.MasterMcuRevPassThroughCmd))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[893]"></a>McuChangeSystemTimeZone</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, wifi_control.o(i.McuChangeSystemTimeZone))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = McuChangeSystemTimeZone &rArr; RtcGetMonthDays
</UL>
<BR>[Calls]<UL><LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetMonthDays
</UL>
<BR>[Called By]<UL><LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuAlarmTime
</UL>

<P><STRONG><a name="[863]"></a>McuGetWiFiPlayStateParams</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wifi_control.o(i.McuGetWiFiPlayStateParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = McuGetWiFiPlayStateParams &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
</UL>

<P><STRONG><a name="[895]"></a>McuRevPassThroughData</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, wifi_control.o(i.McuRevPassThroughData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = McuRevPassThroughData &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[896]"></a>McuRevPassThroughDataProcess</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, wifi_control.o(i.McuRevPassThroughDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = McuRevPassThroughDataProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuRevPassThroughDataState
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
</UL>

<P><STRONG><a name="[897]"></a>McuRevPassThroughDataState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.McuRevPassThroughDataState))
<BR><BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuRevPassThroughDataProcess
</UL>

<P><STRONG><a name="[85c]"></a>McuSetPlayMode</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, wifi_control.o(i.McuSetPlayMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = McuSetPlayMode &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSlaveSounBoxCntGet
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
</UL>

<P><STRONG><a name="[727]"></a>McuSyncWiFiVolume</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wifi_control.o(i.McuSyncWiFiVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = McuSyncWiFiVolume &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAdjustVolScan
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuSleepModeSet
</UL>

<P><STRONG><a name="[116]"></a>Mcu_RcvUartData</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wifi_uart_com.o(i.Mcu_RcvUartData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Mcu_RcvUartData &rArr; BuartRecv &rArr; Wait4EventTimeout &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInterrupt
</UL>

<P><STRONG><a name="[898]"></a>Mcu_RcvWiFiCmd</STRONG> (Thumb, 500 bytes, Stack size 16 bytes, wifi_uart_com.o(i.Mcu_RcvWiFiCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = Mcu_RcvWiFiCmd &rArr; Mcu_RcvWiFiDataProcess &rArr; WiFi_SendCmdToMcu &rArr; WiFiAppSetPlayMode &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_RcvWiFiDataProcess
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxQueueData
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRxQueueLen
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_CmdProcess
</UL>

<P><STRONG><a name="[89a]"></a>Mcu_RcvWiFiDataProcess</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, wifi_uart_com.o(i.Mcu_RcvWiFiDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Mcu_RcvWiFiDataProcess &rArr; WiFi_SendCmdToMcu &rArr; WiFiAppSetPlayMode &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_RcvWiFiCmd
</UL>

<P><STRONG><a name="[7c1]"></a>Mcu_SendCmdToWiFi</STRONG> (Thumb, 8062 bytes, Stack size 88 bytes, wifi_uart_com.o(i.Mcu_SendCmdToWiFi))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiPowerOnInitStateGet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartSend
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuSetPlayMode
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuGetWiFiPlayStateParams
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuSyncWiFiVolume
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiStateCheck
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiUpgradeMcuSoftRunning
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiUpgradeMcuSoftMsg
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiRequestMcuPowerOff
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuSleepModeDeal
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetProjectParams
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetMcuVolume
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetMcuSoundRemindLanguage
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetMcuCurPlayMode
</UL>

<P><STRONG><a name="[10c]"></a>Mcu_TimerPollingRcvUartData</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wifi_uart_com.o(i.Mcu_TimerPollingRcvUartData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Mcu_TimerPollingRcvUartData &rArr; BuartRecv &rArr; Wait4EventTimeout &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Interrupt
</UL>

<P><STRONG><a name="[74d]"></a>MixerConfigFormat</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mixer.o(i.MixerConfigFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MixerConfigFormat &rArr; SampleRateConvertInit &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRateConvertInit
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStart
</UL>

<P><STRONG><a name="[7df]"></a>MixerConfigVolume</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, mixer.o(i.MixerConfigVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MixerConfigVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysVol
</UL>

<P><STRONG><a name="[749]"></a>MixerDisable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mixer.o(i.MixerDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MixerDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmFifoGetReadAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
</UL>

<P><STRONG><a name="[74e]"></a>MixerEnable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mixer.o(i.MixerEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MixerEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmFifoGetReadAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStart
</UL>

<P><STRONG><a name="[8a8]"></a>MixerGetRemainSamples</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, mixer.o(i.MixerGetRemainSamples))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MixerGetRemainSamples
</UL>
<BR>[Calls]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmFifoGetReadAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmMemFillData
</UL>

<P><STRONG><a name="[8a9]"></a>MixerInit</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, mixer.o(i.MixerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MixerInit &rArr; CodecDacChannelSel &rArr; CodecDacChannelDisconnect &rArr; CodecMixPgaDisconnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacSoftMuteSet
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstPhubModule
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RstMclk
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhubPathSel
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhubPathClose
<LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmFifoInitialize
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacConfig
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacAdcSampleRateSet
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelSel
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmTxSetPcmDataMode
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacInit
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmFifoSetStatus
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[772]"></a>MixerIsDone</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mixer.o(i.MixerIsDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MixerIsDone &rArr; MixerProcess &rArr; MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioProcessTaskEntrance
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmMemFillData
</UL>

<P><STRONG><a name="[7d8]"></a>MixerMute</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mixer.o(i.MixerMute))
<BR><BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskStop
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskPause
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiTalkStateSet
</UL>

<P><STRONG><a name="[774]"></a>MixerSetData</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mixer.o(i.MixerSetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MixerSetData &rArr; MixerProcess &rArr; MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioProcessTaskEntrance
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmMemFillData
</UL>

<P><STRONG><a name="[7e0]"></a>MixerSetFadeSpeed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mixer.o(i.MixerSetFadeSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MixerSetFadeSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[985]"></a>MixerSrcEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mixer.o(i.MixerSrcEnable))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7ce]"></a>MixerUnmute</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mixer.o(i.MixerUnmute))
<BR><BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskResume
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStart
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiTalkStateSet
</UL>

<P><STRONG><a name="[846]"></a>ModifyFatItem</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fat.o(i.ModifyFatItem), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFATSec
</UL>
<BR>[Called By]<UL><LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeClusAlloc
</UL>

<P><STRONG><a name="[7d5]"></a>MsgAddSet</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, msgq.o(i.MsgAddSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MsgAddSet &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgaddset
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskEntrance
</UL>

<P><STRONG><a name="[7e7]"></a>MsgClear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_app.o(i.MsgClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MsgClear &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgClearClass
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceDetect
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceMsgCtrl
</UL>

<P><STRONG><a name="[85a]"></a>MsgClearClass</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sys_app.o(i.MsgClearClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MsgClearClass &rArr; MsgClear &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgClear
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
</UL>

<P><STRONG><a name="[7d6]"></a>MsgRecv</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sys_app.o(i.MsgRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = MsgRecv &rArr; SysDeviceMsgCtrl &rArr; GotoNextMode &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceMsgCtrl
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskEntrance
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>MsgSend</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, sys_app.o(i.MsgSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSoundRemindPlaying
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSoundRemind
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitor
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceDetect
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoNextMode
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInterrupt
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcControlProcess
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSysModeProcess
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePlayCtrlProcess
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAudioProcess
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_CmdProcess
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLdoinLevelMonitor
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiUSBStateSet
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiRequestMcuPowerOff
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiCardStateSet
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiAppSetPlayMode
</UL>

<P><STRONG><a name="[f4]"></a>NVIC_interrupt_prio_set</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, mach.o(i.NVIC_interrupt_prio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_interrupt_prio_set
</UL>
<BR>[Calls]<UL><LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch_nvic_config
</UL>

<P><STRONG><a name="[1df]"></a>NvmRead</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nvm.o(i.NvmRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NvmRead
</UL>
<BR>[Calls]<UL><LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_nvm_c_NvmRead____DISABLE_FAULT_IRQ
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_nvm_c_NvmRead____ENABLE_FAULT_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInitialize
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootUpgradeChk
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_LoadInfo
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadOneNvramInfo
</UL>

<P><STRONG><a name="[1dd]"></a>NvmWrite</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nvm.o(i.NvmWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_nvm_c_NvmRead____DISABLE_FAULT_IRQ
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_nvm_c_NvmRead____ENABLE_FAULT_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_SaveInfo
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInitialize
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootUpgradeChk
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcControlProcess
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBakBPInfo
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNvRamInfo
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveNvRamRecNum
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuAlarmTime
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiNoticeMcuNextAlarmTime
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankDataUpgrade
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetRefCnt
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcCurrentTimeCompliant
</UL>

<P><STRONG><a name="[980]"></a>OsSetDebugFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(i.OsSetDebugFlag))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8bb]"></a>Osc32kExtCapCalibrate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, get_bootup_info.o(i.Osc32kExtCapCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Osc32kExtCapCalibrate &rArr; SpiFlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkOsc32kNoNeedExtCapacitanceSet
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[834]"></a>ParseFat</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, fat.o(i.ParseFat), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBitMapSec
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextClusNum
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
</UL>

<P><STRONG><a name="[8bc]"></a>PastTimeGet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timeout.o(i.PastTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PastTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTick1MsCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
</UL>

<P><STRONG><a name="[730]"></a>PcmDataExtract</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, audio_adc.o(i.PcmDataExtract))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PcmDataExtract
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sPcmDataRead
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcPcmDataRead
</UL>

<P><STRONG><a name="[748]"></a>PcmFifoClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pcm_fifo.o(i.PcmFifoClear))
<BR><BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacAdcSampleRateSet
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioI2sOutSetChannel
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDacOutSetChannel
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiTalkStateSet
</UL>

<P><STRONG><a name="[8a2]"></a>PcmFifoGetDepth</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pcm_fifo.o(i.PcmFifoGetDepth))
<BR><BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckTx
</UL>

<P><STRONG><a name="[89e]"></a>PcmFifoGetReadAddr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pcm_fifo.o(i.PcmFifoGetReadAddr))
<BR><BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerEnable
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerGetRemainSamples
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerDisable
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckTx
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckEmpty
</UL>

<P><STRONG><a name="[8a3]"></a>PcmFifoGetRemainSamples</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pcm_fifo.o(i.PcmFifoGetRemainSamples))
<BR><BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckTx
</UL>

<P><STRONG><a name="[8ab]"></a>PcmFifoInitialize</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, pcm_fifo.o(i.PcmFifoInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PcmFifoInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerInit
</UL>

<P><STRONG><a name="[8aa]"></a>PcmFifoSetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pcm_fifo.o(i.PcmFifoSetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerInit
</UL>

<P><STRONG><a name="[74f]"></a>PcmMemFillData</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, task_audio_process.o(i.PcmMemFillData))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = PcmMemFillData &rArr; MixerSetData &rArr; MixerProcess &rArr; MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerSetData
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerIsDone
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerGetRemainSamples
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
</UL>

<P><STRONG><a name="[20b]"></a>PcmTxDoneSignalClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pcm_transfer.o(i.PcmTxDoneSignalClear))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_interrupt_handler
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckTx
</UL>

<P><STRONG><a name="[20a]"></a>PcmTxIsTransferDone</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pcm_transfer.o(i.PcmTxIsTransferDone))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_interrupt_handler
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckTx
</UL>

<P><STRONG><a name="[8a4]"></a>PcmTxSetGain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pcm_transfer.o(i.PcmTxSetGain))
<BR><BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckTx
</UL>

<P><STRONG><a name="[75d]"></a>PcmTxSetPcmDataMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pcm_transfer.o(i.PcmTxSetPcmDataMode))
<BR><BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerInit
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDacOutSetChannel
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckTx
</UL>

<P><STRONG><a name="[20d]"></a>PcmTxTransferData</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pcm_transfer.o(i.PcmTxTransferData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PcmTxTransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckTx
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_start_pcm_transfer
</UL>

<P><STRONG><a name="[75a]"></a>PhubPathClose</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, audio_path.o(i.PhubPathClose))
<BR><BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerInit
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioI2sOutSetChannel
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDacOutSetChannel
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiTalkStateSet
</UL>

<P><STRONG><a name="[761]"></a>PhubPathSel</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, audio_path.o(i.PhubPathSel))
<BR><BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerInit
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioI2sOutSetChannel
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDacOutSetChannel
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiTalkStateSet
</UL>

<P><STRONG><a name="[734]"></a>PmemDataPathSel</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pmem.o(i.PmemDataPathSel))
<BR><BR>[Called By]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2sInToPmemConfig
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcToPmem
</UL>

<P><STRONG><a name="[8c1]"></a>PowerMonitor</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, power_management.o(i.PowerMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = PowerMonitor &rArr; PowerLdoinLevelMonitor &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFirmwareUpgradeStateGet
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInCharge
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsChargeFull
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLdoinLevelMonitor
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c0]"></a>PowerMonitorDisp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, power_management.o(i.PowerMonitorDisp))
<BR><BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLdoinLevelMonitor
</UL>

<P><STRONG><a name="[8c2]"></a>PowerMonitorInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, power_management.o(i.PowerMonitorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = PowerMonitorInit &rArr; PowerLdoinLevelMonitor &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInCharge
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcGetLdoinVoltage
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLdoinLevelMonitor
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c3]"></a>PowerkeyClrMcuOffSeq</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, wakeup.o(i.PowerkeyClrMcuOffSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PowerkeyClrMcuOffSeq
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetWakeUpFlag
</UL>

<P><STRONG><a name="[8c4]"></a>PowerkeyClrRst8s</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wakeup.o(i.PowerkeyClrRst8s))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerkeyClrRst8s
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
</UL>

<P><STRONG><a name="[8c5]"></a>PowerkeyClrWakeCore</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wakeup.o(i.PowerkeyClrWakeCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerkeyClrWakeCore
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAlarmArrivedProcess
</UL>

<P><STRONG><a name="[927]"></a>PowerkeyGetOnkeyReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wakeup.o(i.PowerkeyGetOnkeyReg))
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
</UL>

<P><STRONG><a name="[920]"></a>PowerkeyGetRst8s</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wakeup.o(i.PowerkeyGetRst8s))
<BR><BR>[Called By]<UL><LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetWakeUpFlag
</UL>

<P><STRONG><a name="[91f]"></a>PowerkeyGetSOnOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wakeup.o(i.PowerkeyGetSOnOff))
<BR><BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetWakeUpFlag
</UL>

<P><STRONG><a name="[8c6]"></a>PowerkeySetBypassMode</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, wakeup.o(i.PowerkeySetBypassMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PowerkeySetBypassMode
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoPowerDown
</UL>

<P><STRONG><a name="[8c7]"></a>PowerkeySetHwMode</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, wakeup.o(i.PowerkeySetHwMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PowerkeySetHwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
</UL>

<P><STRONG><a name="[8c8]"></a>PowerkeySetMcuOffSeq</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, wakeup.o(i.PowerkeySetMcuOffSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PowerkeySetMcuOffSeq
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoPowerDown
</UL>

<P><STRONG><a name="[8c9]"></a>PowerkeySetOnkeyCnt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wakeup.o(i.PowerkeySetOnkeyCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PowerkeySetOnkeyCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
</UL>

<P><STRONG><a name="[8ca]"></a>PowerkeySetSwMode</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, wakeup.o(i.PowerkeySetSwMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PowerkeySetSwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
</UL>

<P><STRONG><a name="[88f]"></a>PwmConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, pwm.o(i.PwmConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PwmConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePwmProcess
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleLedChangeDutyFunc
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleLedFlushDispInit
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedFlushDisp
</UL>

<P><STRONG><a name="[8cb]"></a>PwmDisableChannel</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, pwm.o(i.PwmDisableChannel), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateEn
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateDis
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_pwm_c_75651d24____DISABLE_IRQ
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_pwm_c_75651d24____ENABLE_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePwmProcess
</UL>

<P><STRONG><a name="[890]"></a>PwmEnableChannel</STRONG> (Thumb, 500 bytes, Stack size 88 bytes, pwm.o(i.PwmEnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PwmEnableChannel &rArr; GpioClrRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateEn
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateDis
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_pwm_c_75651d24____DISABLE_IRQ
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_pwm_c_75651d24____ENABLE_IRQ
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePwmProcess
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleLedChangeDutyFunc
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleLedFlushDispInit
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedFlushDisp
</UL>

<P><STRONG><a name="[79c]"></a>RC48MHzTrimBy1MHz</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, clk.o(i.RC48MHzTrimBy1MHz))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetCurrentSysClkFreq
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuartBaudClk
</UL>

<P><STRONG><a name="[135]"></a>RTL8761ScoProcessPCM</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pcm_sync.o(i.RTL8761ScoProcessPCM), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtStackUartRcvData
</UL>

<P><STRONG><a name="[792]"></a>ReadBitMapSec</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, exfat.o(i.ReadBitMapSec), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBitMapSec
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFat
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeClusAlloc
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatSaveDirSec
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFreeClus
</UL>

<P><STRONG><a name="[7ea]"></a>ReadDirSec</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, fat.o(i.ReadDirSec), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatReadDirSec
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOneSec
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileClose
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RewindFolderStart
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirSetStartEntry
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirGetNextEntry
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirEnterSonFolder
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileGetInfo
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirSetSonClusNum
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirGetSonSecNum
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirGetSonClusNum
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirFindNextFolder
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirEnterParentFolder
</UL>

<P><STRONG><a name="[794]"></a>ReadFATSec</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fat.o(i.ReadFATSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ReadFATSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextClusNum
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFatItem
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFreeClus
</UL>

<P><STRONG><a name="[818]"></a>ReadOneSec</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, fat.o(i.ReadOneSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOneSec
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatReadDirSec
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatFileGetFullName
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FileRead
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLongName
</UL>

<P><STRONG><a name="[916]"></a>ResetSoundRemindStopFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sound_remind.o(i.ResetSoundRemindStopFlag))
<BR><BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
</UL>

<P><STRONG><a name="[82f]"></a>RewindFolderStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dir.o(i.RewindFolderStart), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDirSec
</UL>
<BR>[Called By]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileOpenByNum
</UL>

<P><STRONG><a name="[752]"></a>Rst12p288GeneratorModule</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rst.o(i.Rst12p288GeneratorModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rst12p288GeneratorModule
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioSampleRateSet
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutputInit
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkMclkSel
</UL>

<P><STRONG><a name="[75c]"></a>RstMclk</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rst.o(i.RstMclk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RstMclk
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerInit
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioI2sOutSetChannel
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDacOutSetChannel
</UL>

<P><STRONG><a name="[75b]"></a>RstPhubModule</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rst.o(i.RstPhubModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RstPhubModule
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerInit
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioStaOutSetChannel
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioI2sOutSetChannel
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioDacOutSetChannel
</UL>

<P><STRONG><a name="[8ce]"></a>RtcAlarmArrivedProcess</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtc.o(i.RtcAlarmArrivedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RtcAlarmArrivedProcess &rArr; RtcUpdateAlarmTimeInSeconds &rArr; RtcUpdataAlarmTimeWorkday
</UL>
<BR>[Calls]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcLoadCurrAlarm
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrWakeCore
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcUpdateAlarmTimeInSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcControlProcess
</UL>

<P><STRONG><a name="[114]"></a>RtcAlarmIntClear</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtc.o(i.RtcAlarmIntClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RtcAlarmIntClear
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInterrupt
</UL>

<P><STRONG><a name="[8d1]"></a>RtcAlarmSetStatus</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rtc.o(i.RtcAlarmSetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RtcAlarmSetStatus &rArr; RtcUpdateAlarmTimeInSeconds &rArr; RtcUpdataAlarmTimeWorkday
</UL>
<BR>[Calls]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcLoadCurrAlarm
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcUpdateAlarmTimeInSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarmTime
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcControlProcess
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRtcProcess
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiNoticeMcuNextAlarmTime
</UL>

<P><STRONG><a name="[937]"></a>RtcAt8563tAlarmCome</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtc_at8563.o(i.RtcAt8563tAlarmCome))
<BR><BR>[Called By]<UL><LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetAt8563tSystemTime
</UL>

<P><STRONG><a name="[8d2]"></a>RtcAt8563tInit</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, rtc_at8563.o(i.RtcAt8563tInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = RtcAt8563tInit &rArr; RtcAt8563tWriteParam &rArr; I2cWriteNByte &rArr; I2cWriteBytes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cMasterCreate
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAt8563tWriteParam
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAt8563tReadParam
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>RtcCheckAlarmFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtc.o(i.RtcCheckAlarmFlag))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInterrupt
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRtcProcess
</UL>

<P><STRONG><a name="[7c5]"></a>RtcControlProcess</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, rtc_control.o(i.RtcControlProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = RtcControlProcess &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSoundRemindPlaying
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsWiFiCardLink
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiWwwStateGet
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCurrTime
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetAlarmTime
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetAlarmStatus
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAlarmSetStatus
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAlarmArrivedProcess
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcCurAlarmSleepAndStop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
</UL>

<P><STRONG><a name="[111]"></a>RtcCurAlarmSleepAndStop</STRONG> (Thumb, 658 bytes, Stack size 40 bytes, rtc_control.o(i.RtcCurAlarmSleepAndStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = RtcCurAlarmSleepAndStop &rArr; SetSysVol &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysVol
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCurrTime
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInterrupt
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcControlProcess
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuAlarmTime
</UL>

<P><STRONG><a name="[8d9]"></a>RtcDateToDays</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, rtc.o(i.RtcDateToDays))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RtcDateToDays
</UL>
<BR>[Calls]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcIsLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcDateToSeconds
</UL>

<P><STRONG><a name="[8db]"></a>RtcDateToSeconds</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rtc.o(i.RtcDateToSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RtcDateToSeconds &rArr; RtcDateToDays
</UL>
<BR>[Calls]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcDateToDays
</UL>
<BR>[Called By]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetCurrTime
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarmTime
</UL>

<P><STRONG><a name="[8dc]"></a>RtcDayOffsetInYear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rtc.o(i.RtcDayOffsetInYear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RtcDayOffsetInYear
</UL>
<BR>[Calls]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcIsLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarToLunar
</UL>

<P><STRONG><a name="[8dd]"></a>RtcDaysToDate</STRONG> (Thumb, 136 bytes, Stack size 28 bytes, rtc.o(i.RtcDaysToDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RtcDaysToDate
</UL>
<BR>[Calls]<UL><LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetWeekDay
</UL>
<BR>[Called By]<UL><LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSecondsToDate
</UL>

<P><STRONG><a name="[8df]"></a>RtcFindCurrAlarmIndex</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, rtc.o(i.RtcFindCurrAlarmIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RtcFindCurrAlarmIndex &rArr; RtcGetRefCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetRefCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcLoadCurrAlarm
</UL>

<P><STRONG><a name="[8d7]"></a>RtcGetAlarmStatus</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rtc.o(i.RtcGetAlarmStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcControlProcess
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRtcProcess
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiNoticeMcuNextAlarmTime
</UL>

<P><STRONG><a name="[8d5]"></a>RtcGetAlarmTime</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, rtc.o(i.RtcGetAlarmTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RtcGetAlarmTime &rArr; RtcSecondsToDate &rArr; RtcDaysToDate
</UL>
<BR>[Calls]<UL><LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSecondsToDate
</UL>
<BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcControlProcess
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRtcProcess
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiNoticeMcuNextAlarmTime
</UL>

<P><STRONG><a name="[8d6]"></a>RtcGetCurrTime</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rtc.o(i.RtcGetCurrTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RtcGetCurrTime &rArr; IsRtcCurrentTimeCompliant &rArr; RtcSetRefRegCnt &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSecondsToDate
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetRefCnt
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcCurrentTimeCompliant
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcCurAlarmSleepAndStop
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcControlProcess
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRtcProcess
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuWeekDay
</UL>

<P><STRONG><a name="[894]"></a>RtcGetMonthDays</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, rtc.o(i.RtcGetMonthDays))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RtcGetMonthDays
</UL>
<BR>[Calls]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcIsLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuChangeSystemTimeZone
</UL>

<P><STRONG><a name="[8e0]"></a>RtcGetRefCnt</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, rtc.o(i.RtcGetRefCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RtcGetRefCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetRefRegCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarmTime
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCurrTime
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcFindCurrAlarmIndex
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcUpdateAlarmTimeInSeconds
</UL>

<P><STRONG><a name="[885]"></a>RtcGetRefRegCnt</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rtc.o(i.RtcGetRefRegCnt))
<BR><BR>[Called By]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetRefCnt
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetRefCnt
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcCurrentTimeCompliant
</UL>

<P><STRONG><a name="[8de]"></a>RtcGetWeekDay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtc.o(i.RtcGetWeekDay))
<BR><BR>[Called By]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcDaysToDate
</UL>

<P><STRONG><a name="[8e2]"></a>RtcInit</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, rtc.o(i.RtcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RtcInit &rArr; RtcUpdateAlarmTimeInSeconds &rArr; RtcUpdataAlarmTimeWorkday
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmRead
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarmCnt
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcLoadCurrAlarm
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcUpdateAlarmTimeInSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInitialize
</UL>

<P><STRONG><a name="[8e4]"></a>RtcInitialize</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, rtc_control.o(i.RtcInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = RtcInitialize &rArr; WiFiGetAt8563tSystemTime &rArr; WiFiSetAt8563tAlarmTime &rArr; I2cWriteNByte &rArr; I2cWriteBytes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetAt8563tSystemTime
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetAt8563tSystemTime
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetCurrTime
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmRead
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8da]"></a>RtcIsLeapYear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtc.o(i.RtcIsLeapYear))
<BR><BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarToLunar
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetMonthDays
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcDayOffsetInYear
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcDateToDays
</UL>

<P><STRONG><a name="[8d0]"></a>RtcLoadCurrAlarm</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, rtc.o(i.RtcLoadCurrAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RtcLoadCurrAlarm &rArr; RtcSetAlarmCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarmCnt
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcFindCurrAlarmIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetCurrTime
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarmTime
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAlarmSetStatus
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAlarmArrivedProcess
</UL>

<P><STRONG><a name="[8e1]"></a>RtcSecondsToDate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtc.o(i.RtcSecondsToDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RtcSecondsToDate &rArr; RtcDaysToDate
</UL>
<BR>[Calls]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcDaysToDate
</UL>
<BR>[Called By]<UL><LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCurrTime
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetAlarmTime
</UL>

<P><STRONG><a name="[8e3]"></a>RtcSetAlarmCnt</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtc.o(i.RtcSetAlarmCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RtcSetAlarmCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcLoadCurrAlarm
</UL>

<P><STRONG><a name="[8e9]"></a>RtcSetAlarmTime</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, rtc.o(i.RtcSetAlarmTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RtcSetAlarmTime &rArr; RtcAlarmSetStatus &rArr; RtcUpdateAlarmTimeInSeconds &rArr; RtcUpdataAlarmTimeWorkday
</UL>
<BR>[Calls]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAlarmSetStatus
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcLoadCurrAlarm
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetRefCnt
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcDateToSeconds
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcUpdateAlarmTimeInSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRtcProcess
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiNoticeMcuNextAlarmTime
</UL>

<P><STRONG><a name="[8e7]"></a>RtcSetCurrTime</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtc.o(i.RtcSetCurrTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RtcSetCurrTime &rArr; RtcSetRefCnt &rArr; NvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetRefCnt
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcLoadCurrAlarm
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcDateToSeconds
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcUpdateAlarmTimeInSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInitialize
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRtcProcess
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuWeekDay
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuSystemTime
</UL>

<P><STRONG><a name="[8ea]"></a>RtcSetRefCnt</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rtc.o(i.RtcSetRefCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RtcSetRefCnt &rArr; NvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetRefRegCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetCurrTime
</UL>

<P><STRONG><a name="[886]"></a>RtcSetRefRegCnt</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rtc.o(i.RtcSetRefRegCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RtcSetRefRegCnt &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
</UL>
<BR>[Called By]<UL><LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRtcCurrentTimeCompliant
</UL>

<P><STRONG><a name="[d1]"></a>RtcTimerCB</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, rtc_control.o(i.RtcTimerCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = RtcTimerCB &rArr; DisplayLunarDate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayLunarDate
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetAt8563tSystemTime
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_control.o(i.RtcInitialize)
</UL>
<P><STRONG><a name="[8eb]"></a>RtcUpdataAlarmTimeWorkday</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, rtc.o(i.RtcUpdataAlarmTimeWorkday))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RtcUpdataAlarmTimeWorkday
</UL>
<BR>[Called By]<UL><LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcUpdateAlarmTimeInSeconds
</UL>

<P><STRONG><a name="[8cf]"></a>RtcUpdateAlarmTimeInSeconds</STRONG> (Thumb, 422 bytes, Stack size 20 bytes, rtc.o(i.RtcUpdateAlarmTimeInSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RtcUpdateAlarmTimeInSeconds &rArr; RtcUpdataAlarmTimeWorkday
</UL>
<BR>[Calls]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetRefCnt
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcUpdataAlarmTimeWorkday
</UL>
<BR>[Called By]<UL><LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetCurrTime
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarmTime
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAlarmSetStatus
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAlarmArrivedProcess
</UL>

<P><STRONG><a name="[8a0]"></a>SampleRateConvert</STRONG> (Thumb, 486 bytes, Stack size 64 bytes, sample_rate_convert.o(i.SampleRateConvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRateConvertA
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckMix
</UL>

<P><STRONG><a name="[8a7]"></a>SampleRateConvertInit</STRONG> (Thumb, 546 bytes, Stack size 88 bytes, sample_rate_convert.o(i.SampleRateConvertInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SampleRateConvertInit &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerConfigFormat
</UL>

<P><STRONG><a name="[723]"></a>SarAdcChannelGetValue</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, adc.o(i.SarAdcChannelGetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SarAdcChannelGetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleDivGet
</UL>
<BR>[Called By]<UL><LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAdcProcess
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcChannelKeyGet
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAdjustVolScan
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAdjustVolInit
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcGetAverageValue
</UL>

<P><STRONG><a name="[8be]"></a>SarAdcGetLdoinVoltage</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, adc.o(i.SarAdcGetLdoinVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SarAdcGetLdoinVoltage &rArr; SarAdcGetAverageValue &rArr; SarAdcChannelGetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcGetVinFromX
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcGetAverageValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitorInit
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAdcProcess
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLdoinLevelMonitor
</UL>

<P><STRONG><a name="[8f1]"></a>SarAdcGetVinFromX</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, adc.o(i.SarAdcGetVinFromX))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SarAdcGetVinFromX
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcGetLdoinVoltage
</UL>

<P><STRONG><a name="[722]"></a>SarAdcGpioSel</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, adc.o(i.SarAdcGpioSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SarAdcGpioSel &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAdcProcess
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcKeyInit
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAdjustVolInit
</UL>

<P><STRONG><a name="[8f3]"></a>SarAdcLdoinVolInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, adc.o(i.SarAdcLdoinVolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SarAdcLdoinVolInit &rArr; SarAdcLoadParamFromOTP &rArr; SarAdcIsTrimmed &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcLoadParamFromOTP
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73f]"></a>SarAdcPowerDown</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.SarAdcPowerDown))
<BR><BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogModulePowerDwon
</UL>

<P><STRONG><a name="[81b]"></a>SaveBitMapSec</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, exfat.o(i.SaveBitMapSec), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBitMapSec
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeClusAlloc
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatSaveDirSec
</UL>

<P><STRONG><a name="[828]"></a>SaveDirSec</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fat.o(i.SaveDirSec), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOneSec
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatSaveDirSec
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileClose
</UL>

<P><STRONG><a name="[829]"></a>SaveFatSec</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fat.o(i.SaveFatSec), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileClose
</UL>

<P><STRONG><a name="[837]"></a>SaveOneSec</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, fat.o(i.SaveOneSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDirSec
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneSec
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDirSec
</UL>

<P><STRONG><a name="[988]"></a>SetDriverTerminateFuc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, host_stor.o(i.SetDriverTerminateFuc))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[833]"></a>SetEntryNoFatChain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exfat.o(i.SetEntryNoFatChain))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSeek
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderGetInfo
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FileRead
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
</UL>

<P><STRONG><a name="[989]"></a>SetFsTerminateFuc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fat_file.o(i.SetFsTerminateFuc))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[865]"></a>SetInputSDA</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c.o(i.SetInputSDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetInputSDA &rArr; GpioClrRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStop
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadByte
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cChkAck
</UL>

<P><STRONG><a name="[87c]"></a>SetModeSwitchState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys_app.o(i.SetModeSwitchState))
<BR><BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemStandbyControl
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffControl
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSysModeProcess
</UL>

<P><STRONG><a name="[874]"></a>SetOutputSCL</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c.o(i.SetOutputSCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetOutputSCL &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStop
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStart
</UL>

<P><STRONG><a name="[86a]"></a>SetOutputSDA</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c.o(i.SetOutputSDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetOutputSDA &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteByte
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStop
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStart
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadByte
</UL>

<P><STRONG><a name="[7e1]"></a>SetQuickResponseFlag</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dev_detect_driver.o(i.SetQuickResponseFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SetQuickResponseFlag &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up_op
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_op
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQuickResponseFlag
</UL>

<P><STRONG><a name="[866]"></a>SetSCL</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c.o(i.SetSCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetSCL &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteByte
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStop
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStart
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendNoAck
<LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendAck
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadByte
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cChkAck
</UL>

<P><STRONG><a name="[873]"></a>SetSDA</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c.o(i.SetSDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetSDA &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteByte
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStop
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cStart
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cSendNoAck
</UL>

<P><STRONG><a name="[726]"></a>SetSysVol</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, sys_vol.o(i.SetSysVol))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = SetSysVol &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerConfigVolume
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuVolumeMaxGet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcCurAlarmSleepAndStop
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAudioProcess
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcAdjustVolScan
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuVolume
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuVolumeMaxSet
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuSleepModeSet
</UL>

<P><STRONG><a name="[775]"></a>SilenceAmpMuteProc</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, sys_vol.o(i.SilenceAmpMuteProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SilenceAmpMuteProc &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioProcessTaskEntrance
</UL>

<P><STRONG><a name="[85d]"></a>SilenceMuteDetInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys_vol.o(i.SilenceMuteDetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SilenceMuteDetInit &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
</UL>

<P><STRONG><a name="[87b]"></a>SingleLedDisplayModeSet</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, singled_display.o(i.SingleLedDisplayModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLdoinLevelMonitor
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[7f6]"></a>SingleLedFlushDispInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, singled_display.o(i.SingleLedFlushDispInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SingleLedFlushDispInit &rArr; PwmEnableChannel &rArr; GpioClrRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnableChannel
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInit
</UL>

<P><STRONG><a name="[8f8]"></a>SlaveAdcProcess</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, spp_app_proc.o(i.SlaveAdcProcess), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcGpioSel
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcGetLdoinVoltage
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcChannelGetValue
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSendResp
</UL>
<BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
</UL>

<P><STRONG><a name="[8fa]"></a>SlaveAudioProcess</STRONG> (Thumb, 438 bytes, Stack size 16 bytes, spp_app_proc.o(i.SlaveAudioProcess), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacSoftMuteSet
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacAdcSampleRateGet
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysVol
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqStyleSelect
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqDisable
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSendResp
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
</UL>

<P><STRONG><a name="[8fb]"></a>SlaveDeepSleepProcess</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, spp_app_proc.o(i.SlaveDeepSleepProcess), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSetWakeUpSrcInDeepSleep
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoDeepSleepGpioCfg
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoDeepSleep
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSendResp
</UL>
<BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
</UL>

<P><STRONG><a name="[8ff]"></a>SlaveFileSystemProcess</STRONG> (Thumb, 880 bytes, Stack size 192 bytes, spp_app_proc.o(i.SlaveFileSystemProcess), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderGetLongName
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileOpenByNum
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileGetLongName
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileClose
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSendResp
</UL>
<BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
</UL>

<P><STRONG><a name="[900]"></a>SlaveGpioProcess</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, spp_app_proc.o(i.SlaveGpioProcess), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioGetReg
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegBits
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetReg
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegBits
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSendResp
</UL>
<BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
</UL>

<P><STRONG><a name="[95d]"></a>SlaveMcuRevPassThroughCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wifi_control.o(i.SlaveMcuRevPassThroughCmd))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[901]"></a>SlavePlayCtrlProcess</STRONG> (Thumb, 2440 bytes, Stack size 32 bytes, spp_app_proc.o(i.SlavePlayCtrlProcess), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSeek
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPlayerEnvironmentOk
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPlayState
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayerStop
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayerPlayPause
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FolderOpenByNum
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSendResp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
</UL>

<P><STRONG><a name="[906]"></a>SlavePwmProcess</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, spp_app_proc.o(i.SlavePwmProcess), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnableChannel
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmDisableChannel
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmConfig
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSendResp
</UL>
<BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
</UL>

<P><STRONG><a name="[90c]"></a>SlaveRadioProcess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, spp_app_proc.o(i.SlaveRadioProcess), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
</UL>

<P><STRONG><a name="[907]"></a>SlaveRcvCmd</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, spp_app_proc.o(i.SlaveRcvCmd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SppReadData
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SppGetRecBufDataSize
</UL>
<BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
</UL>

<P><STRONG><a name="[908]"></a>SlaveRtcProcess</STRONG> (Thumb, 886 bytes, Stack size 48 bytes, spp_app_proc.o(i.SlaveRtcProcess), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarToLunar
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetCurrTime
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarmTime
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCurrTime
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetAlarmTime
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetAlarmStatus
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcCheckAlarmFlag
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAlarmSetStatus
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeavenlyStem
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEarthlyBranch
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSendResp
</UL>
<BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
</UL>

<P><STRONG><a name="[8f9]"></a>SlaveSendResp</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, spp_app_proc.o(i.SlaveSendResp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SppSendData
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserProcSppData
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSysModeProcess
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSpecialFunction
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRtcProcess
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePwmProcess
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePlayCtrlProcess
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveGpioProcess
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveFileSystemProcess
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveDeepSleepProcess
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAudioProcess
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAdcProcess
</UL>

<P><STRONG><a name="[909]"></a>SlaveSpecialFunction</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, spp_app_proc.o(i.SlaveSpecialFunction), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSendResp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
</UL>

<P><STRONG><a name="[90a]"></a>SlaveStateCtrl</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, spp_app_proc.o(i.SlaveStateCtrl), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSysModeProcess
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSpecialFunction
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSendResp
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRtcProcess
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRcvCmd
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRadioProcess
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePwmProcess
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlavePlayCtrlProcess
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveGpioProcess
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveFileSystemProcess
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveDeepSleepProcess
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAudioProcess
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveAdcProcess
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserProcSppData
</UL>

<P><STRONG><a name="[90b]"></a>SlaveSysModeProcess</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, spp_app_proc.o(i.SlaveSysModeProcess), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextModeId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsModeEnvOk
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsUDiskLink
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPcLink
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLineInLink
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardLink
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModeSwitchState
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSendResp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
</UL>

<P><STRONG><a name="[910]"></a>SoftPowerKeyDetect</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, power_management.o(i.SoftPowerKeyDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SoftPowerKeyDetect &rArr; GpioSetRegBits
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioGetReg
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegBits
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegBits
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffDetect
</UL>

<P><STRONG><a name="[7fb]"></a>SolarToLunar</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, rtc_lunar.o(i.SolarToLunar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SolarToLunar &rArr; RtcDayOffsetInYear
</UL>
<BR>[Calls]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcIsLeapYear
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcDayOffsetInYear
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLunarInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayLunarDate
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRtcProcess
</UL>

<P><STRONG><a name="[769]"></a>SoundRemind</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, sound_remind.o(i.SoundRemind))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = SoundRemind &rArr; DecoderTaskSyncPlay &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemindFillStream
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerUnmute
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerMute
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFirmwareUpgradeStateGet
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashConstGetInfo
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTAudioPlayStop
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTAudioPlayStart
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetSoundRemindStopFlag
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceMsgCtrl
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayerMute
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcControlProcess
</UL>

<P><STRONG><a name="[912]"></a>SoundRemindFillStream</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, sound_remind.o(i.SoundRemindFillStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SoundRemindFillStream &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashConstDataRead
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
</UL>

<P><STRONG><a name="[ce]"></a>SoundRemindFillStreamCallback</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sound_remind.o(i.SoundRemindFillStreamCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SoundRemindFillStreamCallback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashConstDataRead
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_decoder.o(i.DecoderGetType)
</UL>
<P><STRONG><a name="[987]"></a>SoundRemindInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sound_remind.o(i.SoundRemindInit))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[918]"></a>SpiFlashClkSet</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, spi_flash.o(i.SpiFlashClkSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SpiFlashClkSet &rArr; SpiFlashIOCtl
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashIOCtl
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkCurrentClkModeGet
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleDivGet
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[917]"></a>SpiFlashConstDataRead</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, spi_flash.o(i.SpiFlashConstDataRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpiFlashConstDataRead &rArr; SpiFlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemindFillStreamCallback
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemindFillStream
</UL>

<P><STRONG><a name="[915]"></a>SpiFlashConstGetInfo</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, spi_flash.o(i.SpiFlashConstGetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SpiFlashConstGetInfo &rArr; SpiFlashConstDataIdxFind &rArr; SpiFlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
<LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashConstDataIdxFind
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
</UL>

<P><STRONG><a name="[7ff]"></a>SpiFlashWrite</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, spi_flash.o(i.SpiFlashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SpiFlashWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateEn
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateDis
</UL>
<BR>[Called By]<UL><LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshBTInfoAreaInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSave8DevRec
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshUpdateAllPairedList
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshGetPairingInfoWriteOffset
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBakBPInfo
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankDataSaveFlash
</UL>

<P><STRONG><a name="[8e8]"></a>StartTimer</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timer_api.o(i.StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StartTimer &rArr; GetDiffMs
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDiffMs
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTick1MsCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInitialize
</UL>

<P><STRONG><a name="[8b5]"></a>StopSoundRemind</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sound_remind.o(i.StopSoundRemind))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = StopSoundRemind &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
</UL>

<P><STRONG><a name="[81e]"></a>StringConvert</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, string_convert.o(i.StringConvert), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unicode_to_gbk
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExfatFullName2ShortName
</UL>

<P><STRONG><a name="[91b]"></a>SwUartSend</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sw_uart.o(i.SwUartSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SwUartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwUartSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[91c]"></a>SwUartTxInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sw_uart.o(i.SwUartTxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SwUartTxInit &rArr; GpioSetRegBits
</UL>
<BR>[Calls]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegBits
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegBits
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b4]"></a>SysDeviceMsgCtrl</STRONG> (Thumb, 536 bytes, Stack size 16 bytes, dev_state_machine.o(i.SysDeviceMsgCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = SysDeviceMsgCtrl &rArr; GotoNextMode &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextModeId
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSDeInit
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GotoNextMode
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModeId
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgClear
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsUDiskLink
<LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPcLink
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsLineInLink
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardLink
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgRecv
</UL>

<P><STRONG><a name="[91e]"></a>SysGetWakeUpFlag</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, wakeup.o(i.SysGetWakeUpFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysGetWakeUpFlag &rArr; Timer0Set &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyGetSOnOff
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyGetRst8s
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrMcuOffSeq
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Set
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8fe]"></a>SysGotoDeepSleep</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wakeup.o(i.SysGotoDeepSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SysGotoDeepSleep &rArr; AnalogModulePowerDwon &rArr; CodecDacChannelSel &rArr; CodecDacChannelDisconnect &rArr; CodecMixPgaDisconnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkSwitchDpllToRc
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkDpllClose
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogModulePowerDwon
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemStandbyControl
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveDeepSleepProcess
</UL>

<P><STRONG><a name="[8fd]"></a>SysGotoDeepSleepGpioCfg</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, power_management.o(i.SysGotoDeepSleepGpioCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysGotoDeepSleepGpioCfg &rArr; BTDevicePowerOff &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegBits
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegBits
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDevicePowerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemStandbyControl
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveDeepSleepProcess
</UL>

<P><STRONG><a name="[924]"></a>SysGotoPowerDown</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, wakeup.o(i.SysGotoPowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysGotoPowerDown &rArr; PowerkeySetMcuOffSeq
</UL>
<BR>[Calls]<UL><LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetMcuOffSeq
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetBypassMode
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffControl
</UL>

<P><STRONG><a name="[925]"></a>SysGotoPowerDownGpioCfg</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, power_management.o(i.SysGotoPowerDownGpioCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysGotoPowerDownGpioCfg &rArr; BTDevicePowerOff &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegBits
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegBits
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDevicePowerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffControl
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffDetect
</UL>

<P><STRONG><a name="[740]"></a>SysPowerDownOtp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wakeup.o(i.SysPowerDownOtp))
<BR><BR>[Called By]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogModulePowerDwon
</UL>

<P><STRONG><a name="[926]"></a>SysPowerKeyInit</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, wakeup.o(i.SysPowerKeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SysPowerKeyInit &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetSwMode
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetOnkeyCnt
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetMcuOffSeq
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetHwMode
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeySetBypassMode
<LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyGetSOnOff
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyGetOnkeyReg
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrRst8s
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrMcuOffSeq
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerkeyClrWakeCore
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87a]"></a>SysPowerOnControl</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, power_key.o(i.SysPowerOnControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SysPowerOnControl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffDetect
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetAt8563tSystemTime
</UL>

<P><STRONG><a name="[8fc]"></a>SysSetWakeUpSrcInDeepSleep</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, wakeup.o(i.SysSetWakeUpSrcInDeepSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SysSetWakeUpSrcInDeepSleep &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemStandbyControl
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveDeepSleepProcess
</UL>

<P><STRONG><a name="[928]"></a>SysSetWakeUpSrcInPowerDown</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, wakeup.o(i.SysSetWakeUpSrcInPowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SysSetWakeUpSrcInPowerDown &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteEn
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpWriteDis
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffControl
</UL>

<P><STRONG><a name="[929]"></a>SysVarDeinit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_app.o(i.SysVarDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = SysVarDeinit &rArr; BP_SaveInfo &rArr; SaveBPInfoToFlash &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_SaveInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemStandbyControl
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffControl
</UL>

<P><STRONG><a name="[92a]"></a>SysVarInit</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, sys_app.o(i.SysVarInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SysVarInit &rArr; BP_SaveInfo &rArr; SaveBPInfoToFlash &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_SaveInfo
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_GetInfo
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85f]"></a>SystemPowerOffControl</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, power_management.o(i.SystemPowerOffControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = SystemPowerOffControl &rArr; SysVarDeinit &rArr; BP_SaveInfo &rArr; SaveBPInfoToFlash &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModeSwitchState
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarDeinit
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgDis
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSetWakeUpSrcInPowerDown
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoPowerDown
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoPowerDownGpioCfg
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
</UL>

<P><STRONG><a name="[10b]"></a>SystemPowerOffDetect</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, power_management.o(i.SystemPowerOffDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SystemPowerOffDetect &rArr; SysPowerOnControl &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFirmwareUpgradeStateGet
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerOnControl
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoPowerDownGpioCfg
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftPowerKeyDetect
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Interrupt
</UL>

<P><STRONG><a name="[860]"></a>SystemStandbyControl</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, power_management.o(i.SystemStandbyControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SystemStandbyControl &rArr; SysGotoDeepSleep &rArr; AnalogModulePowerDwon &rArr; CodecDacChannelSel &rArr; CodecDacChannelDisconnect &rArr; CodecMixPgaDisconnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModeSwitchState
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSetWakeUpSrcInDeepSleep
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoDeepSleepGpioCfg
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoDeepSleep
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarDeinit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
</UL>

<P><STRONG><a name="[110]"></a>TimeOutSet</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, timeout.o(i.TimeOutSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTick1MsCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SilenceAmpMuteProc
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SongPlayDo
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskWaitResp
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SilenceMuteDetInit
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControlGpioInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffDetect
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInitialize
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitorInit
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitor
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDeviceDetect
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInit
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodingKeyInit
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInterrupt
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSendMessage
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcTimerCB
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveRcvCmd
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcKeyScan
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcKeyInit
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_CmdProcess
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiStateCheck
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacInit
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLdoinLevelMonitor
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleLedFlushDispInit
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedFlushDisp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRcvDataBlocking
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_RcvWiFiCmd
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSoundRemindStateSet
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiRequestMcuPowerOff
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiLedCb
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuSleepModeDeal
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUseOsc32kCheckRc48m
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacDeinit
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetRefRegCnt
</UL>

<P><STRONG><a name="[922]"></a>Timer0GetTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(i.Timer0GetTime))
<BR><BR>[Called By]<UL><LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetWakeUpFlag
</UL>

<P><STRONG><a name="[921]"></a>Timer0Set</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, timer.o(i.Timer0Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Timer0Set &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetCurrentSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetWakeUpFlag
</UL>

<P><STRONG><a name="[10a]"></a>Timer1IntClr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.Timer1IntClr))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Interrupt
</UL>

<P><STRONG><a name="[92b]"></a>Timer1Set</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, timer.o(i.Timer1Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Timer1Set &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetCurrentSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d4]"></a>UserProcSppData</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spp_app_proc.o(i.UserProcSppData), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SppGetRecBufDataSize
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModeSwitchState
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveSendResp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisSppRcvData
</UL>

<P><STRONG><a name="[82e]"></a>ValidityCheck</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fat.o(i.ValidityCheck), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileOpenByNum
</UL>

<P><STRONG><a name="[78e]"></a>Wait4EventTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setup.o(i.Wait4EventTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Wait4EventTimeout &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
</UL>

<P><STRONG><a name="[803]"></a>WdgDis</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, watchdog.o(i.WdgDis))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WdgDis
</UL>
<BR>[Calls]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_WdgEn____DISABLE_IRQ
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_WdgEn____ENABLE_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffControl
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankFlashErase
</UL>

<P><STRONG><a name="[92f]"></a>WdgEn</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, watchdog.o(i.WdgEn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WdgEn
</UL>
<BR>[Calls]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_WdgEn____DISABLE_IRQ
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_WdgEn____ENABLE_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiUpgradeMcuSoftMsg
</UL>

<P><STRONG><a name="[930]"></a>WdgFeed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, watchdog.o(i.WdgFeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WdgFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_WdgEn____DISABLE_IRQ
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___10_watchdog_c_WdgEn____ENABLE_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[931]"></a>WiFiAppSetPlayMode</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, wifi_control.o(i.WiFiAppSetPlayMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = WiFiAppSetPlayMode &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[932]"></a>WiFiCardStateSet</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiCardStateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = WiFiCardStateSet &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[85e]"></a>WiFiControl</STRONG> (Thumb, 806 bytes, Stack size 40 bytes, wifi_control.o(i.WiFiControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = WiFiControl &rArr; CommonMsgProccess &rArr; WiFi_CmdProcess &rArr; Mcu_RcvWiFiCmd &rArr; Mcu_RcvWiFiDataProcess &rArr; WiFi_SendCmdToMcu &rArr; WiFiAppSetPlayMode &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioSampleRateSet
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaSetChannel
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFirmwareUpgradeStateGet
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgRecv
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSdkVer
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioSysInfoSetBreakPoint
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioPlayerMute
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer
<LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModeSwitchState
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimer
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiPowerOnInitStateGet
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuSleepModeGet
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuSleepModeDeal
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuRevPassThroughDataProcess
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
</UL>

<P><STRONG><a name="[859]"></a>WiFiControlGpioInit</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiControlGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WiFiControlGpioInit &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMclkIoConfig
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioI2sIoConfig
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartTxIoConfig
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartRxIoConfig
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdleControl
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[957]"></a>WiFiEthStateSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiEthStateSet))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[942]"></a>WiFiFactoryStateGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiFactoryStateGet))
<BR><BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiStateCheck
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiLedCb
</UL>

<P><STRONG><a name="[93d]"></a>WiFiFactoryStateSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiFactoryStateSet))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetProjectParams
</UL>

<P><STRONG><a name="[88b]"></a>WiFiFirmwareUpgradeStateGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiFirmwareUpgradeStateGet))
<BR><BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemind
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPowerOffDetect
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitor
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiStateCheck
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLdoinLevelMonitor
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiRequestMcuPowerOff
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiLedCb
</UL>

<P><STRONG><a name="[93e]"></a>WiFiFirmwareUpgradeStateSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiFirmwareUpgradeStateSet))
<BR><BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiWorkStateSet
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetProjectParams
</UL>

<P><STRONG><a name="[8e5]"></a>WiFiGetAt8563tSystemTime</STRONG> (Thumb, 642 bytes, Stack size 16 bytes, rtc_at8563.o(i.WiFiGetAt8563tSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = WiFiGetAt8563tSystemTime &rArr; WiFiSetAt8563tAlarmTime &rArr; I2cWriteNByte &rArr; I2cWriteBytes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerOnControl
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetAt8563tAlarmTime
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAt8563tAlarmCome
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAt8563tReadParam
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInitialize
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcTimerCB
</UL>

<P><STRONG><a name="[939]"></a>WiFiGetMcuCurPlayMode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiGetMcuCurPlayMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = WiFiGetMcuCurPlayMode &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSlaveSounBoxCntGet
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[93a]"></a>WiFiGetMcuSoundRemindLanguage</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiGetMcuSoundRemindLanguage))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = WiFiGetMcuSoundRemindLanguage &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[93b]"></a>WiFiGetMcuVolume</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiGetMcuVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = WiFiGetMcuVolume &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[93c]"></a>WiFiGetProjectParams</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiGetProjectParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = WiFiGetProjectParams &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFirmwareUpgradeStateSet
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFactoryStateSet
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[88a]"></a>WiFiKaiShuChildLockStateGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiKaiShuChildLockStateGet))
<BR><BR>[Called By]<UL><LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
</UL>

<P><STRONG><a name="[962]"></a>WiFiKaiShuChildLockStateSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiKaiShuChildLockStateSet))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[95f]"></a>WiFiKaiShuRadioSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiKaiShuRadioSet))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[934]"></a>WiFiKaiShuSleepModeDeal</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiKaiShuSleepModeDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = WiFiKaiShuSleepModeDeal &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
</UL>

<P><STRONG><a name="[933]"></a>WiFiKaiShuSleepModeGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiKaiShuSleepModeGet))
<BR><BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
</UL>

<P><STRONG><a name="[93f]"></a>WiFiKaiShuSleepModeSet</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiKaiShuSleepModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = WiFiKaiShuSleepModeSet &rArr; McuSyncWiFiVolume &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysVol
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuSyncWiFiVolume
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[8f7]"></a>WiFiKaiShuVolumeMaxGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiKaiShuVolumeMaxGet))
<BR><BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysVol
</UL>

<P><STRONG><a name="[940]"></a>WiFiKaiShuVolumeMaxSet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiKaiShuVolumeMaxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = WiFiKaiShuVolumeMaxSet &rArr; SetSysVol &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysVol
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[d2]"></a>WiFiLedCb</STRONG> (Thumb, 396 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiLedCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WiFiLedCb &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFirmwareUpgradeStateGet
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiWwwStateGet
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiTestStateLedCb
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMicState
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiRa0StateGet
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFactoryStateGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_control.o(i.WiFiControl)
</UL>
<P><STRONG><a name="[945]"></a>WiFiMuteStateSet</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiMuteStateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WiFiMuteStateSet &rArr; DacSoftMuteSet &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacSoftMuteSet
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacVolumeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[95a]"></a>WiFiMutliRoomStateSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiMutliRoomStateSet))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[946]"></a>WiFiNoticeMcuNextAlarmTime</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, wifi_control.o(i.WiFiNoticeMcuNextAlarmTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = WiFiNoticeMcuNextAlarmTime &rArr; WiFiSetAt8563tAlarmTime &rArr; I2cWriteNByte &rArr; I2cWriteBytes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarmTime
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetAlarmTime
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetAlarmStatus
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAlarmSetStatus
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetAt8563tAlarmTime
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[947]"></a>WiFiPowerOnInitProcess</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiPowerOnInitProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = WiFiPowerOnInitProcess &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_UartInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c0]"></a>WiFiPowerOnInitStateGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiPowerOnInitStateGet))
<BR><BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControl
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_CmdProcess
</UL>

<P><STRONG><a name="[953]"></a>WiFiPowerStateSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiPowerStateSet))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[944]"></a>WiFiRa0StateGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiRa0StateGet))
<BR><BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiStateCheck
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiLedCb
</UL>

<P><STRONG><a name="[958]"></a>WiFiRa0StateSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiRa0StateSet))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[949]"></a>WiFiRequestMcuPowerOff</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiRequestMcuPowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = WiFiRequestMcuPowerOff &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFirmwareUpgradeStateGet
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioSysInfoSetBreakPoint
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiStateCheck
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[960]"></a>WiFiSetAlarmRemindState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiSetAlarmRemindState))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[938]"></a>WiFiSetAt8563tAlarmTime</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, rtc_at8563.o(i.WiFiSetAt8563tAlarmTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = WiFiSetAt8563tAlarmTime &rArr; I2cWriteNByte &rArr; I2cWriteBytes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteNByte
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadNByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetAt8563tSystemTime
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiNoticeMcuNextAlarmTime
</UL>

<P><STRONG><a name="[8e6]"></a>WiFiSetAt8563tSystemTime</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, rtc_at8563.o(i.WiFiSetAt8563tSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WiFiSetAt8563tSystemTime &rArr; I2cWriteNByte &rArr; I2cWriteBytes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteNByte
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInitialize
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuWeekDay
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuSystemTime
</UL>

<P><STRONG><a name="[94a]"></a>WiFiSetMcuAlarmTime</STRONG> (Thumb, 538 bytes, Stack size 32 bytes, wifi_control.o(i.WiFiSetMcuAlarmTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = WiFiSetMcuAlarmTime &rArr; RtcCurAlarmSleepAndStop &rArr; SetSysVol &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispSendMessage
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcCurAlarmSleepAndStop
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuChangeSystemTimeZone
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[955]"></a>WiFiSetMcuLedState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiSetMcuLedState))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[94b]"></a>WiFiSetMcuSystemTime</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, wifi_control.o(i.WiFiSetMcuSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = WiFiSetMcuSystemTime &rArr; WiFiSetAt8563tSystemTime &rArr; I2cWriteNByte &rArr; I2cWriteBytes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetAt8563tSystemTime
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetCurrTime
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[94c]"></a>WiFiSetMcuVolume</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiSetMcuVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = WiFiSetMcuVolume &rArr; SetSysVol &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysVol
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[94d]"></a>WiFiSetMcuWeekDay</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, wifi_control.o(i.WiFiSetMcuWeekDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = WiFiSetMcuWeekDay &rArr; WiFiSetAt8563tSystemTime &rArr; I2cWriteNByte &rArr; I2cWriteBytes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetAt8563tSystemTime
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetCurrTime
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCurrTime
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[943]"></a>WiFiSetMicState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiSetMicState))
<BR><BR>[Called By]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_CmdProcess
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiLedCb
</UL>

<P><STRONG><a name="[959]"></a>WiFiSetRepeatMode</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiSetRepeatMode))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[7de]"></a>WiFiSlaveSounBoxCntGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiSlaveSounBoxCntGet))
<BR><BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuSetPlayMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetMcuCurPlayMode
</UL>

<P><STRONG><a name="[95b]"></a>WiFiSlaveSounBoxCntSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiSlaveSounBoxCntSet))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[801]"></a>WiFiSoundRemindStateSet</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiSoundRemindStateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = WiFiSoundRemindStateSet &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankFlashErase
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankDataUpgrade
</UL>

<P><STRONG><a name="[7c4]"></a>WiFiStateCheck</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiStateCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = WiFiStateCheck &rArr; WiFiRequestMcuPowerOff &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFirmwareUpgradeStateGet
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInCharge
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiWwwStateGet
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurBatterLevelAverage
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiRequestMcuPowerOff
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiRa0StateGet
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFactoryStateGet
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
</UL>

<P><STRONG><a name="[956]"></a>WiFiStationStateSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiStationStateSet))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[94e]"></a>WiFiTalkStateSet</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiTalkStateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WiFiTalkStateSet &rArr; DacSoftMuteSet &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerUnmute
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerMute
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacSoftMuteSet
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacVolumeSet
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhubPathSel
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhubPathClose
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmFifoClear
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacDigitalMuteSet
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[95c]"></a>WiFiTestModeStateSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiTestModeStateSet))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[941]"></a>WiFiTestStateLedCb</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiTestStateLedCb))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiLedCb
</UL>

<P><STRONG><a name="[94f]"></a>WiFiUSBStateSet</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiUSBStateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = WiFiUSBStateSet &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[950]"></a>WiFiUpgradeMcuSoftMsg</STRONG> (Thumb, 914 bytes, Stack size 16 bytes, wifi_control.o(i.WiFiUpgradeMcuSoftMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = WiFiUpgradeMcuSoftMsg &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgEn
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRxQueue
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankFlashErase
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[951]"></a>WiFiUpgradeMcuSoftRunning</STRONG> (Thumb, 1472 bytes, Stack size 24 bytes, wifi_control.o(i.WiFiUpgradeMcuSoftRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = WiFiUpgradeMcuSoftRunning &rArr; Mcu_SendCmdToWiFi &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankDataSaveFlash
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[7c2]"></a>WiFiWorkStateSet</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, wifi_control.o(i.WiFiWorkStateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WiFiWorkStateSet &rArr; DualBankDataUpgrade &rArr; BP_SaveInfo &rArr; SaveBPInfoToFlash &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFirmwareUpgradeStateSet
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualBankDataUpgrade
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[954]"></a>WiFiWpsStateSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiWpsStateSet))
<BR><BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[8d8]"></a>WiFiWwwStateGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifi_control.o(i.WiFiWwwStateGet))
<BR><BR>[Called By]<UL><LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcControlProcess
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiStateCheck
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiLedCb
</UL>

<P><STRONG><a name="[952]"></a>WiFiWwwStateSet</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wifi_control.o(i.WiFiWwwStateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = WiFiWwwStateSet &rArr; BP_SaveInfo &rArr; SaveBPInfoToFlash &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_SaveInfo
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_GetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
</UL>

<P><STRONG><a name="[7c3]"></a>WiFi_CmdProcess</STRONG> (Thumb, 2992 bytes, Stack size 8 bytes, wifi_uart_com.o(i.WiFi_CmdProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = WiFi_CmdProcess &rArr; Mcu_RcvWiFiCmd &rArr; Mcu_RcvWiFiDataProcess &rArr; WiFi_SendCmdToMcu &rArr; WiFiAppSetPlayMode &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiPowerOnInitStateGet
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SendCmdToMcu
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_RcvWiFiCmd
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMicState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommonMsgProccess
</UL>

<P><STRONG><a name="[89c]"></a>WiFi_SendCmdToMcu</STRONG> (Thumb, 1944 bytes, Stack size 24 bytes, wifi_uart_com.o(i.WiFi_SendCmdToMcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = WiFi_SendCmdToMcu &rArr; WiFiAppSetPlayMode &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_SendCmdToWiFi
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_SaveInfo
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_GetInfo
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleLedDisplayModeSet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiWorkStateSet
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleLedDispMode
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiWwwStateSet
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiWpsStateSet
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiUpgradeMcuSoftRunning
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiUpgradeMcuSoftMsg
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiUSBStateSet
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiTestModeStateSet
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiTalkStateSet
<LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiStationStateSet
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSoundRemindStateSet
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSlaveSounBoxCntSet
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetRepeatMode
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMicState
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuWeekDay
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuVolume
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuSystemTime
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuLedState
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetMcuAlarmTime
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiSetAlarmRemindState
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiRequestMcuPowerOff
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiRa0StateSet
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiPowerStateSet
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiNoticeMcuNextAlarmTime
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiMutliRoomStateSet
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiMuteStateSet
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuVolumeMaxSet
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuSleepModeSet
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuRadioSet
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiKaiShuChildLockStateSet
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetProjectParams
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetMcuVolume
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetMcuSoundRemindLanguage
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetMcuCurPlayMode
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFirmwareUpgradeStateSet
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFactoryStateSet
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiEthStateSet
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiCardStateSet
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiAppSetPlayMode
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveMcuRevPassThroughCmd
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuRevPassThroughData
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasterMcuRevPassThroughCmd
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_CmdProcess
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_RcvWiFiDataProcess
</UL>

<P><STRONG><a name="[948]"></a>WiFi_UartInit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, wifi_uart_com.o(i.WiFi_UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WiFi_UartInit &rArr; BuartInit &rArr; GetBuartBaudClk &rArr; ClkUseOsc32kCheckRc48m &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartExFifoInit
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartTxIoConfig
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioBuartRxIoConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiPowerOnInitProcess
</UL>

<P><STRONG><a name="[831]"></a>_FileRead</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, fat_file.o(i._FileRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsLock
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEntryNoFatChain
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsUnLock
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNextClusNum
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneSec
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSecNum
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileRead
</UL>

<P><STRONG><a name="[660]"></a>__ARM_common_memclr4_5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mp3_decode.o(i.__ARM_common_memclr4_5))
<BR><BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_scale_factors_parse
</UL>

<P><STRONG><a name="[65f]"></a>__ARM_common_memclr4_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mp3_decode.o(i.__ARM_common_memclr4_6))
<BR><BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp3_scale_factors_parse
</UL>

<P><STRONG><a name="[977]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[78c]"></a>__IsFunction2__</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gpio.o(i.__IsFunction2__))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __IsFunction2__ &rArr; GetDeviceClassType
</UL>
<BR>[Calls]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDeviceClassType
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartRecv
</UL>

<P><STRONG><a name="[15f]"></a>__IsFunction__</STRONG> (Thumb, 364 bytes, Stack size 8 bytes, gpio.o(i.__IsFunction__))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __IsFunction__
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_initialize
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacConfig
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_ParseMediaHeader
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleLinkKeyRspOp
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_AddDevice
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdtpCallback
</UL>

<P><STRONG><a name="[121]"></a>__down</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, semaphore.o(i.__down), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __down &rArr; vTaskSuspend &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irq
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irq
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atomic_add_return
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__common_semaphore_stub
</UL>

<P><STRONG><a name="[122]"></a>__down_interruptible</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, semaphore.o(i.__down_interruptible), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __down_interruptible &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_semaphore_c_04347d2c__Delay
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irq
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irq
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atomic_add_return
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atomic_add
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__common_semaphore_stub
</UL>

<P><STRONG><a name="[123]"></a>__down_trylock</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, semaphore.o(i.__down_trylock), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __down_trylock &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atomic_add_return
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__common_semaphore_stub
</UL>

<P><STRONG><a name="[971]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[974]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[975]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[976]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[979]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[97a]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[97b]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[978]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[124]"></a>__up</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, semaphore.o(i.__up), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __up &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_unlock_irqrestore
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spin_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__common_semaphore_stub
</UL>

<P><STRONG><a name="[712]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[997]"></a>_read_lock_irq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, locks.o(i._read_lock_irq))
<BR><BR>[Called By]<UL><LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_ioctl
</UL>

<P><STRONG><a name="[998]"></a>_read_unlock_irq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, locks.o(i._read_unlock_irq))
<BR><BR>[Called By]<UL><LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_ioctl
</UL>

<P><STRONG><a name="[967]"></a>_spin_lock_irq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, locks.o(i._spin_lock_irq), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
</UL>

<P><STRONG><a name="[964]"></a>_spin_lock_irqsave</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, locks.o(i._spin_lock_irqsave), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_trylock
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
</UL>

<P><STRONG><a name="[969]"></a>_spin_unlock_irq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, locks.o(i._spin_unlock_irq), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
</UL>

<P><STRONG><a name="[966]"></a>_spin_unlock_irqrestore</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, locks.o(i._spin_unlock_irqrestore), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_trylock
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
</UL>

<P><STRONG><a name="[109]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[9a7]"></a>_write_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, locks.o(i._write_lock))
<BR><BR>[Called By]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_task_register
</UL>

<P><STRONG><a name="[9a1]"></a>_write_lock_irq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, locks.o(i._write_lock_irq))
<BR><BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_tmrchk_cbfun
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_sleepon_msgqueue
</UL>

<P><STRONG><a name="[8af]"></a>_write_lock_irqsave</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, locks.o(i._write_lock_irqsave))
<BR><BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAddSet
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_idle_msgitem
</UL>

<P><STRONG><a name="[9a8]"></a>_write_unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, locks.o(i._write_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_task_register
</UL>

<P><STRONG><a name="[9a2]"></a>_write_unlock_irq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, locks.o(i._write_unlock_irq))
<BR><BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_tmrchk_cbfun
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_sleepon_msgqueue
</UL>

<P><STRONG><a name="[8b2]"></a>_write_unlock_irqrestore</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, locks.o(i._write_unlock_irqrestore))
<BR><BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAddSet
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_idle_msgitem
</UL>

<P><STRONG><a name="[203]"></a>audio_decoder_hardware_done_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mixer.o(i.audio_decoder_hardware_done_callback))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_interrupt_handler
</UL>

<P><STRONG><a name="[46f]"></a>audio_decoder_hardware_start_callback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mixer.o(i.audio_decoder_hardware_start_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = audio_decoder_hardware_start_callback &rArr; MixerProcess &rArr; MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SbcSbsynStart
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_mp3_decoder_start
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaDecoderStart
</UL>

<P><STRONG><a name="[204]"></a>audio_decoder_interrupt_callback</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, task_decoder.o(i.audio_decoder_interrupt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = audio_decoder_interrupt_callback &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_interrupt_handler
</UL>

<P><STRONG><a name="[21b]"></a>auxtmr_count_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, auxinfo.o(i.auxtmr_count_get))
<BR><BR>[Called By]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDeviceDetect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trapfault_handler_dumpstack
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetSystemTime
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[80e]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
</UL>

<P><STRONG><a name="[9b0]"></a>cpu_idle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, setup.o(i.cpu_idle))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[81c]"></a>disk_read</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBitMapSec
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBitMapSec
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FileRead
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOneSec
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFatSec
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadOneSec
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDirSec
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeClusAlloc
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatSaveDirSec
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFATSec
</UL>

<P><STRONG><a name="[81d]"></a>disk_write</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBitMapSec
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrite
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveOneSec
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveFatSec
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeClusAlloc
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExFatSaveDirSec
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFATSec
</UL>

<P><STRONG><a name="[71e]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[cd]"></a>fputc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; SwUartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwUartSend
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuartSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[687]"></a>ldexp</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ldexp &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_header_parse
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_convert_from_ieee_extended
</UL>

<P><STRONG><a name="[18]"></a>main</STRONG> (Thumb, 1970 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = main &rArr; MsgRecv &rArr; SysDeviceMsgCtrl &rArr; GotoNextMode &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_kernel
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_ioctl
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_get_lib_version
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiPowerOnInitProcess
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFirmwareUpgradeStateGet
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiControlGpioInit
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdgFeed
<LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1Set
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysVarInit
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerOnControl
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerKeyInit
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGetWakeUpFlag
<LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwUartTxInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashInfoInit
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashClkSet
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemindInit
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleLedDisplayModeSet
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFsTerminateFuc
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDriverTerminateFuc
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcLdoinVolInit
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInitialize
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAt8563tInit
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitorInit
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitor
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osc32kExtCapCalibrate
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsSetDebugFlag
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgRecv
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerSrcEnable
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerSetFadeSpeed
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerInit
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdCtrlRegInit
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSoundRemindPlaying
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInCharge
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEarphoneLink
<LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDeviceDetect
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetRegOneBit
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioClrRegOneBit
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioA0SetMode
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWakeupSrcName
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSilenceMuteFlag
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSdkVer
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPatchVersion
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLibVersionFs
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLibVersionFreertos
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLibVersionDriver
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCodeSize
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCodeEncryptedInfo
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBootVersionEx
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBootVersion
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshBTInfoAreaInit
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashUnlock
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqStyleSelect
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqStyleInit
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSwUartAsFuart
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispInit
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceDetect
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DacVolumeSet
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkPorRcToDpll
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleGateEn
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkModuleEn
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetFshcClkFreq
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkGetCurrentSysClkFreq
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheInit
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootUpgradeChk
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetVersion
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_LoadInfo
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioOutputInit
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioAnaInit
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AmpMuteControl
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcVolumeSet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[21d]"></a>mmm_free</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, mmm.o(i.mmm_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mmm_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackMemFree
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_tmrchk_cbfun
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeAppleiAp
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeAdvAvrcpHeap
</UL>

<P><STRONG><a name="[98d]"></a>mmm_ioctl</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, mmm.o(i.mmm_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mmm_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_unlock_irq
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_lock_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21f]"></a>mmm_malloc</STRONG> (Thumb, 610 bytes, Stack size 48 bytes, mmm.o(i.mmm_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_memzcmp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInitialize
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveStateCtrl
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackiApMemAlloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackSppMemAlloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackMemAlloc
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackAdvAvrcpMemAlloc
</UL>

<P><STRONG><a name="[8b0]"></a>msgq_msg_ioctl</STRONG> (Thumb, 624 bytes, Stack size 80 bytes, msgq.o(i.msgq_msg_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_getpid
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgismember
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgisemptyset
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgfillset
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irq
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAddSet
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgClear
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[118]"></a>msgq_msg_notify_fromisr</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, msgq.o(i.msgq_msg_notify_fromisr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = msgq_msg_notify_fromisr &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_getpid
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_interrupt
</UL>

<P><STRONG><a name="[8b3]"></a>msgq_msg_recv</STRONG> (Thumb, 472 bytes, Stack size 64 bytes, msgq.o(i.msgq_msg_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = msgq_msg_recv &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxtmr_count_get
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_getpid
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_msgq_c_38077172__Delay
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgismember
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgisemptyset
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irq
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irq
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTick1MsCnt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgRecv
</UL>

<P><STRONG><a name="[8b6]"></a>msgq_msg_send</STRONG> (Thumb, 612 bytes, Stack size 128 bytes, msgq.o(i.msgq_msg_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = msgq_msg_send &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_getpid
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgismember
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgisemptyset
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_idle_msgitem
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irq
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irq
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_interrupt_callback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
</UL>

<P><STRONG><a name="[8b7]"></a>msgq_msg_send_fromisr</STRONG> (Thumb, 624 bytes, Stack size 160 bytes, msgq.o(i.msgq_msg_send_fromisr))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_getpid
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgismember
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgisemptyset
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookup_idle_msgitem
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_interrupt_callback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
</UL>

<P><STRONG><a name="[9a5]"></a>msgq_sleepon_msgqueue</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, msgq.o(i.msgq_sleepon_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = msgq_sleepon_msgqueue &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_getpid
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_msgq_c_38077172__Delay
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irq
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
</UL>

<P><STRONG><a name="[9a6]"></a>msgq_task_register</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, msgq.o(i.msgq_task_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msgq_task_register &rArr; msgaddset
</UL>
<BR>[Calls]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgaddset
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
</UL>

<P><STRONG><a name="[d7]"></a>msgq_tmrchk_cbfun</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, msgq.o(i.msgq_tmrchk_cbfun))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = msgq_tmrchk_cbfun &rArr; mmm_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irq
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irq
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.prvIdleTask)
</UL>
<P><STRONG><a name="[9ab]"></a>prvCheckDelayedTasks</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, tasks.o(i.prvCheckDelayedTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCheckDelayedTasks
</UL>
<BR>[Calls]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
</UL>

<P><STRONG><a name="[770]"></a>schedule_timeout</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(i.schedule_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_sleepon_msgqueue
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSyncPlay
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskWaitResp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuiTaskEntrance
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioProcessTaskEntrance
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait4EventTimeout
</UL>

<P><STRONG><a name="[96e]"></a>schedule_yield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, setup.o(i.schedule_yield))
<BR><BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_sleepon_msgqueue
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_notify_fromisr
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
</UL>

<P><STRONG><a name="[9b3]"></a>setup_stack_frame</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, setup.o(i.setup_stack_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = setup_stack_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
</UL>

<P><STRONG><a name="[80d]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
</UL>

<P><STRONG><a name="[982]"></a>start_kernel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, init.o(i.start_kernel))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = start_kernel &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b5]"></a>start_schedule</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setup.o(i.start_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = start_schedule &rArr; systick_config &rArr; ClkGetCurrentSysClkFreq &rArr; ClkUseOsc32kCheckRc48m &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_first_task
</UL>
<BR>[Called By]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[ee]"></a>systick_config_basic</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, setup.o(i.systick_config_basic))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_delay
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[ed]"></a>systick_ioctl</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, setup.o(i.systick_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = systick_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_delay
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[99a]"></a>task_getpid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.task_getpid))
<BR><BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_sleepon_msgqueue
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_notify_fromisr
</UL>

<P><STRONG><a name="[f7]"></a>trapfault_handler_dumpstack</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, print.o(i.trapfault_handler_dumpstack))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = trapfault_handler_dumpstack &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxtmr_count_get
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usagefault_handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busfault_handler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmanage_handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardfault_handler
</UL>

<P><STRONG><a name="[9b1]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[f2]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;early_init_task
</UL>

<P><STRONG><a name="[9aa]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[965]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckDelayedTasks
</UL>

<P><STRONG><a name="[9ba]"></a>vListInsertIndex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertIndex))
<BR><BR>[Called By]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>

<P><STRONG><a name="[9b4]"></a>vListInsertIndexByPid</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsertIndexByPid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsertIndexByPid
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
</UL>

<P><STRONG><a name="[96a]"></a>vListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.vListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckDelayedTasks
</UL>

<P><STRONG><a name="[117]"></a>vTaskIncrementTick</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, tasks.o(i.vTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskIncrementTick &rArr; prvCheckDelayedTasks
</UL>
<BR>[Calls]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckDelayedTasks
</UL>
<BR>[Called By]<UL><LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_interrupt
</UL>

<P><STRONG><a name="[99f]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
</UL>

<P><STRONG><a name="[970]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_sleepon_msgqueue
</UL>

<P><STRONG><a name="[984]"></a>vTaskPrioritySet</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, tasks.o(i.vTaskPrioritySet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskPrioritySet
</UL>
<BR>[Calls]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_CRITICAL_SECTION
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTER_CRITICAL_SECTION
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96b]"></a>vTaskResume</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tasks.o(i.vTaskResume), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskResume
</UL>
<BR>[Calls]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_CRITICAL_SECTION
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTER_CRITICAL_SECTION
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_trylock
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
</UL>

<P><STRONG><a name="[7e4]"></a>vTaskSleep</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
</UL>

<P><STRONG><a name="[983]"></a>vTaskStartScheduler</STRONG> (Thumb, 76 bytes, Stack size 72 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_init_task
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_schedule
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_tasks_c_current__save_reg_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96d]"></a>vTaskSuspend</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tasks.o(i.vTaskSuspend), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vTaskSuspend &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_CRITICAL_SECTION
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTER_CRITICAL_SECTION
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
</UL>

<P><STRONG><a name="[99d]"></a>vTaskSuspendAll</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Calls]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atomic_add_return
</UL>
<BR>[Called By]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
</UL>

<P><STRONG><a name="[120]"></a>vTaskSwitchContext</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pendsv_interrupt
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[994]"></a>xTaskGenericCreate</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = xTaskGenericCreate &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGeneratePid
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_task_register
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertIndexByPid
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_stack_frame
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_CRITICAL_SECTION
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTER_CRITICAL_SECTION
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e3]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[7d4]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SilenceAmpMuteProc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskEntrance
</UL>

<P><STRONG><a name="[9b8]"></a>xTaskIsTaskSuspended</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.xTaskIsTaskSuspended), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[96c]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__up
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_trylock
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down_interruptible
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__down
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_notify_fromisr
</UL>

<P><STRONG><a name="[9a0]"></a>xTaskResumeAll</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atomic_sub_return
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertIndex
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_CRITICAL_SECTION
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTER_CRITICAL_SECTION
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
</UL>

<P><STRONG><a name="[80b]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
</UL>

<P><STRONG><a name="[9bc]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[686]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRateConvertInit
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_header_parse
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_convert_from_ieee_extended
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[9bf]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[9c2]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[9c6]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[80a]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
<LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[9c4]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[97d]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[9c5]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[688]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRateConvertInit
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_header_parse
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_convert_from_ieee_extended
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[9c7]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[685]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aif_header_parse
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;af_convert_from_ieee_extended
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[b20]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[808]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[b21]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[809]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[9c8]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[9be]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[9c1]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[972]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[9c9]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[8ee]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRateConvertInit
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[9cb]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[80c]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRateConvertInit
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
</UL>

<P><STRONG><a name="[9cc]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[810]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
</UL>

<P><STRONG><a name="[9ce]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[9d3]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[806]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
</UL>

<P><STRONG><a name="[9d0]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[813]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
</UL>

<P><STRONG><a name="[9d1]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[80f]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
</UL>

<P><STRONG><a name="[b22]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[805]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRateConvertInit
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
</UL>

<P><STRONG><a name="[b23]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[b24]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[9d2]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[9d6]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[807]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRateConvertInit
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
</UL>

<P><STRONG><a name="[9d4]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[9cd]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[9bd]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[8ed]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRateConvertInit
</UL>

<P><STRONG><a name="[9d5]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[811]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
</UL>

<P><STRONG><a name="[9d7]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[812]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqFilterCoefsCalculate
</UL>

<P><STRONG><a name="[9d9]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[9c3]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[973]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[9da]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7c7]"></a>DecoderGetType</STRONG> (Thumb, 476 bytes, Stack size 16 bytes, task_decoder.o(i.DecoderGetType))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DecoderGetType &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_mread_callback_set
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_seek
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_initialize
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_get_error_code
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_close
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStart
</UL>

<P><STRONG><a name="[7cc]"></a>DecoderPlayStart</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, task_decoder.o(i.DecoderPlayStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = DecoderPlayStart &rArr; AudioSampleRateSet &rArr; AudioStaOutSetChannel &rArr; DacSoftMuteSet &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_seek
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_initialize
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_get_error_code
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerUnmute
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerEnable
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerConfigFormat
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileSeek
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioSampleRateSet
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSupportSourceType
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderGetType
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskEntrance
</UL>

<P><STRONG><a name="[7cf]"></a>DecoderPlayStop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, task_decoder.o(i.DecoderPlayStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = DecoderPlayStop &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mv_mread_callback_unset
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_audio_decoder_with_hardware
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_clear_xr_done
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_check_xr_done
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskEntrance
</UL>

<P><STRONG><a name="[7d9]"></a>DecoderTaskWaitResp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, task_decoder.o(i.DecoderTaskWaitResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DecoderTaskWaitResp &rArr; schedule_timeout &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_timeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskStop
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskSeek
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskResume
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskPlayStart
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskPause
</UL>

<P><STRONG><a name="[7cd]"></a>IsSupportSourceType</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, task_decoder.o(i.IsSupportSourceType))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsSupportSourceType
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderPlayStart
</UL>

<P><STRONG><a name="[7d7]"></a>SongPlayDo</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, task_decoder.o(i.SongPlayDo))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = SongPlayDo &rArr; MixerSetData &rArr; MixerProcess &rArr; MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_audio_decoder_with_hardware
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_get_error_code
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_decode
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_convert_pcm_data_layout
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_clear_xr_done
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_check_xr_done
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_can_continue
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundRemindFillStream
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SilenceAmpMuteProc
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PastTimeGet
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerSetData
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerIsDone
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalGainSet
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecoderTaskEntrance
</UL>

<P><STRONG><a name="[19]"></a>__mv_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[91d]"></a>GetModeId</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, dev_state_machine.o(i.GetModeId))
<BR><BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceMsgCtrl
</UL>

<P><STRONG><a name="[853]"></a>GotoNextMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dev_state_machine.o(i.GotoNextMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = GotoNextMode &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
</UL>
<BR>[Called By]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysDeviceMsgCtrl
</UL>

<P><STRONG><a name="[7fa]"></a>DisplayLunarDate</STRONG> (Thumb, 460 bytes, Stack size 232 bytes, rtc_control.o(i.DisplayLunarDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = DisplayLunarDate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarToLunar
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeavenlyStem
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEarthlyBranch
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcTimerCB
</UL>

<P><STRONG><a name="[83f]"></a>FlshErasePairedListArea</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bte2prom.o(i.FlshErasePairedListArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = FlshErasePairedListArea &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashErase
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshSavePairedList
</UL>

<P><STRONG><a name="[839]"></a>FlshGetBtPairingInfoOffsetCallBk</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bte2prom.o(i.FlshGetBtPairingInfoOffsetCallBk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FlshGetBtPairingInfoOffsetCallBk &rArr; SpiFlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshLoad1of8Dev
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSave8DevRec
</UL>

<P><STRONG><a name="[83a]"></a>FlshGetPairingInfoWriteOffset</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, bte2prom.o(i.FlshGetPairingInfoWriteOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FlshGetPairingInfoWriteOffset &rArr; SpiFlashWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashWrite
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashErase
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSave8DevRec
</UL>

<P><STRONG><a name="[83b]"></a>FlshPairedListSync</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, bte2prom.o(i.FlshPairedListSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = FlshPairedListSync &rArr; FlshSavePairedList &rArr; FlshUpdateAllPairedList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetpairedListIndex
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshSavePairedList
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshLoad1of8Dev
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSave8DevRec
</UL>

<P><STRONG><a name="[83c]"></a>FlshSavePairedList</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bte2prom.o(i.FlshSavePairedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = FlshSavePairedList &rArr; FlshUpdateAllPairedList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshUpdateAllPairedList
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshErasePairedListArea
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshLoad1of8Dev
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSave8DevRec
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshPairedListSync
</UL>

<P><STRONG><a name="[841]"></a>FlshUpdateAllPairedList</STRONG> (Thumb, 222 bytes, Stack size 88 bytes, bte2prom.o(i.FlshUpdateAllPairedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = FlshUpdateAllPairedList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashWrite
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshSavePairedList
</UL>

<P><STRONG><a name="[840]"></a>GetpairedListIndex</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bte2prom.o(i.GetpairedListIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetpairedListIndex &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlshPairedListSync
</UL>

<P><STRONG><a name="[728]"></a>AdcChannelKeyGet</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, adc_key.o(i.AdcChannelKeyGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AdcChannelKeyGet &rArr; SarAdcChannelGetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcChannelGetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcKeyIndex
</UL>

<P><STRONG><a name="[848]"></a>init_waitqueue_head</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, presearch.o(i.init_waitqueue_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_waitqueue_head
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsSyncInit
</UL>

<P><STRONG><a name="[867]"></a>I2cInfoInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i2c.o(i.I2cInfoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2cInfoInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cMasterCreate
</UL>

<P><STRONG><a name="[838]"></a>FindLatestBPBak</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, breakpoint.o(i.FindLatestBPBak))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FindLatestBPBak &rArr; SpiFlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBPInfoToFlash
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBPInfoFromFlash
</UL>

<P><STRONG><a name="[782]"></a>LoadBPInfoFromFlash</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, breakpoint.o(i.LoadBPInfoFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LoadBPInfoFromFlash &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashErase
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBakBPInfo
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLatestBPBak
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_LoadInfo
</UL>

<P><STRONG><a name="[892]"></a>LoadBakBPInfo</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, breakpoint.o(i.LoadBakBPInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LoadBakBPInfo &rArr; NvmWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadBPInfoFromFlash
</UL>

<P><STRONG><a name="[783]"></a>SaveBPInfoToFlash</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, breakpoint.o(i.SaveBPInfoToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SaveBPInfoToFlash &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBakBPInfo
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLatestBPBak
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BP_SaveInfo
</UL>

<P><STRONG><a name="[8f6]"></a>SaveBakBPInfo</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, breakpoint.o(i.SaveBakBPInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SaveBakBPInfo &rArr; SpiFlashWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashWrite
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashErase
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc8CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveBPInfoToFlash
</UL>

<P><STRONG><a name="[8bd]"></a>PowerLdoinLevelMonitor</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, power_management.o(i.PowerLdoinLevelMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = PowerLdoinLevelMonitor &rArr; MsgSend &rArr; msgq_msg_send_fromisr &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiFirmwareUpgradeStateGet
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeOutSet
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleLedDisplayModeSet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgSend
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsTimeOut
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsInCharge
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcGetLdoinVoltage
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitorDisp
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurBatterLevelAverage
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitorInit
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerMonitor
</UL>

<P><STRONG><a name="[8d3]"></a>RtcAt8563tReadParam</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, rtc_at8563.o(i.RtcAt8563tReadParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = RtcAt8563tReadParam &rArr; I2cReadNByte &rArr; I2cSendAddr &rArr; I2cWriteByte &rArr; I2cChkAck &rArr; SetSCL &rArr; GpioSetRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cReadNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAt8563tInit
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFiGetAt8563tSystemTime
</UL>

<P><STRONG><a name="[8d4]"></a>RtcAt8563tWriteParam</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtc_at8563.o(i.RtcAt8563tWriteParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = RtcAt8563tWriteParam &rArr; I2cWriteNByte &rArr; I2cWriteBytes &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cWriteNByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcAt8563tInit
</UL>

<P><STRONG><a name="[891]"></a>SingleLedChangeDutyFunc</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, singled_display.o(i.SingleLedChangeDutyFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SingleLedChangeDutyFunc &rArr; PwmEnableChannel &rArr; GpioClrRegOneBit
</UL>
<BR>[Calls]<UL><LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmEnableChannel
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedFlushDisp
</UL>

<P><STRONG><a name="[89b]"></a>GetRxQueueLen</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wifi_uart_com.o(i.GetRxQueueLen))
<BR><BR>[Called By]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_RcvWiFiCmd
</UL>

<P><STRONG><a name="[20]"></a>GetNameResultHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bt_stack_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetNameResultHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_stack_api.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>global_callback</STRONG> (Thumb, 602 bytes, Stack size 24 bytes, bt_stack_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = global_callback &rArr; SEC_AuthorizeServiceB &rArr; SEC_AddDeviceRecord &rArr; DDB_AddRecord &rArr; FlashSave8DevRec &rArr; FlshPairedListSync &rArr; FlshSavePairedList &rArr; FlshUpdateAllPairedList &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_UserConfirm
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_SetPin
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AuthorizeServiceB
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_AcceptIncomingLink
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS_SelectDeviceResult
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNameReq
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdAddrToU8
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_stack_api.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>reconnectTimerNotify</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, bt_stack_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = reconnectTimerNotify &rArr; A2DP_OpenStream &rArr; A2dpFindExistingConnection &rArr; A2dpGetConnectedInfo &rArr; AVDEV_GetCapabilities &rArr; AvdevSendCommand &rArr; AVDTP_GetAllCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurConnectedRemDevAdd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_CreateServiceLink
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Connect
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_OpenStream
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_stack_api.o(.text)
</UL>
<P><STRONG><a name="[16d]"></a>SetDevLocaName</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[158]"></a>SetExtInqResponseData</STRONG> (Thumb, 146 bytes, Stack size 256 bytes, bt_stack_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetExtInquiryRsp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackRunInit
</UL>

<P><STRONG><a name="[23]"></a>SPPEventHandle</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, btm_spp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPPEventHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btm_spp.o(.text)
</UL>
<P><STRONG><a name="[1dc]"></a>SaveNvRamRecNum</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ddb4sp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
</UL>

<P><STRONG><a name="[1de]"></a>LoadOneNvramInfo</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ddb4sp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmRead
</UL>

<P><STRONG><a name="[1e0]"></a>SaveNvRamInfo</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ddb4sp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
</UL>

<P><STRONG><a name="[1e3]"></a>DbdAllocateRecord</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ddb4sp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DbdAllocateRecord &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_AddRecord
</UL>

<P><STRONG><a name="[1e7]"></a>DdbFindRecord</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ddb4sp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DdbFindRecord &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_DeleteRecord
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_FindRecord
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDB_AddRecord
</UL>

<P><STRONG><a name="[8f0]"></a>SarAdcGetAverageValue</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, adc.o(i.SarAdcGetAverageValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SarAdcGetAverageValue &rArr; SarAdcChannelGetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcChannelGetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcGetLdoinVoltage
</UL>

<P><STRONG><a name="[8f2]"></a>SarAdcIsTrimmed</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, adc.o(i.SarAdcIsTrimmed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SarAdcIsTrimmed &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcLoadParamFromOTP
</UL>

<P><STRONG><a name="[8f4]"></a>SarAdcLoadParamFromOTP</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, adc.o(i.SarAdcLoadParamFromOTP))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SarAdcLoadParamFromOTP &rArr; SarAdcIsTrimmed &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LdoGetOtpTrimValue
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcIsTrimmed
</UL>
<BR>[Called By]<UL><LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcLdoinVolInit
</UL>

<P><STRONG><a name="[78b]"></a>GetBuartBaudClk</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, buart.o(i.GetBuartBaudClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetBuartBaudClk &rArr; ClkUseOsc32kCheckRc48m &rArr; TimeOutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC48MHzTrimBy1MHz
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUseOsc32kCheckRc48m
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkCurrentClkModeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuartIOctl
</UL>

<P><STRONG><a name="[790]"></a>SendCmdToCache</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cache.o(i.SendCmdToCache))
<BR><BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacheInit
</UL>

<P><STRONG><a name="[89d]"></a>MixerCheckEmpty</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mixer.o(i.MixerCheckEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MixerCheckEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmFifoGetReadAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckTx
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckMix
</UL>

<P><STRONG><a name="[89f]"></a>MixerCheckMix</STRONG> (Thumb, 2212 bytes, Stack size 56 bytes, mixer.o(i.MixerCheckMix))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRateConvert
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerProcess
</UL>

<P><STRONG><a name="[8a1]"></a>MixerCheckTx</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, mixer.o(i.MixerCheckTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MixerCheckTx &rArr; MixerCheckEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmTxTransferData
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmTxIsTransferDone
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmTxDoneSignalClear
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmTxSetPcmDataMode
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_clear_pcm_transfer_done
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_check_pcm_transfer_done
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmTxSetGain
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmFifoGetRemainSamples
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmFifoGetReadAddr
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcmFifoGetDepth
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerProcess
</UL>

<P><STRONG><a name="[8ac]"></a>MixerProcess</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mixer.o(i.MixerProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MixerProcess &rArr; MixerCheckMix &rArr; SampleRateConvert &rArr; SampleRateConvertA
</UL>
<BR>[Calls]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_mixer_c_4d3fe62a____DISABLE_FAULT_IRQ
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_mixer_c_4d3fe62a____ENABLE_FAULT_IRQ
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckTx
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerCheckMix
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerSetData
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MixerIsDone
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audio_decoder_hardware_start_callback
</UL>

<P><STRONG><a name="[8ec]"></a>SampleRateConvertA</STRONG> (Thumb, 508 bytes, Stack size 20 bytes, sample_rate_convert.o(i.SampleRateConvertA))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SampleRateConvertA
</UL>
<BR>[Called By]<UL><LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRateConvert
</UL>

<P><STRONG><a name="[919]"></a>SpiFlashConstDataIdxFind</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, spi_flash.o(i.SpiFlashConstDataIdxFind))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SpiFlashConstDataIdxFind &rArr; SpiFlashRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFlashConstGetInfo
</UL>

<P><STRONG><a name="[738]"></a>AnalogModulePowerDwon</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wakeup.o(i.AnalogModulePowerDwon))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AnalogModulePowerDwon &rArr; CodecDacChannelSel &rArr; CodecDacChannelDisconnect &rArr; CodecMixPgaDisconnect &rArr; DelayMs &rArr; vTaskSleep &rArr; xTaskResumeAll &rArr; msgq_msg_ioctl &rArr;  xTaskResumeAll (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacChannelSel
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecAdcAnaDeInit
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecAdcChannelSel
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacMuteSet
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SarAdcPowerDown
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodecDacDeinit
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysPowerDownOtp
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___8_wakeup_c_93fc64cc____DISABLE_FAULT_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysGotoDeepSleep
</UL>

<P><STRONG><a name="[796]"></a>GetDiffMs</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timer_api.o(i.GetDiffMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDiffMs
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTick1MsCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTimer
</UL>

<P><STRONG><a name="[7]"></a>AudioCallBackDef</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, device_audio.o(i.AudioCallBackDef))
<BR>[Address Reference Count : 1]<UL><LI> device_audio.o(.data)
</UL>
<P><STRONG><a name="[9a3]"></a>list_add</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, msgq.o(i.list_add))
<BR><BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_tmrchk_cbfun
</UL>

<P><STRONG><a name="[9a4]"></a>list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, msgq.o(i.list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
</UL>

<P><STRONG><a name="[97e]"></a>lookup_idle_msgitem</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, msgq.o(i.lookup_idle_msgitem))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lookup_idle_msgitem
</UL>
<BR>[Calls]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_unlock_irqrestore
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_lock_irqsave
</UL>
<BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
</UL>

<P><STRONG><a name="[8b1]"></a>msgaddset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, msgq.o(i.msgaddset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = msgaddset
</UL>
<BR>[Called By]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgAddSet
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_task_register
</UL>

<P><STRONG><a name="[99b]"></a>msgfillset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, msgq.o(i.msgfillset))
<BR><BR>[Called By]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
</UL>

<P><STRONG><a name="[99c]"></a>msgisemptyset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, msgq.o(i.msgisemptyset))
<BR><BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
</UL>

<P><STRONG><a name="[99e]"></a>msgismember</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, msgq.o(i.msgismember))
<BR><BR>[Called By]<UL><LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send_fromisr
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_send
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_ioctl
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_msg_recv
</UL>

<P><STRONG><a name="[9a9]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSleep
</UL>

<P><STRONG><a name="[9ac]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; mmm_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXIT_CRITICAL_SECTION
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENTER_CRITICAL_SECTION
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[9af]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = prvDeleteTCB &rArr; mmm_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[d8]"></a>prvIdleTask</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; mmm_free &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auxtmr_count_get
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_yield
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_idle
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[f3]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;early_init_task
</UL>

<P><STRONG><a name="[9b2]"></a>setup_init_task</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, tasks.o(i.setup_init_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = setup_init_task &rArr; mmm_malloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgq_task_register
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertIndexByPid
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_stack_frame
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[9b7]"></a>vTaskGeneratePid</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.vTaskGeneratePid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskGeneratePid
</UL>
<BR>[Calls]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[999]"></a>mmm_memzcmp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mmm.o(i.mmm_memzcmp))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmm_malloc
</UL>

<P><STRONG><a name="[4e]"></a>AppRcpCallback</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, bt_a2dp_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = AppRcpCallback &rArr; DoPasserAVRCP_EVENT_ADV_RESPONSE &rArr; DoAVRCP_CtGetMediaInfo_ &rArr; AVRCP_CtGetMediaInfo &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReconnectTimer
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackCheckBB
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_ConnectRsp
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtRegisterAddressedPlayerChangedNotification_
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CancelAdvavrcpTimer
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreAdavrcpcmdResource
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPasserAVRCP_EVENT_ADV_RESPONSE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_a2dp_app.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>AppA2dpCallBack</STRONG> (Thumb, 1016 bytes, Stack size 48 bytes, bt_a2dp_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = AppA2dpCallBack &rArr; A2dpSetStreamConfig &rArr; AVDTP_OpenStream &rArr; AvdtpSigStreamSetConfig &rArr; AvdtpSigStreamSendCmdWithParms &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackDataStatusCallBackFunc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtGetMediaInfo_
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Disconnect
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReconnectTimer
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_FindChannelByLocalIdent
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackCheckBB
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_StartStreamRsp
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_ReconfigRsp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_ParseMediaHeader
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpSetStreamConfig
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpOpenStreamRsp
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_GetRegisteredCodec
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvavrcpTimer_
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtRegisterTrackStartNotification_
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_a2dp_app.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>AdvavrcpCmdTimerNotify</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bt_a2dp_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = AdvavrcpCmdTimerNotify &rArr; DoAVRCP_CtGetPlayStatus_ &rArr; AVRCP_CtGetPlayStatus &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAVRCP_CtGetPlayStatus_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_a2dp_app.o(.text)
</UL>
<P><STRONG><a name="[241]"></a>ResetAutoTransferTimer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ResetAutoTransferTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandsFreeAppCallback
</UL>

<P><STRONG><a name="[4f]"></a>HandsFreeAppCallback</STRONG> (Thumb, 1284 bytes, Stack size 24 bytes, bt_handsfree_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = HandsFreeAppCallback &rArr; BtConnectA2dpOnly &rArr; A2DP_OpenStream &rArr; A2dpFindExistingConnection &rArr; A2dpGetConnectedInfo &rArr; AVDEV_GetCapabilities &rArr; AvdevSendCommand &rArr; AVDTP_GetAllCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackDataStatusCallBackFunc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtConnectA2dpOnly
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetReconnectTimer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetHciScoPacketSize
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScoHciHandle
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetAutoTransferTimer
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackCheckBB
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bt_handsfree_app.o(.text)
</UL>
<P><STRONG><a name="[24b]"></a>IsStartAudioTransferTimeOut</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAudioTransfer
</UL>

<P><STRONG><a name="[24d]"></a>CmdGet</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSelectPhonebook_
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHfDtmf_
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTGetPhonebookSize_
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTGetPBListEntry_
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDialOnePhoneNumber_
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_cscs
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_vol_sync
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_get_pb_entry
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_get_pb_info
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_select_pb
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_pbquery
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_get_list_current_call
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_dtmf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_nrec
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_vrec
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_spkvol
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_memdial
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_dial
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_redial
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_hungup
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_accept
</UL>

<P><STRONG><a name="[258]"></a>CmdSend</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bt_handsfree_app.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTSelectPhonebook_
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTHfDtmf_
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTGetPhonebookSize_
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTGetPBListEntry_
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTDialOnePhoneNumber_
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_cscs
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_vol_sync
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_get_pb_entry
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_get_pb_info
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_select_pb
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_pbquery
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_get_list_current_call
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_dtmf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_nrec
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_vrec
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_spkvol
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_memdial
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_dial
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_redial
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_hungup
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_hfp_accept
</UL>

<P><STRONG><a name="[295]"></a>A2dpGetConnectedInfo</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, a2dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = A2dpGetConnectedInfo &rArr; AVDEV_GetCapabilities &rArr; AvdevSendCommand &rArr; AVDTP_GetAllCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_GetCapabilities
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_DiscoverStreamEndpoints
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpFreeStreamInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpFindExistingConnection
</UL>

<P><STRONG><a name="[299]"></a>A2dpFindExistingConnection</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, a2dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = A2dpFindExistingConnection &rArr; A2dpGetConnectedInfo &rArr; AVDEV_GetCapabilities &rArr; AvdevSendCommand &rArr; AVDTP_GetAllCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_FindConnectedDevice
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpGetConnectedInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_OpenStream
</UL>

<P><STRONG><a name="[29b]"></a>A2dpOpenNewStream</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, a2dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = A2dpOpenNewStream &rArr; A2dpStartServiceQuery &rArr; SDP_Query &rArr; StartNextQuery &rArr; SdpClientStartConnection &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_CreateACLLink
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStartServiceQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2DP_OpenStream
</UL>

<P><STRONG><a name="[51]"></a>A2dpCloseTimer</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, a2dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = A2dpCloseTimer &rArr; A2dpStreamClose &rArr; AVDEV_DecrementUseCount &rArr; AVDTP_Disconnect &rArr; AvdtpDisconnect &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStreamClose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> a2dp.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>AvCtpCallback</STRONG> (Thumb, 404 bytes, Stack size 128 bytes, avrcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = AvCtpCallback &rArr; AvrcpHandlePanelRsp &rArr; AvrcpHandleAdvRsp &rArr; AvrcpHandleAdvancedResponse &rArr; AvrcpSendNextCommand &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveDataLink
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_DeregisterHandler
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpResetPanelConnection
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelTxDone
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelRsp
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelOperands
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelInput
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avrcp.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>AvrcpCmgrCallback</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, avrcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = AvrcpCmgrCallback &rArr; AvrcpStartServiceQuery &rArr; SDP_Query &rArr; StartNextQuery &rArr; SdpClientStartConnection &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpStartServiceQuery
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpReportFailedConnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avrcp.o(.text)
</UL>
<P><STRONG><a name="[2d0]"></a>hfRegisterSDPandSEC</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_DeregisterServerChannel
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfRegisterSdpServices
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfDeregisterSdpServices
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_Register
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_DeregisterHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_RegisterSec
</UL>

<P><STRONG><a name="[2dc]"></a>hfDisconnectRFCOMM</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CloseChannel
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveAudioLink
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IsAudioUp
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HF_DisconnectServiceLink
</UL>

<P><STRONG><a name="[2fe]"></a>HidDataHandler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = HidDataHandler &rArr; HandleHidSetProtocol &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleHidSetProtocol
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidL2Callback
</UL>

<P><STRONG><a name="[57]"></a>HidL2Callback</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, hid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = HidL2Callback &rArr; HidDataHandler &rArr; HandleHidSetProtocol &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectRsp
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HidDataHandler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hid.o(.text)
</UL>
<P><STRONG><a name="[30d]"></a>closeDevice</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_FlushTx
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_FlushRx
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openServerPort
</UL>

<P><STRONG><a name="[30e]"></a>removeSdpService</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_RemoveRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deRegisterService
</UL>

<P><STRONG><a name="[310]"></a>deRegisterService</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_DeregisterService
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeSdpService
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_DeregisterServerChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Close
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openServerPort
</UL>

<P><STRONG><a name="[313]"></a>insertRfCommChannel</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, spp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSdpService
</UL>

<P><STRONG><a name="[312]"></a>addSdpService</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_AddRecord
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertRfCommChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openServerPort
</UL>

<P><STRONG><a name="[315]"></a>sendToRfComm</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, spp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = sendToRfComm &rArr; RF_SendData &rArr; RfMUXCheckTxQueues &rArr; RfMUXCheckNextTxQueue &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_DevTx
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_UnlockDev
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_LockDev
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendData
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_FrameSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Write
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultEventHandler
</UL>

<P><STRONG><a name="[31b]"></a>advanceCredit</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, spp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = advanceCredit &rArr; RF_AdvanceCredit &rArr; RfCheckForCreditToSend &rArr; RfSendModemStatus &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_RxBytes
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_UnlockDev
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_LockDev
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_FrameSize
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_AdvanceCredit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Read
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultEventHandler
</UL>

<P><STRONG><a name="[31d]"></a>setHighWaterMark</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setHighWaterMark &rArr; RF_CreditFlowEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_RxFree
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRxTxRingBuf
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CreditFlowEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultEventHandler
</UL>

<P><STRONG><a name="[320]"></a>defaultEventHandler</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, spp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = defaultEventHandler &rArr; advanceCredit &rArr; RF_AdvanceCredit &rArr; RfCheckForCreditToSend &rArr; RfSendModemStatus &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_DevRx
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_ReturnBuf
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RespondChannel
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IndicateLinkActivity
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHighWaterMark
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advanceCredit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendToRfComm
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateDataLink
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfCallbackFunc
</UL>

<P><STRONG><a name="[58]"></a>rfCallbackFunc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, spp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = rfCallbackFunc &rArr; defaultEventHandler &rArr; advanceCredit &rArr; RF_AdvanceCredit &rArr; RfCheckForCreditToSend &rArr; RfSendModemStatus &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_UnlockDev
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_LockDev
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spp.o(.text)
</UL>
<P><STRONG><a name="[323]"></a>openServerPort</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_UnlockDev
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_LockDev
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addSdpService
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deRegisterService
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeDevice
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RegisterServerChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open
</UL>

<P><STRONG><a name="[324]"></a>initDevice</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, spp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_FlushTx
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPPOS_FlushRx
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPP_Open
</UL>

<P><STRONG><a name="[db]"></a>stateDefaultHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spp.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>stateClosed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spp.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>stateConnected</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spp.o(.constdata)
</UL>
<P><STRONG><a name="[328]"></a>HciGetMaxPackets</STRONG> (Thumb, 494 bytes, Stack size 32 bytes, hci_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHciPackets
</UL>

<P><STRONG><a name="[32a]"></a>SendHciPackets</STRONG> (Thumb, 1292 bytes, Stack size 48 bytes, hci_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetTableEntry
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetMaxPackets
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciCheckForTxData
</UL>

<P><STRONG><a name="[32d]"></a>HciProcessSentPackets</STRONG> (Thumb, 614 bytes, Stack size 40 bytes, hci_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetTableEntry
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessReceivedData
</UL>

<P><STRONG><a name="[32e]"></a>HciProcessBadRxBuffers</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, hci_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXBUFF_Free
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
</UL>

<P><STRONG><a name="[331]"></a>GetListItemNum</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hci_proc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRcvListItemNum
</UL>

<P><STRONG><a name="[332]"></a>HciProcessReceivedData</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, hci_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RXBUFF_Free
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetTableEntry
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessSentPackets
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
</UL>

<P><STRONG><a name="[334]"></a>HciSendCompletedPackets</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, hci_proc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HciSendCompletedPackets &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommand
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciPktsCompleteTimerHandler
</UL>

<P><STRONG><a name="[336]"></a>HciSendCommands</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, hci_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
</UL>

<P><STRONG><a name="[337]"></a>HciCheckForTxData</STRONG> (Thumb, 906 bytes, Stack size 24 bytes, hci_proc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHciPackets
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
</UL>

<P><STRONG><a name="[33f]"></a>MeFreeRemoteDevice</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mecon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDisconnectLink
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDisconnectComplete
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportLinkUp
</UL>

<P><STRONG><a name="[33b]"></a>CallAndRemoveHandlers</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CallAndRemoveHandlers
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDisconnectComplete
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportLinkUp
</UL>

<P><STRONG><a name="[340]"></a>StartLinkConnectTask</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartLinkConnectTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackCheckBB
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkConnectOp
</UL>

<P><STRONG><a name="[343]"></a>StartLinkAcceptTask</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartLinkAcceptTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkAcceptOp
</UL>

<P><STRONG><a name="[344]"></a>StartLinkRejectTask</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StartLinkRejectTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkRejectOp
</UL>

<P><STRONG><a name="[345]"></a>StartLinkDisconnectTask</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartLinkDisconnectTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleLinkDisconnectOp
</UL>

<P><STRONG><a name="[346]"></a>StartRemNameReqTask</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartRemNameReqTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleRemNameReqOp
</UL>

<P><STRONG><a name="[348]"></a>ReportModeChange</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = ReportModeChange &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCallLinkHandlers
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleModeChange
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleExitParkModeOp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleParkModeOp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleExitSniffModeOp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSniffModeOp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleHoldModeOp
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailRemDevCommand
</UL>

<P><STRONG><a name="[34a]"></a>StartHoldModeTask</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartHoldModeTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleHoldModeOp
</UL>

<P><STRONG><a name="[34b]"></a>StartSniffModeTask</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartSniffModeTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSniffModeOp
</UL>

<P><STRONG><a name="[34c]"></a>StartExitSniffModeTask</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartExitSniffModeTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleExitSniffModeOp
</UL>

<P><STRONG><a name="[34d]"></a>StartParkModeTask</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartParkModeTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleParkModeOp
</UL>

<P><STRONG><a name="[34e]"></a>StartExitParkModeTask</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartExitParkModeTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleExitParkModeOp
</UL>

<P><STRONG><a name="[34f]"></a>ReportRoleChange</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = ReportRoleChange &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCallLinkHandlers
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDiscoverRole
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleRoleChange
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSwitchRoleOp
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailRemDevCommand
</UL>

<P><STRONG><a name="[350]"></a>StartSwitchRoleTask</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartSwitchRoleTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSwitchRoleOp
</UL>

<P><STRONG><a name="[352]"></a>ReportConnPacketTypeChange</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = ReportConnPacketTypeChange &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeCallLinkHandlers
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleConnPacketTypeChange
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeChangeConnPacketTypeOp
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailRemDevCommand
</UL>

<P><STRONG><a name="[35f]"></a>MeFailRemDevCommand</STRONG> (Thumb, 516 bytes, Stack size 32 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = MeFailRemDevCommand &rArr; ScoReportScoLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportEncryptionResult
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportAuthenticateResult
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoReportScoLinkUp
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportMeCommandComplete
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleSetSniffSubratingParmsOp
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportLinkUp
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportConnPacketTypeChange
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportRoleChange
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportModeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailPendingRemDevCommands
</UL>

<P><STRONG><a name="[362]"></a>MeFailPendingRemDevCommands</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = MeFailPendingRemDevCommands &rArr; MeFailRemDevCommand &rArr; ScoReportScoLinkUp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportEncryptionResult
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecReportAuthenticateResult
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleAuthorizeRequest
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailRemDevCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleDisconnectComplete
</UL>

<P><STRONG><a name="[5b]"></a>MeHandleDiscoverRoleTask</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mecon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MeHandleDiscoverRoleTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mecon.o(.text)
</UL>
<P><STRONG><a name="[398]"></a>SecSetUserIo</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, meif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SecSetUserIo &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecGetPinLen
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecBtGetFreeSecurityOp
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeStartOperation
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_UserConfirm
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_SetPin
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_SetPassKey
</UL>

<P><STRONG><a name="[3c5]"></a>StartAuthenticateTask</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartAuthenticateTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleAuthenticateOp
</UL>

<P><STRONG><a name="[5e]"></a>HandleSecurityCommandComplete</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HandleSecurityCommandComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesec.o(.text)
</UL>
<P><STRONG><a name="[3c6]"></a>StartLinkKeyRspTask</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = StartLinkKeyRspTask &rArr; SEC_FindDeviceRecord &rArr; DDB_FindRecord &rArr; DdbFindRecord &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecIsLinkKeyGoodEnough
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_FindDeviceRecord
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleLinkKeyRspOp
</UL>

<P><STRONG><a name="[3c9]"></a>AtoI</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AtoI
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUserIoRspTask
</UL>

<P><STRONG><a name="[3c8]"></a>StartUserIoRspTask</STRONG> (Thumb, 398 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartUserIoRspTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE32
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtoI
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoRspOp
</UL>

<P><STRONG><a name="[3cb]"></a>StartEncryptionTask</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartEncryptionTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleEncryptOp
</UL>

<P><STRONG><a name="[3cd]"></a>StartWriteEncryptModeTask</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartWriteEncryptModeTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleSecurityModeOp
</UL>

<P><STRONG><a name="[3ce]"></a>StartWriteAuthenticateEnableTask</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartWriteAuthenticateEnableTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleSecurityModeOp
</UL>

<P><STRONG><a name="[3cf]"></a>IoCapRequestAccept</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = IoCapRequestAccept &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartIoCapRspTask
</UL>

<P><STRONG><a name="[3d0]"></a>IoCapRequestReject</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IoCapRequestReject &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleIoCapRsp
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartIoCapRspTask
</UL>

<P><STRONG><a name="[3d2]"></a>IoCapInvalidBondingMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mesec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleIoCapRsp
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartIoCapRspTask
</UL>

<P><STRONG><a name="[3d1]"></a>StartIoCapRspTask</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = StartIoCapRspTask &rArr; IoCapRequestAccept &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCapInvalidBondingMode
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCapRequestReject
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoCapRequestAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleIoCapRspOp
</UL>

<P><STRONG><a name="[5f]"></a>HandleGetOobDataCommandComplete</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HandleGetOobDataCommandComplete
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesec.o(.text)
</UL>
<P><STRONG><a name="[3d3]"></a>StartGetOobDataTask</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartGetOobDataTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleGetOobDataOp
</UL>

<P><STRONG><a name="[3d4]"></a>StartRemOobDataReqRspTask</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartRemOobDataReqRspTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleRemOobDataReqRspOp
</UL>

<P><STRONG><a name="[3d5]"></a>StartRefreshEncryptKey</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartRefreshEncryptKey &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecMeHandleRefreshEncryptKeyOp
</UL>

<P><STRONG><a name="[3d7]"></a>SecAutoConfirm</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SecAutoConfirm &rArr; SEC_UserConfirm &rArr; SecSetUserIo &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_UserConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoReq
</UL>

<P><STRONG><a name="[3da]"></a>SecIsMitmRequired</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mesec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoReq
</UL>

<P><STRONG><a name="[3d9]"></a>SecGetCurrentBondingMode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecGetCurrentBondingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleUserIoReq
</UL>

<P><STRONG><a name="[3e8]"></a>StartDenyOobDataReqRspTask</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mesec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartDenyOobDataReqRspTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecHandleDenyOobDataReqRspOp
</UL>

<P><STRONG><a name="[3f2]"></a>CheckTimers</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, eventmgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_GetSystemTime
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EVM_Process
</UL>

<P><STRONG><a name="[60]"></a>rfDataCallbackFunc</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, btm_rfcom_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = rfDataCallbackFunc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rfc_disconnect
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btm_rfcom_data.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>queryRfcommDataCallback</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, btm_rfcom_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = queryRfcommDataCallback &rArr; RF_OpenClientChannel &rArr; RfOpenClientChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Query
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OpenClientChannel
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btm_rfcom_data.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>rfcLinkCallBack</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, btm_rfcom_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = rfcLinkCallBack &rArr; RfcommData_Open &rArr; SDP_Query &rArr; StartNextQuery &rArr; SdpClientStartConnection &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfcommData_Open
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CreateLink
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btm_rfcom_data.o(.text)
</UL>
<P><STRONG><a name="[8b8]"></a>NVIC_SetPriority</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mach.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_interrupt_prio_set
</UL>

<P><STRONG><a name="[459]"></a>amrnb_decoder_spdec_amr_reset</STRONG> (Thumb, 1026 bytes, Stack size 40 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = amrnb_decoder_spdec_amr_reset &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_initialize
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_interface_decode
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_frame_reset
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_interface_init
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_frame_init
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_amr
</UL>

<P><STRONG><a name="[469]"></a>amrnb_decoder_spdec_energy_new</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = amrnb_decoder_spdec_energy_new
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_post_filter
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_amr
</UL>

<P><STRONG><a name="[45e]"></a>amrnb_decoder_spdec_syn_filt</STRONG> (Thumb, 322 bytes, Stack size 256 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = amrnb_decoder_spdec_syn_filt &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_post_filter
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_amr
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_dtx_dec
</UL>

<P><STRONG><a name="[460]"></a>amrnb_decoder_spdec_gmed_n</STRONG> (Thumb, 236 bytes, Stack size 104 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = amrnb_decoder_spdec_gmed_n
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_amr
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_ec_gain_code
</UL>

<P><STRONG><a name="[45f]"></a>amrnb_decoder_spdec_ec_gain_code</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = amrnb_decoder_spdec_ec_gain_code &rArr; amrnb_decoder_spdec_gmed_n
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_gmed_n
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_amr
</UL>

<P><STRONG><a name="[462]"></a>amrnb_decoder_spdec_gc_pred</STRONG> (Thumb, 506 bytes, Stack size 36 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = amrnb_decoder_spdec_gc_pred
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_amr
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_dec_gain
</UL>

<P><STRONG><a name="[461]"></a>amrnb_decoder_spdec_dec_gain</STRONG> (Thumb, 470 bytes, Stack size 56 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = amrnb_decoder_spdec_dec_gain &rArr; amrnb_decoder_spdec_gc_pred
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_gc_pred
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_amr
</UL>

<P><STRONG><a name="[464]"></a>amrnb_decoder_spdec_get_lsp_pol</STRONG> (Thumb, 488 bytes, Stack size 44 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = amrnb_decoder_spdec_get_lsp_pol
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_lsp_az
</UL>

<P><STRONG><a name="[463]"></a>amrnb_decoder_spdec_lsp_az</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = amrnb_decoder_spdec_lsp_az &rArr; amrnb_decoder_spdec_get_lsp_pol
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_get_lsp_pol
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_amr
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_dtx_dec
</UL>

<P><STRONG><a name="[465]"></a>amrnb_decoder_spdec_d_plsf_3</STRONG> (Thumb, 650 bytes, Stack size 120 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = amrnb_decoder_spdec_d_plsf_3 &rArr; amrnb_decoder_spdec_lsf_lsp
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_lsf_lsp
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_amr
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_dtx_dec
</UL>

<P><STRONG><a name="[467]"></a>amrnb_decoder_spdec_dtx_dec</STRONG> (Thumb, 2676 bytes, Stack size 664 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = amrnb_decoder_spdec_dtx_dec &rArr; amrnb_decoder_spdec_syn_filt &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_lsf_lsp
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_d_plsf_3
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_lsp_az
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_syn_filt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_amr
</UL>

<P><STRONG><a name="[468]"></a>amrnb_decoder_spdec_decode_amr</STRONG> (Thumb, 11466 bytes, Stack size 1160 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088<LI>Call Chain = amrnb_decoder_spdec_decode_amr &rArr; amrnb_decoder_spdec_dtx_dec &rArr; amrnb_decoder_spdec_syn_filt &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_lsf_lsp
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_dtx_dec
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_d_plsf_3
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_lsp_az
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_dec_gain
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_gc_pred
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_ec_gain_code
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_gmed_n
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_syn_filt
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_energy_new
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_amr_reset
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_frame
</UL>

<P><STRONG><a name="[46b]"></a>amrnb_decoder_spdec_post_filter</STRONG> (Thumb, 1758 bytes, Stack size 528 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = amrnb_decoder_spdec_post_filter &rArr; amrnb_decoder_spdec_syn_filt &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_syn_filt
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_energy_new
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_frame
</UL>

<P><STRONG><a name="[466]"></a>amrnb_decoder_spdec_lsf_lsp</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, amrnb_decoder_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = amrnb_decoder_spdec_lsf_lsp
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_decode_amr
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_dtx_dec
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amrnb_decoder_spdec_d_plsf_3
</UL>

<P><STRONG><a name="[91a]"></a>unicode_to_gbk</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, string_convert.o(i.unicode_to_gbk), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringConvert
</UL>

<P><STRONG><a name="[4af]"></a>IA_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radiomod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IA_Init &rArr; HCI_Reset &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Init
</UL>

<P><STRONG><a name="[4b4]"></a>A2dpVerifySdpQueryRsp</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, a2dp_sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = A2dpVerifySdpQueryRsp &rArr; SDP_ParseAttributes &rArr; MeDevSdpServiceFound &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpSdpEventHandler
</UL>

<P><STRONG><a name="[63]"></a>A2dpSdpEventHandler</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, a2dp_sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = A2dpSdpEventHandler &rArr; AVDEV_DiscoverStreamEndpoints &rArr; AvdevSendCommand &rArr; AVDTP_GetAllCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_DiscoverStreamEndpoints
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpStartServiceQuery
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_CreateSignalLink
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpClose
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpVerifySdpQueryRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> a2dp_sdp.o(.text)
</UL>
<P><STRONG><a name="[4b9]"></a>A2dpFindNextStreamInfo</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, a2dp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = A2dpFindNextStreamInfo &rArr; AVDEV_GetCapabilities &rArr; AvdevSendCommand &rArr; AVDTP_GetAllCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_GetCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A2dpAvdtpCallback
</UL>

<P><STRONG><a name="[4d8]"></a>AvdtpFindContentProtection</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, avdtp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_OpenStream
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Reconfig
</UL>

<P><STRONG><a name="[4ea]"></a>AvrcpSendAdvancedCommand</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_SendCommand
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpGetNextTransId
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtSetPlayerSettingValues
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtRegisterNotification
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtListPlayerSettingValues
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtListPlayerSettingAttrs
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtGetPlayerSettingValues
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtGetPlayStatus
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtGetMediaInfo
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtInformBatteryStatus
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtInformCharset
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCtGetPlayerSettingValueTxt
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtGetPlayerSettingAttrTxt
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtAddToNowPlaying
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtPlayItem
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtSetAddressedPlayer
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtSetAbsoluteVolume
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_CtGetCapabilities
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpAdvancedAbort
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpAdvancedContinue
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendNextCommand
</UL>

<P><STRONG><a name="[4f4]"></a>AvrcpSendNextCommand</STRONG> (Thumb, 90 bytes, Stack size 120 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = AvrcpSendNextCommand &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvTimeout
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedResponse
</UL>

<P><STRONG><a name="[4f5]"></a>AvrcpHandleRegisterNotifyRsp</STRONG> (Thumb, 412 bytes, Stack size 128 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AvrcpHandleRegisterNotifyRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost32
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedResponse
</UL>

<P><STRONG><a name="[4f7]"></a>AvrcpHandleGetPlayStatusRsp</STRONG> (Thumb, 70 bytes, Stack size 120 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AvrcpHandleGetPlayStatusRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost32
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedResponse
</UL>

<P><STRONG><a name="[4f8]"></a>AvrcpHandleGetElementAttrRsp</STRONG> (Thumb, 228 bytes, Stack size 136 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AvrcpHandleGetElementAttrRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost32
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedResponse
</UL>

<P><STRONG><a name="[4f9]"></a>AvrcpHandleGetPlayerValueTxtRsp</STRONG> (Thumb, 216 bytes, Stack size 136 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AvrcpHandleGetPlayerValueTxtRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedResponse
</UL>

<P><STRONG><a name="[4fa]"></a>AvrcpHandleGetPlayerAttrTxtRsp</STRONG> (Thumb, 216 bytes, Stack size 136 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AvrcpHandleGetPlayerAttrTxtRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedResponse
</UL>

<P><STRONG><a name="[4ff]"></a>AvrcpHandleGetPlayerValuesRsp</STRONG> (Thumb, 210 bytes, Stack size 128 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AvrcpHandleGetPlayerValuesRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedResponse
</UL>

<P><STRONG><a name="[4fe]"></a>AvrcpHandleListPlayerValuesRsp</STRONG> (Thumb, 58 bytes, Stack size 120 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AvrcpHandleListPlayerValuesRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedResponse
</UL>

<P><STRONG><a name="[4fd]"></a>AvrcpHandleListPlayerAttrRsp</STRONG> (Thumb, 102 bytes, Stack size 120 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AvrcpHandleListPlayerAttrRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedResponse
</UL>

<P><STRONG><a name="[4fc]"></a>AvrcpHandleGetCapabilitiesRsp</STRONG> (Thumb, 166 bytes, Stack size 120 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AvrcpHandleGetCapabilitiesRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedResponse
</UL>

<P><STRONG><a name="[4fb]"></a>AvrcpHandleAdvancedResponse</STRONG> (Thumb, 506 bytes, Stack size 120 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = AvrcpHandleAdvancedResponse &rArr; AvrcpSendNextCommand &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetCapabilitiesRsp
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleListPlayerAttrRsp
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleListPlayerValuesRsp
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayerValuesRsp
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayerAttrTxtRsp
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayerValueTxtRsp
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetElementAttrRsp
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayStatusRsp
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleRegisterNotifyRsp
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendNextCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvRsp
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpAdvancedRspFragment
</UL>

<P><STRONG><a name="[500]"></a>AvrcpAdvancedContinue</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = AvrcpAdvancedContinue &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvRsp
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpAdvancedRspFragment
</UL>

<P><STRONG><a name="[501]"></a>AvrcpAdvancedAbort</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = AvrcpAdvancedAbort &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvRsp
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpAdvancedRspFragment
</UL>

<P><STRONG><a name="[502]"></a>AvrcpAdvancedRspFragment</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = AvrcpAdvancedRspFragment &rArr; AvrcpHandleAdvancedResponse &rArr; AvrcpSendNextCommand &rArr; AvrcpSendAdvancedCommand &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpAdvancedAbort
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpAdvancedContinue
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedResponse
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvRspOperands
</UL>

<P><STRONG><a name="[503]"></a>AvrcpFlushCommandQueue</STRONG> (Thumb, 72 bytes, Stack size 120 bytes, avrcpact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AvrcpFlushCommandQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpResetAdvCtConnection
</UL>

<P><STRONG><a name="[508]"></a>AvrcpPanelCnf</STRONG> (Thumb, 68 bytes, Stack size 120 bytes, avrcppnl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = AvrcpPanelCnf &rArr; AvrcpHandlePanelInput &rArr;  AvrcpPanelCnf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelInput
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelTimeout
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelRsp
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelInput
</UL>

<P><STRONG><a name="[50a]"></a>AvrcpPanelInd</STRONG> (Thumb, 70 bytes, Stack size 120 bytes, avrcppnl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AvrcpPanelInd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpPanelRspTimerExpired
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmdControl
</UL>

<P><STRONG><a name="[509]"></a>AvrcpHandlePanelCmdControl</STRONG> (Thumb, 700 bytes, Stack size 24 bytes, avrcppnl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = AvrcpHandlePanelCmdControl &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Disconnect
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_SendResponse
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpPanelInd
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelTxDone
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmd
</UL>

<P><STRONG><a name="[6a]"></a>AvrcpPanelRspTimerExpired</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, avrcppnl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AvrcpPanelRspTimerExpired &rArr; AvrcpPanelInd
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpPanelInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avrcppnl.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>AvrcpPanelIntTimerExpired</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, avrcppnl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = AvrcpPanelIntTimerExpired &rArr; AVCTP_SendCommand &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Disconnect
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_SendCommand
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpGetNextTransId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avrcppnl.o(.text)
</UL>
<P><STRONG><a name="[50e]"></a>AvrcpSendSubUnitInfo</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, avrcppnl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = AvrcpSendSubUnitInfo &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Disconnect
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_SendResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelTxDone
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmd
</UL>

<P><STRONG><a name="[50f]"></a>AvrcpSendUnitInfo</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, avrcppnl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = AvrcpSendUnitInfo &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_Disconnect
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_SendResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelTxDone
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmd
</UL>

<P><STRONG><a name="[513]"></a>AvrcpQueueRxCmd</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, avrcppnl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AvrcpQueueRxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandlePanelCmd
</UL>

<P><STRONG><a name="[515]"></a>AvrcpVerifySdpQueryRsp</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, avrcpsdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AvrcpVerifySdpQueryRsp &rArr; SDP_ParseAttributes &rArr; MeDevSdpServiceFound &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSdpCallback
</UL>

<P><STRONG><a name="[517]"></a>AvdevAlloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, avdevice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackGetHeap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_Init
</UL>

<P><STRONG><a name="[51b]"></a>AvdevSendAvdtpEvent</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, avdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AvdevSendAvdtpEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAvdtpCallback
</UL>

<P><STRONG><a name="[519]"></a>AvdevFreeDevice</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, avdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AvdevFreeDevice &rArr; AVDTP_Deregister
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Deregister
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_DeregisterChannel
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAvdtpCallback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevCmgrCallback
</UL>

<P><STRONG><a name="[6b]"></a>AvdevCmgrCallback</STRONG> (Thumb, 358 bytes, Stack size 56 bytes, avdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AvdevCmgrCallback &rArr; CMGR_RemoveDataLink &rArr; ME_ForceDisconnectLinkWithReason &rArr; MeDisconnectLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveDataLink
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_DeregisterHandler
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAllocListeningDevice
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevFreeDevice
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avdevice.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>AvdevAvdtpCallback</STRONG> (Thumb, 666 bytes, Stack size 48 bytes, avdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = AvdevAvdtpCallback &rArr; AVDTP_ConnectRsp &rArr; AvdtpConnectRsp &rArr; L2CAP_ConnectRsp &rArr; L2Cap_SendConnRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveDataLink
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RegisterHandler
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_DeregisterHandler
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateDataLink
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAllocListeningDevice
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevFreeDevice
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevSendAvdtpEvent
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_ConnectRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avdevice.o(.text)
</UL>
<P><STRONG><a name="[51a]"></a>AvdevAllocListeningDevice</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, avdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AvdevAllocListeningDevice &rArr; AVDTP_Register &rArr; AvdtpSigInit
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Register
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_RegisterChannel
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_CreateACLLink
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevAvdtpCallback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdevCmgrCallback
</UL>

<P><STRONG><a name="[51c]"></a>AvdevSendCommand</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, avdevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = AvdevSendCommand &rArr; AVDTP_GetAllCapabilities &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetAllCapabilities
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_GetCapabilities
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_DiscoverStreams
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Disconnect
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_ConnectRsp
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDTP_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_GetCapabilities
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_DiscoverStreamEndpoints
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_DiscSignalLink
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_SignalConnectRsp
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVDEV_CreateSignalLink
</UL>

<P><STRONG><a name="[521]"></a>ConnMgrIsLinkUp</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ConnMgrIsLinkUp
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateAudioLink
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveDataLink
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_DeregisterHandler
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateDataLink
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrDeregisterAudioHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
</UL>

<P><STRONG><a name="[533]"></a>ConnMgrGetFirstHandlerByRemDev</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, conmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
</UL>

<P><STRONG><a name="[530]"></a>ConnMgrStayMaster</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, conmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
</UL>

<P><STRONG><a name="[52a]"></a>ConnMgrScoNotify</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConnMgrScoNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrScoRetryTimeout
</UL>

<P><STRONG><a name="[523]"></a>ConnMgrIsAudioUp</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, conmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrIdleTimerNotify
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrBindSco
</UL>

<P><STRONG><a name="[522]"></a>ConnMgrBindSco</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ConnMgrBindSco
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrIsAudioUp
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrRegisterAudioHandler
</UL>

<P><STRONG><a name="[535]"></a>ConnMgrCountScoHandlers</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConnMgrCountScoHandlers
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrRegisterAudioHandler
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrDeregisterAudioHandler
</UL>

<P><STRONG><a name="[524]"></a>ConnMgrCreateAudioLink</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ConnMgrCreateAudioLink &rArr; SCO_CreateLink &rArr; SCO_SetupLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetBtFeatures
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_SetupLink
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_CreateLink
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_CreateAudioLink
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrHandleModeChange
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrScoRetryTimeout
</UL>

<P><STRONG><a name="[528]"></a>ConnMgrAcceptAudioLink</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ConnMgrAcceptAudioLink &rArr; SCO_AcceptIncomingConnection &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_GetBtFeatures
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_AcceptIncomingConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_AcceptAudioLink
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
</UL>

<P><STRONG><a name="[6f]"></a>ConnMgrScoRetryTimeout</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ConnMgrScoRetryTimeout &rArr; ConnMgrCreateAudioLink &rArr; SCO_CreateLink &rArr; SCO_SetupLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrCreateAudioLink
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrScoNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conmgr.o(.text)
</UL>
<P><STRONG><a name="[537]"></a>ConnMgrIsOneHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, conmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_RemoveDataLink
</UL>

<P><STRONG><a name="[52b]"></a>ConnMgrStartIdleTimer</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ConnMgrStartIdleTimer &rArr; EvmStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IndicateLinkActivity
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmgrIdleTimerNotify
</UL>

<P><STRONG><a name="[52c]"></a>ConnMgrCancelIdleTimer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConnMgrCancelIdleTimer &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
</UL>

<P><STRONG><a name="[70]"></a>CmgrIdleTimerNotify</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CmgrIdleTimerNotify &rArr; ME_StartSniff &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StartSniff
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrStartIdleTimer
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrIsAudioUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conmgr.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>CmgrBbCheckTimerNotify</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CmgrBbCheckTimerNotify &rArr; SendH4HciCmd &rArr; BuartSend
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendH4HciCmd
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendingBbCheckTimer
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBbCheckTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conmgr.o(.text)
</UL>
<P><STRONG><a name="[52f]"></a>ConnMgrHandleModeChange</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ConnMgrHandleModeChange &rArr; ConnMgrCreateAudioLink &rArr; SCO_CreateLink &rArr; SCO_SetupLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IsLinkUp
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrCreateAudioLink
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnManager
</UL>

<P><STRONG><a name="[6e]"></a>ConnManager</STRONG> (Thumb, 1340 bytes, Stack size 24 bytes, conmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ConnManager &rArr; ConnMgrHandleModeChange &rArr; ConnMgrCreateAudioLink &rArr; SCO_CreateLink &rArr; SCO_SetupLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IndicateLinkActivity
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SwitchRole
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_StopPark
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_SetConnectionRole
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_ForceDisconnectLinkWithReason
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CreateLink
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCO_RejectIncomingConnection
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrHandleModeChange
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrCancelIdleTimer
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrAcceptAudioLink
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrIsAudioUp
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrScoNotify
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrStayMaster
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrGetFirstHandlerByRemDev
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnMgrIsLinkUp
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> conmgr.o(.text)
</UL>
<P><STRONG><a name="[54d]"></a>HfExecuteCommand</STRONG> (Thumb, 826 bytes, Stack size 8 bytes, hf_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HfExecuteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfProcessNextCommandState
</UL>

<P><STRONG><a name="[54c]"></a>HfProcessNextCommandState</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, hf_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = HfProcessNextCommandState &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CloseChannel
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtSendCommand
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCompleteCommand
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfExecuteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfExecuteNextCommand
</UL>

<P><STRONG><a name="[551]"></a>HfVerifySdpQueryFeaturesRsp</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, hf_sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HfVerifySdpQueryFeaturesRsp &rArr; SDP_ParseAttributes &rArr; MeDevSdpServiceFound &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAppCallback
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryRsp
</UL>

<P><STRONG><a name="[552]"></a>HfVerifySdpQueryNetworkRsp</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, hf_sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HfVerifySdpQueryNetworkRsp &rArr; SDP_ParseAttributes &rArr; MeDevSdpServiceFound &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryRsp
</UL>

<P><STRONG><a name="[553]"></a>HfVerifySdpQueryProfileRsp</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, hf_sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HfVerifySdpQueryProfileRsp &rArr; SDP_ParseAttributes &rArr; MeDevSdpServiceFound &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryRsp
</UL>

<P><STRONG><a name="[554]"></a>HfVerifySdpQueryProtocolRsp</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hf_sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HfVerifySdpQueryProtocolRsp &rArr; SDP_ParseAttributes &rArr; MeDevSdpServiceFound &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_ParseAttributes
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryRsp
</UL>

<P><STRONG><a name="[71]"></a>HfSdpEventHandler</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, hf_sdp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = HfSdpEventHandler &rArr; RF_OpenClientChannel &rArr; RfOpenClientChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStartServiceQuery
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCloseChannel
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IsLinkUp
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OpenClientChannel
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfVerifySdpQueryRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hf_sdp.o(.text)
</UL>
<P><STRONG><a name="[556]"></a>HfStateClosed</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hf_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = HfStateClosed &rArr; RF_RespondChannel &rArr; RfSendAck &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RespondChannel
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAppCallback
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IsLinkUp
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfSMHandleEvent
</UL>

<P><STRONG><a name="[557]"></a>HfStateConnPending</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, hf_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = HfStateConnPending &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CloseChannel
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAppCallback
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateConnIncoming
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfSMHandleEvent
</UL>

<P><STRONG><a name="[558]"></a>HfStateConnIncoming</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hf_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = HfStateConnIncoming &rArr; HfStateConnPending &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateConnPending
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfSMHandleEvent
</UL>

<P><STRONG><a name="[559]"></a>hfHandleNegotiateIndFail</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hf_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = hfHandleNegotiateIndFail &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CloseChannel
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStartServiceQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfHandleNegotiateComplete
</UL>

<P><STRONG><a name="[55a]"></a>HfStateNegotiate</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, hf_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = HfStateNegotiate &rArr; hfHandleNegotiateComplete &rArr;  HfStateNegotiate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CloseChannel
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAppCallback
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfIndicatorCallback
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_MapHfIndicators
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfHandleNegotiateComplete
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfHandleNegotiateComplete
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfSMHandleEvent
</UL>

<P><STRONG><a name="[55b]"></a>hfHandleNegotiateComplete</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, hf_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = hfHandleNegotiateComplete &rArr;  HfStateNegotiate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CloseChannel
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAppCallback
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMGR_IsLinkUp
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtSendCommand
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateNegotiate
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfHandleNegotiateIndFail
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateNegotiate
</UL>

<P><STRONG><a name="[55e]"></a>HfProcessCompletedCommand</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, hf_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = HfProcessCompletedCommand &rArr; HfExecuteNextCommand &rArr; HfProcessNextCommandState &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfExecuteNextCommand
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfGetCurrentCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCommandComplete
</UL>

<P><STRONG><a name="[55f]"></a>HfCommandComplete</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, hf_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = HfCommandComplete &rArr; HfProcessCompletedCommand &rArr; HfExecuteNextCommand &rArr; HfProcessNextCommandState &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfProcessCompletedCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateDisc
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStateOpen
</UL>

<P><STRONG><a name="[560]"></a>HfStateOpen</STRONG> (Thumb, 750 bytes, Stack size 32 bytes, hf_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = HfStateOpen &rArr; HfCommandComplete &rArr; HfProcessCompletedCommand &rArr; HfExecuteNextCommand &rArr; HfProcessNextCommandState &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAppCallback
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AtSendCommand
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfPhonebookCallback
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfIndicatorCallback
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfEventCallback
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCommandComplete
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfStartNextQueuedCmd
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfSMHandleEvent
</UL>

<P><STRONG><a name="[563]"></a>HfStateDisc</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, hf_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = HfStateDisc &rArr; HfCommandComplete &rArr; HfProcessCompletedCommand &rArr; HfExecuteNextCommand &rArr; HfProcessNextCommandState &rArr; RF_CloseChannel &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfAppCallback
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfCommandComplete
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HfSMHandleEvent
</UL>

<P><STRONG><a name="[56b]"></a>AvrcpIsRegdForNotify</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AvrcpIsRegdForNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpFailNotification
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpRegisterNotifyRsp
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpTgSetPlayerSettingNotify
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpUnregisterNotify
</UL>

<P><STRONG><a name="[56a]"></a>AvrcpUnregisterNotify</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AvrcpUnregisterNotify &rArr; AvrcpIsRegdForNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpIsRegdForNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpFailNotification
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpTgSetPlayerSettingNotify
</UL>

<P><STRONG><a name="[56c]"></a>AvrcpSendAdvancedResponse</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVCTP_SendResponse
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvRspTxDone
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSendAdvResponse
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpFailNotification
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleRegisterNotifyCmd
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleItemCmd
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleSetAddressedPlayerCmd
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleSetAbsoluteVolumeCmd
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayStatusCmd
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetElementAttrCmd
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleBatteryStatusCmd
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleDisplayCharSetCmd
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayerValueTxtCmd
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayerAttrTxtCmd
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleSetPlayerValuesCmd
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayerValuesCmd
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleListPlayerValuesCmd
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleListPlayerAttrCmd
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetCapabilitiesCmd
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpCompleteNotification
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpTgSetPlayerSettingNotify
</UL>

<P><STRONG><a name="[56d]"></a>AvrcpTgSetPlayerSettingNotify</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpUnregisterNotify
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpIsRegdForNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetPlayerSetting
</UL>

<P><STRONG><a name="[56f]"></a>AvrcpCompleteNotification</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, avrcpatg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpUnregisterNotify
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpIsRegdForNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetAbsoluteVolume
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgNowPlayingChanged
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetAddressedPlayer
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgDeregisterPlayer
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgRegisterPlayer
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSignalTrackEnd
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSignalTrackStart
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetTrack
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetSystemStatus
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetBattStatus
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetPlayPosition
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetPlayStatus
</UL>

<P><STRONG><a name="[57b]"></a>AvrcpNotifyAddrPlayerChanged</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = AvrcpNotifyAddrPlayerChanged &rArr; AvrcpFailNotification &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVRCP_TgSetAddressedPlayer
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleSetAddressedPlayerCmd
</UL>

<P><STRONG><a name="[57f]"></a>AvrcpHandleGetCapabilitiesCmd</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = AvrcpHandleGetCapabilitiesCmd &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
</UL>

<P><STRONG><a name="[580]"></a>AvrcpHandleListPlayerAttrCmd</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = AvrcpHandleListPlayerAttrCmd &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
</UL>

<P><STRONG><a name="[581]"></a>AvrcpHandleListPlayerValuesCmd</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = AvrcpHandleListPlayerValuesCmd &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
</UL>

<P><STRONG><a name="[583]"></a>AvrcpGetPlayerValuesRsp</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AvrcpGetPlayerValuesRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayerValuesCmd
</UL>

<P><STRONG><a name="[582]"></a>AvrcpHandleGetPlayerValuesCmd</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = AvrcpHandleGetPlayerValuesCmd &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpGetPlayerValuesRsp
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
</UL>

<P><STRONG><a name="[585]"></a>AvrcpSetPlayerValuesRsp</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AvrcpSetPlayerValuesRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleSetPlayerValuesCmd
</UL>

<P><STRONG><a name="[584]"></a>AvrcpHandleSetPlayerValuesCmd</STRONG> (Thumb, 282 bytes, Stack size 152 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = AvrcpHandleSetPlayerValuesCmd &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSetPlayerValuesRsp
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
</UL>

<P><STRONG><a name="[586]"></a>AvrcpGetPlayerAttrTxtRsp</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AvrcpGetPlayerAttrTxtRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayerAttrTxtCmd
</UL>

<P><STRONG><a name="[587]"></a>AvrcpHandleGetPlayerAttrTxtCmd</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = AvrcpHandleGetPlayerAttrTxtCmd &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpGetPlayerAttrTxtRsp
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
</UL>

<P><STRONG><a name="[588]"></a>AvrcpGetPlayerValueTxtRsp</STRONG> (Thumb, 586 bytes, Stack size 64 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvrcpGetPlayerValueTxtRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayerValueTxtCmd
</UL>

<P><STRONG><a name="[589]"></a>AvrcpHandleGetPlayerValueTxtCmd</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = AvrcpHandleGetPlayerValueTxtCmd &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpGetPlayerValueTxtRsp
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
</UL>

<P><STRONG><a name="[58a]"></a>AvrcpHandleDisplayCharSetCmd</STRONG> (Thumb, 200 bytes, Stack size 144 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = AvrcpHandleDisplayCharSetCmd &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
</UL>

<P><STRONG><a name="[58b]"></a>AvrcpHandleBatteryStatusCmd</STRONG> (Thumb, 130 bytes, Stack size 136 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = AvrcpHandleBatteryStatusCmd &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
</UL>

<P><STRONG><a name="[58c]"></a>AvrcpEncodeMediaElemAttr</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AvrcpEncodeMediaElemAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE32
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpGetElementAttrRsp
</UL>

<P><STRONG><a name="[58d]"></a>AvrcpGetElementAttrRsp</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AvrcpGetElementAttrRsp &rArr; AvrcpEncodeMediaElemAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost32
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpEncodeMediaElemAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetElementAttrCmd
</UL>

<P><STRONG><a name="[58e]"></a>AvrcpHandleGetElementAttrCmd</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = AvrcpHandleGetElementAttrCmd &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpGetElementAttrRsp
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
</UL>

<P><STRONG><a name="[58f]"></a>AvrcpHandleGetPlayStatusCmd</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = AvrcpHandleGetPlayStatusCmd &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE32
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
</UL>

<P><STRONG><a name="[590]"></a>AvrcpHandleSetAbsoluteVolumeCmd</STRONG> (Thumb, 156 bytes, Stack size 136 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = AvrcpHandleSetAbsoluteVolumeCmd &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
</UL>

<P><STRONG><a name="[591]"></a>AvrcpHandleSetAddressedPlayerCmd</STRONG> (Thumb, 226 bytes, Stack size 144 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = AvrcpHandleSetAddressedPlayerCmd &rArr; AvrcpNotifyAddrPlayerChanged &rArr; AvrcpFailNotification &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpNotifyAddrPlayerChanged
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
</UL>

<P><STRONG><a name="[592]"></a>AvrcpHandleItemCmd</STRONG> (Thumb, 136 bytes, Stack size 136 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = AvrcpHandleItemCmd &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
</UL>

<P><STRONG><a name="[593]"></a>AvrcpRegisterNotifyRsp</STRONG> (Thumb, 618 bytes, Stack size 40 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AvrcpRegisterNotifyRsp &rArr; AvrcpIsRegdForNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE32
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost32
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpIsRegdForNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleRegisterNotifyCmd
</UL>

<P><STRONG><a name="[594]"></a>AvrcpHandleRegisterNotifyCmd</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = AvrcpHandleRegisterNotifyCmd &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpRegisterNotifyRsp
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvancedCommand
</UL>

<P><STRONG><a name="[595]"></a>AvrcpHandleAdvancedCommand</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448<LI>Call Chain = AvrcpHandleAdvancedCommand &rArr; AvrcpHandleSetAddressedPlayerCmd &rArr; AvrcpNotifyAddrPlayerChanged &rArr; AvrcpFailNotification &rArr; AvrcpSendAdvancedResponse &rArr; AVCTP_SendResponse &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleRegisterNotifyCmd
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleItemCmd
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleSetAddressedPlayerCmd
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleSetAbsoluteVolumeCmd
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayStatusCmd
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetElementAttrCmd
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleBatteryStatusCmd
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleDisplayCharSetCmd
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayerValueTxtCmd
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayerAttrTxtCmd
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleSetPlayerValuesCmd
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetPlayerValuesCmd
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleListPlayerValuesCmd
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleListPlayerAttrCmd
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleGetCapabilitiesCmd
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpSendAdvancedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvRspTxDone
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvCmdOperands
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpHandleAdvCmd
</UL>

<P><STRONG><a name="[596]"></a>AvrcpFlushResponseQueue</STRONG> (Thumb, 72 bytes, Stack size 120 bytes, avrcpatg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AvrcpFlushResponseQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvrcpResetAdvTgConnection
</UL>

<P><STRONG><a name="[72]"></a>HciResetRetryHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HciResetRetryHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciTransportError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.text)
</UL>
<P><STRONG><a name="[59c]"></a>QueueDeferredCommands</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QueueDeferredCommands
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioInitialized
</UL>

<P><STRONG><a name="[59e]"></a>HciHandleBuffSizeComplete</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hci_evnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HciHandleBuffSizeComplete &rArr; HCI_RadioInitialized &rArr;  ME_Callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommand
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioInitialized
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciTransportError
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleCommandComplete
</UL>

<P><STRONG><a name="[59f]"></a>HciHandleSetFctlComplete</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hci_evnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HciHandleSetFctlComplete &rArr; HCI_RadioInitialized &rArr;  ME_Callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioInitialized
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciTransportError
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleCommandComplete
</UL>

<P><STRONG><a name="[5a0]"></a>HciHandleReadBufferComplete</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, hci_evnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HciHandleReadBufferComplete &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommand
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciTransportError
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleCommandComplete
</UL>

<P><STRONG><a name="[5a1]"></a>HciHandleCommandComplete</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hci_evnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HciHandleCommandComplete &rArr; HciHandleSetFctlComplete &rArr; HCI_RadioInitialized &rArr;  ME_Callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleReadBufferComplete
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleSetFctlComplete
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandleBuffSizeComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
</UL>

<P><STRONG><a name="[5a2]"></a>HciHandleDisconnectComplete</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hci_evnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HciHandleDisconnectComplete &rArr; HciDeleteConnection &rArr;  ME_Callback (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciDeleteConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
</UL>

<P><STRONG><a name="[5a4]"></a>HciHandleConnectComplete</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hci_evnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HciHandleConnectComplete &rArr; HciAddConnection &rArr; HciSetNewBcHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciAddConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
</UL>

<P><STRONG><a name="[5a6]"></a>HciHandleCompletedPackets</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, hci_evnt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HciHandleCompletedPackets
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetTableEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciProcessEvent
</UL>

<P><STRONG><a name="[5be]"></a>L2Cap_HandleRxError</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, l2cap_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = L2Cap_HandleRxError &rArr; MeDisconnectLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackStatusCallBackFunc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDisconnectLink
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_FindFlushable
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetValidChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciReceive
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessChannelData
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessSignal
</UL>

<P><STRONG><a name="[5c0]"></a>L2Cap_ProcessSignal</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, l2cap_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = L2Cap_ProcessSignal &rArr; L2Cap_ProcessReq &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ValidateCommand
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessRsp
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ProcessReq
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleRxError
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciReceive
</UL>

<P><STRONG><a name="[5c4]"></a>L2Cap_ProcessChannelData</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, l2cap_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = L2Cap_ProcessChannelData &rArr; L2Cap_HandleRxError &rArr; MeDisconnectLink &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleRxError
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyPsm
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_HciReceive
</UL>

<P><STRONG><a name="[5ca]"></a>AllocChannel</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AllocChannel &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_AllocPsmChannel
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_AllocLinkChannel
</UL>

<P><STRONG><a name="[5cf]"></a>ValidateOptions</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ValidateOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_ValidateCommand
</UL>

<P><STRONG><a name="[74]"></a>L2CAP_TimerFire</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, l2cap_utl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = L2CAP_TimerFire &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cap_utl.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>HandleSetErrDataRepOp</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = HandleSetErrDataRepOp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>HandleChannelClass</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HandleChannelClass &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[5d7]"></a>IsMeCommandEqual</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsMeCommandEqual &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFindMatchingToken
</UL>

<P><STRONG><a name="[75]"></a>HandleGeneralTask</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HandleGeneralTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>HandleGenCmdOp</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HandleGenCmdOp &rArr; MeProcessGenToken &rArr; MeFindMatchingToken &rArr; IsMeCommandEqual &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeProcessGenToken
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>HandleWriteDefLinkPolicyOp</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HandleWriteDefLinkPolicyOp &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>HandleWriteCoDOp</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HandleWriteCoDOp &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE32
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteClassOfDevice
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>HandleLocalNameChangeOp</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HandleLocalNameChangeOp &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeWriteLocalName
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>HandleSetExtInqRespOp</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = HandleSetExtInqRespOp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>HandleSetInqTxPwrOp</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = HandleSetInqTxPwrOp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>HandleSetInqModeOp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = HandleSetInqModeOp &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>HandleCancelInqOp</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = HandleCancelInqOp &rArr; MeReportInqCancelComplete &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportInqCancelComplete
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[5d9]"></a>ReportInquiryComplete</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = ReportInquiryComplete &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailCommand
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailInProgressCommands
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInquiryComplete
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInquiryOp
</UL>

<P><STRONG><a name="[5da]"></a>StartInquiryTask</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartInquiryTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleInquiryOp
</UL>

<P><STRONG><a name="[76]"></a>HandleInquiryOp</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = HandleInquiryOp &rArr; ReportInquiryComplete &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeDevInquiryStart
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartInquiryTask
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportInquiryComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[5db]"></a>HandleInquiryResult</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = HandleInquiryResult &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportResults
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[5dc]"></a>HandleInquiryComplete</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = HandleInquiryComplete &rArr; ReportInquiryComplete &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportInquiryComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleEvents
</UL>

<P><STRONG><a name="[5dd]"></a>ReportCommandSent</STRONG> (Thumb, 78 bytes, Stack size 288 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ReportCommandSent
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_Callback
</UL>

<P><STRONG><a name="[5de]"></a>MeFailInProgressCommands</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = MeFailInProgressCommands &rArr; MeReportInqCancelComplete &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeReportInqCancelComplete
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportInquiryComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeFailPendingCommands
</UL>

<P><STRONG><a name="[a8]"></a>HandleCompleteTaskRadioParms</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, me.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = HandleCompleteTaskRadioParms &rArr; MeInitRadio &rArr; MeReportNMResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeInitRadio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> me.o(.text)
</UL>
<P><STRONG><a name="[5ea]"></a>StartWriteScanEnable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, meacc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartWriteScanEnable &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAccessModeOp
</UL>

<P><STRONG><a name="[5eb]"></a>StartWriteIacLap</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, meacc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StartWriteIacLap &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAccessModeOp
</UL>

<P><STRONG><a name="[5ec]"></a>StartWriteScanActivity</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, meacc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StartWriteScanActivity &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeHandleAccessModeOp
</UL>

<P><STRONG><a name="[5ed]"></a>StartScoLinkConnectTask</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StartScoLinkConnectTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkConnectOp
</UL>

<P><STRONG><a name="[5ee]"></a>StartScoLinkSetupTask</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StartScoLinkSetupTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE32
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkSetupOp
</UL>

<P><STRONG><a name="[5ef]"></a>StartScoLinkAcceptTask</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = StartScoLinkAcceptTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE32
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CheckRadioFeature
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkAcceptOp
</UL>

<P><STRONG><a name="[5f0]"></a>StartScoLinkRejectTask</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StartScoLinkRejectTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CheckRadioFeature
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkRejectOp
</UL>

<P><STRONG><a name="[5f1]"></a>StartScoVoiceSettings</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartScoVoiceSettings &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleVoiceSettingsOp
</UL>

<P><STRONG><a name="[5f2]"></a>StartScoLinkDisconnectTask</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartScoLinkDisconnectTask &rArr; MeSendHciCommand &rArr; HciSendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeSendHciCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleLinkDisconnectOp
</UL>

<P><STRONG><a name="[5f3]"></a>ScoFailCommand</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ScoFailCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoMapHciToConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoFailPendingCommands
</UL>

<P><STRONG><a name="[5f4]"></a>ScoFailPendingCommands</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, mesco.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ScoFailPendingCommands &rArr; MeOperationEnd &rArr; MeStartOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNodeOnList
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeOperationEnd
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoFailCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleDisconnectComplete
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScoHandleDisconnectAcl
</UL>

<P><STRONG><a name="[a9]"></a>RfAdvanceToOpenTimeoutHandler</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = RfAdvanceToOpenTimeoutHandler &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendModemStatus
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfc_sm.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>RfAdvanceToClosedTimeoutHandler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = RfAdvanceToClosedTimeoutHandler &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfc_sm.o(.text)
</UL>
<P><STRONG><a name="[5ff]"></a>RfSendCmdRsp</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCalcFCS
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCommandPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCommand
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
</UL>

<P><STRONG><a name="[603]"></a>RfSendSABM</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = RfSendSABM &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSecCallback
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAdvanceNegPending
</UL>

<P><STRONG><a name="[604]"></a>RfSendDmAck</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = RfSendDmAck &rArr; RfSendAck &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateSecPending
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateNegPending
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateDiscIncoming
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateDiscPending
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnPending
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateDisconnected
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateMachine
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateOpen
</UL>

<P><STRONG><a name="[606]"></a>RfCommandSent</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = RfCommandSent &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCommandPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateDiscPending
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDlcStateConnPending
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateDiscPending
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateConnPending
</UL>

<P><STRONG><a name="[608]"></a>RfMuxStateOpen</STRONG> (Thumb, 736 bytes, Stack size 32 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = RfMuxStateOpen &rArr; RfSendDmAck &rArr; RfSendAck &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGetFreeServiceChannel
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeUsePendingChannel
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFindDlcIdByDlci
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAllocDLC
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDmAck
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateMachine
</UL>

<P><STRONG><a name="[60c]"></a>RfMuxStateConnPending</STRONG> (Thumb, 494 bytes, Stack size 16 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = RfMuxStateConnPending &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetTxMtu
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendParmNegotiation
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendCommand
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCommandSent
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateMachine
</UL>

<P><STRONG><a name="[60e]"></a>RfMuxStateConnIncoming</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = RfMuxStateConnIncoming &rArr; RfSendAck &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateMachine
</UL>

<P><STRONG><a name="[60f]"></a>RfMuxStateDiscPending</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = RfMuxStateDiscPending &rArr; RfSendAck &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCommandSent
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateMachine
</UL>

<P><STRONG><a name="[610]"></a>RfMuxStateMachine</STRONG> (Thumb, 1166 bytes, Stack size 40 bytes, rfc_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = RfMuxStateMachine &rArr; RfControlChannel &rArr; RfCtlHandleNSC &rArr; RfAdvanceNegPending &rArr; RfFreeChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetTxMtu
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeMux
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFindDlcIdByDlci
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfControlChannel
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateDiscPending
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateConnIncoming
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateConnPending
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMuxStateOpen
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDmAck
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfL2Callback
</UL>

<P><STRONG><a name="[61a]"></a>RfOpenClientChannel</STRONG> (Thumb, 952 bytes, Stack size 40 bytes, rfcomm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = RfOpenClientChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetTxMtu
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendParmNegotiation
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeMux
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFindMuxIdByRemDev
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAllocMux
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAllocDLC
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectReq
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OpenClientChannel
</UL>

<P><STRONG><a name="[620]"></a>SdpClientStartConnection</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sdpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = SdpClientStartConnection &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnectReq
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNextQuery
</UL>

<P><STRONG><a name="[622]"></a>SdpStartQueryTimer</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sdpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SdpStartQueryTimer &rArr; EvmStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNextQuery
</UL>

<P><STRONG><a name="[623]"></a>SendSdpClientQuery</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, sdpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = SendSdpClientQuery &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetTxMtu
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
</UL>
<BR>[Called By]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNextQuery
</UL>

<P><STRONG><a name="[624]"></a>StartNextQuery</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, sdpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = StartNextQuery &rArr; SdpClientStartConnection &rArr; L2CAP_ConnectReq &rArr; L2Cap_SendConnReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertHeadList
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSdpClientQuery
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpStartQueryTimer
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientStartConnection
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_DisconnectReq
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_Query
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDP_KeepClientAlive
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientStartQuery
</UL>

<P><STRONG><a name="[628]"></a>SdpStopQueryTimer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sdpclient.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SdpStopQueryTimer &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpClientL2CapCallback
</UL>

<P><STRONG><a name="[64b]"></a>VerifyAttributeIdList</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, sdputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VerifyAttributeIdList &rArr; SdpParseElement
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpValidateQueryParms
</UL>

<P><STRONG><a name="[64c]"></a>VerifyServiceSearchPattern</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sdputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VerifyServiceSearchPattern &rArr; SdpParseElement
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpParseElement
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdpValidateQueryParms
</UL>

<P><STRONG><a name="[ab]"></a>RmgrHciCallback</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, radiomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = RmgrHciCallback &rArr; RmgrRetryInit &rArr; RMGR_HciReset &rArr; HCI_RadioDeinitializing &rArr; ME_Callback &rArr; L2CAP_HciReceive &rArr; L2Cap_ProcessSignal &rArr; L2Cap_ProcessReq &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_EventHandler
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRetryInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radiomgr.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>RmgrTranCallback</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, radiomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = RmgrTranCallback &rArr; RmgrRetryInit &rArr; RMGR_HciReset &rArr; HCI_RadioDeinitializing &rArr; ME_Callback &rArr; L2CAP_HciReceive &rArr; L2Cap_ProcessSignal &rArr; L2Cap_ProcessReq &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioInitialized
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAN_Init
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRadioSpecificInit
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRetryInit
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioDeinitializing
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RegisterRadioHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radiomgr.o(.text)
</UL>
<P><STRONG><a name="[64e]"></a>RmgrRetryInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, radiomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + Unknown Stack Size
<LI>Call Chain = RmgrRetryInit &rArr; RMGR_HciReset &rArr; HCI_RadioDeinitializing &rArr; ME_Callback &rArr; L2CAP_HciReceive &rArr; L2Cap_ProcessSignal &rArr; L2Cap_ProcessReq &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_HciReset
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioInitialized
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRadioCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrTranCallback
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrHciCallback
</UL>

<P><STRONG><a name="[ad]"></a>RmgrRadioCallback</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, radiomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = RmgrRadioCallback &rArr; RmgrRetryInit &rArr; RMGR_HciReset &rArr; HCI_RadioDeinitializing &rArr; ME_Callback &rArr; L2CAP_HciReceive &rArr; L2Cap_ProcessSignal &rArr; L2Cap_ProcessReq &rArr; L2Cap_StateMachine &rArr; L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioInitialized
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRAN_Shutdown
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrRetryInit
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioDeinitializing
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RegisterRadioHandler
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Deinit
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radiomgr.o(.text)
</UL>
<P><STRONG><a name="[64f]"></a>RmgrRadioSpecificInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, radiomgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RmgrRadioSpecificInit &rArr; RADIO_Init &rArr; IA_Init &rArr; HCI_Reset &rArr; EvmCancelTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RadioInitialized
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_Init
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_RegisterRadioHandler
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_HciReset
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMGR_RadioInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RmgrTranCallback
</UL>

<P><STRONG><a name="[65a]"></a>WmaInfoGet</STRONG> (Thumb, 586 bytes, Stack size 32 bytes, wma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = WmaInfoGet &rArr; skip_buffer &rArr; mv_fread &rArr; FileRead &rArr; _FileRead &rArr; ReadOneSec &rArr; SaveOneSec &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_le
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_buffer
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseWmaHeaderObject
</UL>

<P><STRONG><a name="[67f]"></a>DecodeICS</STRONG> (Thumb, 1244 bytes, Stack size 72 bytes, aac_noiseless.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DecodeICS &rArr; DecodeICSInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_bits32
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits25
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits1
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_bits
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeHuffmanScalar
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeICSInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeNoiselessData
</UL>

<P><STRONG><a name="[68a]"></a>build_boot_strap_pskey_set</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, bccmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSR_BcCmd_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootStrap
</UL>

<P><STRONG><a name="[68c]"></a>build_boot_strap_bccmd</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, bccmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSR_BcCmd_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootStrap
</UL>

<P><STRONG><a name="[6a0]"></a>AvctpFreeConn</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, avctpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AvctpFreeConn
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnConnected
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnDiscIncoming
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnDiscPending
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnConnIncoming
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnConnPending
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnDisconnected
</UL>

<P><STRONG><a name="[af]"></a>AvctpConnDisconnected</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, avctpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AvctpConnDisconnected &rArr; AvctpFreeConn
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpFreeConn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avctpcon.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>AvctpConnConnPending</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, avctpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AvctpConnConnPending &rArr; AvctpFreeConn
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpFreeConn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avctpcon.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>AvctpConnConnIncoming</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, avctpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AvctpConnConnIncoming &rArr; AvctpFreeConn
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpFreeConn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avctpcon.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>AvctpConnDiscPending</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, avctpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AvctpConnDiscPending &rArr; AvctpFreeConn
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpFreeConn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avctpcon.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>AvctpConnDiscIncoming</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, avctpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AvctpConnDiscIncoming &rArr; AvctpFreeConn
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpFreeConn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avctpcon.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>AvctpConnConnected</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, avctpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AvctpConnConnected &rArr; AvctpFreeConn
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpFreeConn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avctpcon.o(.text)
</UL>
<P><STRONG><a name="[6a1]"></a>AvctpConnFindChannel</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, avctpcon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpL2Callback
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpL2BrowseCallback
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpConnect
</UL>

<P><STRONG><a name="[6a2]"></a>AvctpConnFindFreeChannel</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, avctpcon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpL2Callback
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpL2BrowseCallback
</UL>

<P><STRONG><a name="[6a5]"></a>AvctpMsgHandleBrwsReject</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, avctpmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AvctpMsgHandleBrwsReject
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleReject
</UL>

<P><STRONG><a name="[6a4]"></a>AvctpMsgHandleRcpReject</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, avctpmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AvctpMsgHandleRcpReject
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleReject
</UL>

<P><STRONG><a name="[6a3]"></a>AvctpMsgHandleReject</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, avctpmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AvctpMsgHandleReject &rArr; AvctpMsgHandleRcpReject
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleRcpReject
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleBrwsReject
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgCb
</UL>

<P><STRONG><a name="[6a8]"></a>AvctpMsgHandleBrwsResponse</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, avctpmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AvctpMsgHandleBrwsResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleResponse
</UL>

<P><STRONG><a name="[6a6]"></a>AvctpMsgHandleRcpResponse</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, avctpmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = AvctpMsgHandleRcpResponse &rArr; AvctpDisconnect &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleResponse
</UL>

<P><STRONG><a name="[6a7]"></a>AvctpMsgHandleResponse</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, avctpmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = AvctpMsgHandleResponse &rArr; AvctpMsgHandleRcpResponse &rArr; AvctpDisconnect &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleRcpResponse
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleBrwsResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgCb
</UL>

<P><STRONG><a name="[6ac]"></a>AvctpMsgHandleBrwsCommand</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, avctpmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AvctpMsgHandleBrwsCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleCommand
</UL>

<P><STRONG><a name="[6a9]"></a>AvctpMsgHandleRcpCommand</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, avctpmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = AvctpMsgHandleRcpCommand &rArr; AvctpDisconnect &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleCommand
</UL>

<P><STRONG><a name="[6aa]"></a>AvctpRejectCommand</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, avctpmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = AvctpRejectCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleCommand
</UL>

<P><STRONG><a name="[6ab]"></a>AvctpMsgHandleCommand</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, avctpmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = AvctpMsgHandleCommand &rArr; AvctpRejectCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpRejectCommand
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleRcpCommand
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleBrwsCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgCb
</UL>

<P><STRONG><a name="[6ad]"></a>AvctpSendNextBrwsFrame</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, avctpmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = AvctpSendNextBrwsFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpSendNextFrame
</UL>

<P><STRONG><a name="[6ae]"></a>AvctpSendNextRcpFrame</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, avctpmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpSendNextFrame
</UL>

<P><STRONG><a name="[b5]"></a>AvctpMsgCb</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, avctpmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = AvctpMsgCb &rArr; AvctpSendNextFrame &rArr; AvctpSendNextRcpFrame &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpSendNextFrame
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpDisconnect
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleCommand
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleResponse
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvctpMsgHandleReject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avctpmsg.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>AvctpConnCb</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, avctpmsg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = AvctpConnCb &rArr; AVTP_SendFailed &rArr; AvtpSendNextPacket &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendFailed
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendContinue
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_Receive
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_InitChannel
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_DeinitChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avctpmsg.o(.text)
</UL>
<P><STRONG><a name="[6b5]"></a>AvdtpFreeConn</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, avdtpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AvdtpFreeConn
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnConnected
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnDiscIncoming
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnDiscPending
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnConnIncoming
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnConnPending
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnDisconnected
</UL>

<P><STRONG><a name="[b7]"></a>AvdtpConnDisconnected</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, avdtpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvdtpConnDisconnected &rArr; AvdtpFreeConn
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpFreeConn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avdtpcon.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>AvdtpConnConnPending</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, avdtpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvdtpConnConnPending &rArr; AvdtpFreeConn
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpFreeConn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avdtpcon.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>AvdtpConnConnIncoming</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, avdtpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvdtpConnConnIncoming &rArr; AvdtpFreeConn
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpFreeConn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avdtpcon.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>AvdtpConnDiscPending</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, avdtpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = AvdtpConnDiscPending &rArr; AvdtpDisconnect &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpDisconnect
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpFreeConn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avdtpcon.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>AvdtpConnDiscIncoming</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, avdtpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvdtpConnDiscIncoming &rArr; AvdtpFreeConn
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpFreeConn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avdtpcon.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>AvdtpConnConnected</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, avdtpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AvdtpConnConnected &rArr; AvdtpFreeConn
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpFreeConn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avdtpcon.o(.text)
</UL>
<P><STRONG><a name="[6b8]"></a>AvdtpConnFindChannel</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, avdtpcon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvL2Callback
</UL>

<P><STRONG><a name="[6b9]"></a>AvdtpConnFindFreeChannel</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, avdtpcon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvL2Callback
</UL>

<P><STRONG><a name="[6b7]"></a>AvdtpConnFindConn</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, avdtpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AvdtpConnFindConn
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvL2Callback
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnFindOrphanedStreamConn
</UL>

<P><STRONG><a name="[6b6]"></a>AvdtpConnFindOrphanedStreamConn</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, avdtpcon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AvdtpConnFindOrphanedStreamConn &rArr; AvdtpConnFindConn
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnFindConn
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvL2Callback
</UL>

<P><STRONG><a name="[6ba]"></a>AvdtpInsertStreamList</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AvdtpInsertStreamList
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpStrmConnCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrConnCallback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrSignalCallback
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleResponse
</UL>

<P><STRONG><a name="[6d0]"></a>AvdtpSigMgrClearConnection</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AvdtpSigMgrClearConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpStrmConnCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrConnCallback
</UL>

<P><STRONG><a name="[6bb]"></a>AvdtpCloseStream</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AvdtpCloseStream &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpStrmConnCallback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrConnCallback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrSignalCallback
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleTimeout
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleResponse
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleReject
</UL>

<P><STRONG><a name="[6bc]"></a>AvdtpSigSendCommand</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSecurityCtrl
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendCmdWithParms
</UL>

<P><STRONG><a name="[6bd]"></a>AvdtpSigHandleReject</STRONG> (Thumb, 380 bytes, Stack size 64 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = AvdtpSigHandleReject &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpCloseStream
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrSignalCallback
</UL>

<P><STRONG><a name="[6be]"></a>AvdtpSigStreamSendCmdWithParms</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = AvdtpSigStreamSendCmdWithParms &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigSendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSetConfig
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamReconfig
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigDelayReport
</UL>

<P><STRONG><a name="[6bf]"></a>AvdtpSigCapabilityRspSM</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AvdtpSigCapabilityRspSM
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseCapabilityRsp
</UL>

<P><STRONG><a name="[6c0]"></a>AvdtpSigParseCapabilityRsp</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AvdtpSigParseCapabilityRsp &rArr; AvdtpSigCapabilityRspSM
</UL>
<BR>[Calls]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigCapabilityRspSM
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleResponse
</UL>

<P><STRONG><a name="[6c2]"></a>AvdtpSigParseDiscoveries</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AvdtpSigParseDiscoveries
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleResponse
</UL>

<P><STRONG><a name="[6c1]"></a>AvdtpSigHandleResponse</STRONG> (Thumb, 826 bytes, Stack size 48 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = AvdtpSigHandleResponse &rArr; AvdtpSigDelayReport &rArr; AvdtpSigStreamSendCmdWithParms &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigDelayReport
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpIsConnected
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpDisconnect
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpConnect
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseDiscoveries
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseCapabilityRsp
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpCloseStream
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpInsertStreamList
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrSignalCallback
</UL>

<P><STRONG><a name="[6c4]"></a>AvdtpSigFindStream</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, avsigmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseStreamStart
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseStreamSuspend
</UL>

<P><STRONG><a name="[6c3]"></a>AvdtpSigParseStreamSuspend</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AvdtpSigParseStreamSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigFindStream
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
</UL>

<P><STRONG><a name="[6c5]"></a>AvdtpSigParseStreamStart</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AvdtpSigParseStreamStart
</UL>
<BR>[Calls]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigFindStream
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
</UL>

<P><STRONG><a name="[6ca]"></a>AvdtpSigHandleSrvDelayReq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AvdtpSigHandleSrvDelayReq
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseConfigCmdElem
</UL>

<P><STRONG><a name="[6c6]"></a>AvdtpSigHandleSrvCatCP</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AvdtpSigHandleSrvCatCP
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseConfigCmdElem
</UL>

<P><STRONG><a name="[6c7]"></a>AvdtpSigHandleSrvCatMdaCODEC</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AvdtpSigHandleSrvCatMdaCODEC
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseConfigCmdElem
</UL>

<P><STRONG><a name="[6c9]"></a>AvdtpSigHandleSrvCatMdaXport</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AvdtpSigHandleSrvCatMdaXport
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseConfigCmdElem
</UL>

<P><STRONG><a name="[6c8]"></a>AvdtpSigParseConfigCmdElem</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AvdtpSigParseConfigCmdElem &rArr; AvdtpSigHandleSrvCatCP
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleSrvCatMdaXport
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleSrvCatMdaCODEC
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleSrvCatCP
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleSrvDelayReq
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseConfigCmd
</UL>

<P><STRONG><a name="[6cb]"></a>AvdtpSigParseConfigCmd</STRONG> (Thumb, 438 bytes, Stack size 64 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AvdtpSigParseConfigCmd &rArr; AvdtpSigParseConfigCmdElem &rArr; AvdtpSigHandleSrvCatCP
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseConfigCmdElem
</UL>
<BR>[Called By]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
</UL>

<P><STRONG><a name="[6cc]"></a>AvdtpSigEncodeCapabilities</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AvdtpSigEncodeCapabilities
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSetConfig
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamReconfig
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
</UL>

<P><STRONG><a name="[6cd]"></a>AvdtpSigHandleCommand</STRONG> (Thumb, 1516 bytes, Stack size 80 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = AvdtpSigHandleCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTStackDataStatusCallBackFunc
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAdvavrcpTimer
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEtoHost16
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigEncodeCapabilities
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseConfigCmd
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseStreamStart
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigParseStreamSuspend
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigFindStream
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpCloseStream
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpInsertStreamList
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrSignalCallback
</UL>

<P><STRONG><a name="[6cf]"></a>AvdtpSigHandleTimeout</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = AvdtpSigHandleTimeout &rArr; AvdtpSigStreamSendSimpleCmd &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpCloseStream
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrSignalCallback
</UL>

<P><STRONG><a name="[bd]"></a>AvdtpSigMgrSignalCallback</STRONG> (Thumb, 976 bytes, Stack size 72 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = AvdtpSigMgrSignalCallback &rArr; AvdtpSigHandleResponse &rArr; AvdtpSigDelayReport &rArr; AvdtpSigStreamSendCmdWithParms &rArr; AvdtpSigSendCommand &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigStreamSendSimpleCmd
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigDelayReport
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpDisconnect
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleTimeout
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleCommand
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleResponse
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigHandleReject
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpCloseStream
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpInsertStreamList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avsigmgr.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>AvdtpSigMgrConnCallback</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, avsigmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = AvdtpSigMgrConnCallback &rArr; AVTP_SendFailed &rArr; AvtpSendNextPacket &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEntryList
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpIsConnected
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpDisconnect
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpCloseStream
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpSigMgrClearConnection
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AvdtpInsertStreamList
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendFailed
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendContinue
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_Receive
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_InitChannel
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_DeinitChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avsigmgr.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>AvtpTxTimeout</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, avtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AvtpTxTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avtp.o(.text)
</UL>
<P><STRONG><a name="[6d1]"></a>AvtpSendPacket</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, avtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_SendData
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetTxMtu
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreBE16
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendContinue
</UL>

<P><STRONG><a name="[6d2]"></a>AvtpSendNextPacket</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, avtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = AvtpSendNextPacket &rArr; AVTP_SendStart &rArr; AvtpSendPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendStart
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendFailed
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AVTP_SendContinue
</UL>

<P><STRONG><a name="[6d3]"></a>L2CapState_W4_DISC_RSP</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, l2cap_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = L2CapState_W4_DISC_RSP &rArr; L2Cap_SendDiscRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyUserAndCloseChannel
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendDiscRspInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
</UL>

<P><STRONG><a name="[6d4]"></a>L2CapState_W4_DISC_CNF</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, l2cap_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = L2CapState_W4_DISC_CNF &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyUserAndCloseChannel
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendDiscReqInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
</UL>

<P><STRONG><a name="[6d5]"></a>SendAutoConfigReq</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, l2cap_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = SendAutoConfigReq &rArr; L2Cap_SendConfigReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetSysPkt
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConfigReqInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_CONN_CNF
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_W4_CONN_RSP
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_OPEN
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CONFIG
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleConfigRsp
</UL>

<P><STRONG><a name="[6d6]"></a>SendAutoConfigRsp</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, l2cap_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetSysPkt
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConfigRspInternal
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CONFIG
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleConfigReq
</UL>

<P><STRONG><a name="[6d7]"></a>L2Cap_HandleConfigRsp</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, l2cap_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = L2Cap_HandleConfigRsp &rArr; SendAutoConfigReq &rArr; L2Cap_SendConfigReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ME_CheckRadioFeature
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendDiscReqInternal
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoConfigReq
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CONFIG
</UL>

<P><STRONG><a name="[6d8]"></a>L2Cap_HandleConfigReq</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, l2cap_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_GetMtu
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoConfigRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CONFIG
</UL>

<P><STRONG><a name="[6d9]"></a>L2CapState_CONFIG</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, l2cap_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreLE16
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendCommand
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StopTimer
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StartRtx
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyPsm
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleConfigReq
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_HandleConfigRsp
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoConfigRsp
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoConfigReq
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_OPEN
</UL>

<P><STRONG><a name="[6da]"></a>L2CapState_OPEN</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, l2cap_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = L2CapState_OPEN &rArr; L2CapState_CONFIG &rArr; L2Cap_HandleConfigReq &rArr; SendAutoConfigRsp &rArr; L2Cap_SendConfigRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyPsm
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CapState_CONFIG
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoConfigReq
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
</UL>

<P><STRONG><a name="[6db]"></a>L2CapState_W4_CONN_RSP</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, l2cap_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = L2CapState_W4_CONN_RSP &rArr; SendAutoConfigReq &rArr; L2Cap_SendConfigReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyUserAndCloseChannel
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StopTimer
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyPsm
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConnRspInternal
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoConfigReq
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
</UL>

<P><STRONG><a name="[6dc]"></a>L2CapState_W4_CONN_CNF</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, l2cap_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = L2CapState_W4_CONN_CNF &rArr; SendAutoConfigReq &rArr; L2Cap_SendConfigReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StartErtx
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyUserAndCloseChannel
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConnReqInternal
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAutoConfigReq
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
</UL>

<P><STRONG><a name="[6dd]"></a>L2CapState_CLOSED</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, l2cap_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = L2CapState_CLOSED &rArr; L2Cap_SendConnRspInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_AccessRequest
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StartErtx
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyUserAndCloseChannel
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_NotifyPsm
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_SendConnRspInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2Cap_StateMachine
</UL>

<P><STRONG><a name="[6e4]"></a>RfCtlHandlePNReq</STRONG> (Thumb, 574 bytes, Stack size 32 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = RfCtlHandlePNReq &rArr; RfSendAck &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_GetTxMtu
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendParmNegotiation
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGetFreeServiceChannel
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfControlChannel
</UL>

<P><STRONG><a name="[6e5]"></a>RfCtlHandlePNCnf</STRONG> (Thumb, 1022 bytes, Stack size 16 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = RfCtlHandlePNCnf &rArr; RfAdvanceNegPending &rArr; RfFreeChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCheckForCreditToSend
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAdvanceNegPending
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfControlChannel
</UL>

<P><STRONG><a name="[6e6]"></a>RfCtlHandleMSCReq</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = RfCtlHandleMSCReq &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMUXCheckTxQueues
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendModemStatus
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfControlChannel
</UL>

<P><STRONG><a name="[6e8]"></a>RfCtlHandleRPNReq</STRONG> (Thumb, 468 bytes, Stack size 40 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = RfCtlHandleRPNReq &rArr; RfSendAck &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEtoHost16
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGetFreeServiceChannel
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAck
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendRemotePortNeg
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfControlChannel
</UL>

<P><STRONG><a name="[6ea]"></a>RfCtlHandleRLSReq</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = RfCtlHandleRLSReq &rArr; RfSendLineStatus &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendLineStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfControlChannel
</UL>

<P><STRONG><a name="[6ec]"></a>RfSendNSC</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = RfSendNSC &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RemoveHeadList
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InsertTailList
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendDataInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfControlChannel
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCtlHandleAggregateFlow
</UL>

<P><STRONG><a name="[6ed]"></a>RfCtlHandleAggregateFlow</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = RfCtlHandleAggregateFlow &rArr; RfMUXCheckTxQueues &rArr; RfMUXCheckNextTxQueue &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMUXCheckTxQueues
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendAggregateFlow
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendNSC
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfControlChannel
</UL>

<P><STRONG><a name="[6ef]"></a>RfCtlHandleTEST</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = RfCtlHandleTEST &rArr; RfSendTest &rArr; RfSendDataInternal &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfSendTest
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfControlChannel
</UL>

<P><STRONG><a name="[6f0]"></a>RfCtlHandleNSC</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = RfCtlHandleNSC &rArr; RfAdvanceNegPending &rArr; RfFreeChannel &rArr; RfFreeDLC &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAdvanceNegPending
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfControlChannel
</UL>

<P><STRONG><a name="[6f1]"></a>RfCtlHandleCnf</STRONG> (Thumb, 424 bytes, Stack size 16 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = RfCtlHandleCnf &rArr; RfAppCallback &rArr; RfDisconnectDLC &rArr; RfSendCommand &rArr; RfSendCmdRsp &rArr; RfSendCommandPacket &rArr; L2CAP_SendData &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmCancelTimer
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMUXCheckTxQueues
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfCheckForCreditToSend
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfAppCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfControlChannel
</UL>

<P><STRONG><a name="[6f2]"></a>RfCtlParseParms</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, rfc_ctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = RfCtlParseParms &rArr; RfDisconnectL2CAP &rArr; L2CAP_DisconnectReq &rArr; L2Cap_SendDiscReqInternal &rArr; L2Cap_Send &rArr; L2Cap_QueueTxPacket &rArr; MeHandleDataReqWhileNotActive &rArr; MeReportResults &rArr; MeDevEventHandler &rArr; DS_AddDevice &rArr; DS_DeleteDevice &rArr; DS_FindDevice &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfDisconnectL2CAP
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfControlChannel
</UL>

<P><STRONG><a name="[c9]"></a>RfServiceTimeoutHandler</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RfServiceTimeoutHandler &rArr; RfGetFreeServiceChannel &rArr; EvmStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvmStartTimer
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfGetFreeServiceChannel
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeUsePendingChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfc_util.o(.text)
</UL>
<P><STRONG><a name="[6f4]"></a>RfIsDlcFlowOn</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RfIsDlcFlowOn
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMUXCheckNextTxQueue
</UL>

<P><STRONG><a name="[6f5]"></a>RfIsMuxFlowOn</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, rfc_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfMUXCheckTxQueues
</UL>

<P><STRONG><a name="[6f6]"></a>RfFreeAllDLCs</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rfc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = RfFreeAllDLCs &rArr;  RfFreeDLC (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeDLC
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfFreeMux
</UL>

<P><STRONG><a name="[6fa]"></a>lpc2weight</STRONG> (Thumb, 720 bytes, Stack size 64 bytes, decodeframeheaderlpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lpc2weight
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaCosTableGetValue
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaCosTableSetIndex
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WmaCosTableSetReg
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_pow_minus_quater
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_int2pf
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_div
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeFrameHeaderLpc
</UL>

<P><STRONG><a name="[704]"></a>UnpackZeros</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, aac_huffman.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSpectrumLong
</UL>

<P><STRONG><a name="[705]"></a>R4Core</STRONG> (Thumb, 358 bytes, Stack size 68 bytes, aac_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = R4Core
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R4FFT
</UL>

<P><STRONG><a name="[9ca]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[9c0]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[9d8]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[9cf]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[cc]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
