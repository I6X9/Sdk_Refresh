#include "type.h"
#include "otg_device_standard_request.h"

#define	USB_DAC_FREQ				44100			//USB声卡SPEAKER默认采样率
#define	USB_MIC_FREQ				44100			//USB声卡MIC默认采样率


//USB设备描述符
uint8_t DeviceDescriptor[] =
{
	0x12, 		// bLength
	0x01, 		// bDescriptorType
	0x10, 0x01,	// bcdUSB
	0x00, 		// bDeviceClass
	0x00, 		// bDeviceSubClass
	0x00, 		// bDeviceProtocol
	0x40,		// bMaxPacketSize0
	0x00, 0x00, // idVendor
	0x00, 0x00,	// idProduct
	0x00, 0x01, // bcdDevice
	0x01, 		// iManufacturer
	0x02,		// iProduct
	0x03,		// iSerialNumber
	0x01,		// bNumConfigurations
};


#define ConfigDescriptor_Tab(x) 	ConfigDescriptor_##x
#define InterFaceNum_Tab(x) 		InterFaceNum_##x
#define DeviceProductString(x) 		gDeviceProductString_##x

const uint8_t AudioCtrlReportDescriptor[33];
const uint8_t HidDataReportDescriptor[35];
//读卡器
const uint8_t ConfigDescriptor_Tab(READER)[] =
{
	//一共1个接口
	0x09,0x02,0x20,0x00,0x01,0x01,0x00,0x80,0xFA,

	//mass-storage Interface
	0x09,0x04,0x00,0x00,0x02,0x08,0x06,0x50,0x00,
	0x07,0x05,DEVICE_BULK_IN_EP,0x02, DEVICE_FS_BULK_IN_MPS, 0x00,0x01,
	0x07,0x05,DEVICE_BULK_OUT_EP,0x02,DEVICE_FS_BULK_OUT_MPS,0x00,0x01,
};
const uint8_t InterFaceNum_Tab(READER)[] = {0x00,0xFF,0xFF,0xFF,0xFF,0xFF};


//声卡
const uint8_t ConfigDescriptor_Tab(AUDIO)[] =
{
	//一共4个接口
	0x09,0x02,0xE8,0x00,0x04,0x01,0x00,0x80,0x2A,

	//audio control Interface
	0x09,0x04,0x00,0x00,0x00,0x01,0x01,0x00,0x00,
	0x0A,0x24,0x01,0x00,0x01,0x4F,0x00,0x02,0x01,0x02,
	0x0C,0x24,0x02,0x01,0x01,0x01,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x02,0x01,0x01,0x01,0x02,0x02,0x00,
	0x09,0x24,0x03,0x03,0x01,0x03,0x00,0x02,0x00,
	0x0C,0x24,0x02,0x04,0x01,0x02,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x05,0x04,0x01,0x01,0x02,0x02,0x00,
	0x07,0x24,0x05,0x06,0x01,0x05,0x00,
	0x09,0x24,0x03,0x07,0x01,0x01,0x00,0x06,0x00,

	//audio stream Interface, speeaker
	0x09,0x04,0x01,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x01,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x01,0x01,0x01,0x00,
	0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,

	0x09, 0x05, DEVICE_ISO_OUT_EP, 0x09, DEVICE_FS_ISO_OUT_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//audio stream Interface, microphone
	0x09,0x04,0x02,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x02,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x07,0x01,0x01,0x00,

				0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_IN_EP, 0x09, DEVICE_FS_ISO_IN_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//HID interface Descriptor 用于声卡控制
	0x09,0x04,0x03,0x00,0x01,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
	0x07,0x05,DEVICE_INT_IN_EP,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01
};
const uint8_t InterFaceNum_Tab(AUDIO)[] = {0xFF,0x00,0x01,0x02,0x03,0xFF};

const uint8_t ConfigDescriptor_Tab(AUDIO_ONLY_MIC)[] =
{
#ifdef CFG_APP_USB_AUDIO_4MIC_MODE_EN
	//配置描述符，一共2个接口     仅对16K 4ch mic
	0x09, 0x02, 0x77, 0x00, 0x02, 0x01, 0x00, 0x80, 0x2a,

	//声卡控制接口
	0x09, 0x04, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
	0x09, 0x24, 0x01, 0x00, 0x01, 0x2E, 0x00, 0x01, 0x01,
	0x0C, 0x24, 0x02, 0x02, 0x01, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x09, 0x24, 0x03, 0x12, 0x01, 0x01, 0x02, 0x21, 0x00,
	0x07, 0x24, 0x05, 0x21, 0x01, 0x05, 0x00,
	0x09, 0x24, 0x06, 0x05, 0x02, 0x01, 0x03, 0x00, 0x00,

	//声卡数据接口
	0x09, 0x04, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,
	0x09, 0x04, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,
	0x07, 0x24, 0x01, 0x12, 0x01, 0x01, 0x00,
	0x0e, 0x24, 0x02, 0x01, 0x04, 0x02, 0x10, 0x02,0x80, 0x3e, 0x00,0x80, 0x3e, 0x00,
	0x09, 0x05, 0x84, 0x05, 0xC8, 0x00, 0x01, 0x00, 0x00,
	0x07, 0x25, 0x01, 0x01, 0x00, 0x00, 0x00,
#else
	//配置描述符，一共3个接口
	0x09, 0x02, 0x90-7, 0x00, 0x03, 0x01, 0x00, 0x80, 0x2a,

	//声卡控制接口
	0x09, 0x04, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
	0x09, 0x24, 0x01, 0x00, 0x01, 0x2E, 0x00, 0x01, 0x01,
	0x0C, 0x24, 0x02, 0x02, 0x01, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x09, 0x24, 0x03, 0x12, 0x01, 0x01, 0x02, 0x21, 0x00,
	0x07, 0x24, 0x05, 0x21, 0x01, 0x05, 0x00,
	0x09, 0x24, 0x06, 0x05, 0x02, 0x01, 0x03, 0x00, 0x00,

	//声卡数据接口
	0x09, 0x04, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,
	0x09, 0x04, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,
	0x07, 0x24, 0x01, 0x12, 0x01, 0x01, 0x00,
	0x0e, 0x24, 0x02, 0x01, 0x02, 0x02, 0x10, 0x02,0x44, 0xAC, 0x00,0x80, 0xBB, 0x00,
	0x09, 0x05, 0x84, 0x05, 0xC8, 0x00, 0x01, 0x00, 0x00,
	0x07, 0x25, 0x01, 0x01, 0x00, 0x00, 0x00,

	//hid接口
	//0x09, 0x04, 0x02, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00,
	//0x09, 0x21, 0x00, 0x01, 0x00, 0x01, 0x22, sizeof(AudioCtrlReportDescriptor), 0x00,
	//0x07, 0x05, 0x81, 0x03, 0x04, 0x00, 0x20,

	//HID自定数据传输接口
	0x09,0x04,0x04,0x00,0x00,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00,

#endif
};

#ifdef CFG_APP_USB_AUDIO_4MIC_MODE_EN
const uint8_t InterFaceNum_Tab(AUDIO_ONLY_MIC)[] = {0xFF,0x00,0xff,0x01,0xff,0xff};
#else
const uint8_t InterFaceNum_Tab(AUDIO_ONLY_MIC)[] = {0xFF,0x00,0x01,0x02,0x03,0X04};
#endif

//HID数据传输
const uint8_t ConfigDescriptor_Tab(HID)[] = 
{
	//一共1个接口
	0x09, 0x02, 0x1B, 0x00, 0x01, 0x01, 0x00, 0x80, 0xFA,

	//HID自定数据传输接口
	0x09,0x04,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00
};
const uint8_t InterFaceNum_Tab(HID)[] = {0xFF,0xFF,0xFF,0xFF,0xFF,0x00};


//读卡器 & 声卡
const uint8_t ConfigDescriptor_Tab(READER_ADUIO)[] =
{
	//一共5个接口
	0x09,0x02,0xFF,0x00,0x05,0x01,0x00,0x80,0xFA,

	//mass-storage Interface
	0x09,0x04,0x00,0x00,0x02,0x08,0x06,0x50,0x00,
	0x07,0x05,DEVICE_BULK_IN_EP,0x02, DEVICE_FS_BULK_IN_MPS, 0x00,0x01,
	0x07,0x05,DEVICE_BULK_OUT_EP,0x02,DEVICE_FS_BULK_OUT_MPS,0x00,0x01,

	//audio control Interface
	0x09,0x04,0x01,0x00,0x00,0x01,0x01,0x00,0x00,
	0x0A,0x24,0x01,0x00,0x01,0x4F,0x00,0x02,0x02,0x03,
	0x0C,0x24,0x02,0x01,0x01,0x01,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x02,0x01,0x01,0x01,0x02,0x02,0x00,
	0x09,0x24,0x03,0x03,0x01,0x03,0x00,0x02,0x00,
	0x0C,0x24,0x02,0x04,0x01,0x02,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x05,0x04,0x01,0x01,0x02,0x02,0x00,
	0x07,0x24,0x05,0x06,0x01,0x05,0x00,
	0x09,0x24,0x03,0x07,0x01,0x01,0x00,0x06,0x00,

	//audio stream Interface, speeaker
	0x09,0x04,0x02,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x02,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x01,0x01,0x01,0x00,
	0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_OUT_EP, 0x09, DEVICE_FS_ISO_OUT_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//audio stream Interface, microphone
	0x09,0x04,0x03,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x03,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x07,0x01,0x01,0x00,
	0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_IN_EP, 0x09, DEVICE_FS_ISO_IN_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//HID interface Descriptor 用于声卡控制
	0x09,0x04,0x04,0x00,0x01,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
	0x07,0x05,DEVICE_INT_IN_EP,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01
};
const uint8_t InterFaceNum_Tab(READER_ADUIO)[] = {0x00,0x01,0x02,0x03,0x04,0xFF};


//读卡器 & HID数据传输
const uint8_t ConfigDescriptor_Tab(READER_HID)[] =
{
	//一共2个接口
	0x09,0x02,0x32,0x00,0x02,0x01,0x00,0x80,0xFA,

	//mass-storage Interface
	0x09,0x04,0x00,0x00,0x02,0x08,0x06,0x50,0x00,
	0x07,0x05,DEVICE_BULK_IN_EP,0x02, DEVICE_FS_BULK_IN_MPS, 0x00,0x01,
	0x07,0x05,DEVICE_BULK_OUT_EP,0x02,DEVICE_FS_BULK_OUT_MPS,0x00,0x01,

	//HID自定数据传输接口
	0x09,0x04,0x01,0x00,0x00,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00
};
const uint8_t InterFaceNum_Tab(READER_HID)[] = {0x00,0xFF,0xFF,0xFF,0xFF,0x01};



//声卡 & HID数据传输
const uint8_t ConfigDescriptor_Tab(AUDIO_HID)[] =
{
	//一共5个接口
	0x09,0x02,0xFA,0x00,0x05,0x01,0x00,0x80,0x10,

	//audio control Interface
	0x09,0x04,0x00,0x00,0x00,0x01,0x01,0x00,0x00,
	0x0A,0x24,0x01,0x00,0x01,0x4F,0x00,0x02,0x01,0x02,
	0x0C,0x24,0x02,0x01,0x01,0x01,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x02,0x01,0x01,0x01,0x02,0x02,0x00,
	0x09,0x24,0x03,0x03,0x01,0x03,0x00,0x02,0x00,
	0x0C,0x24,0x02,0x04,0x01,0x02,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x05,0x04,0x01,0x01,0x02,0x02,0x00,
	0x07,0x24,0x05,0x06,0x01,0x05,0x00,0x09,0x24,0x03,
	0x07,0x01,0x01,0x00,0x06,0x00,

	//audio stream Interface, speeaker
	0x09,0x04,0x01,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x01,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x01,0x01,0x01,0x00,
	//0x0B,0x24,0x02,0x01,0x02,0x02,0x10,0x01,(uint8_t)(USB_DAC_FREQ >> 0),(uint8_t)(USB_DAC_FREQ >> 8), 0x00,
	0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_OUT_EP, 0x09, DEVICE_FS_ISO_OUT_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,
	
	//audio stream Interface, microphone
	0x09,0x04,0x02,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x02,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x07,0x01,0x01,0x00,
	//0x0B,0x24,0x02,0x01,0x02,0x02,0x10,0x01,(uint8_t)(USB_MIC_FREQ >> 0), (uint8_t)(USB_MIC_FREQ >> 8), 0x00,
	0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_IN_EP, 0x09, DEVICE_FS_ISO_IN_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,
	
	//HID interface Descriptor 用于声卡控制
	0x09,0x04,0x03,0x00,0x01,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
	0x07,0x05,DEVICE_INT_IN_EP,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01,
	
	//HID自定数据传输接口
	0x09,0x04,0x04,0x00,0x00,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00,
};
const uint8_t InterFaceNum_Tab(AUDIO_HID)[] = {0xFF,0x00,0x01,0x02,0x03,0x04};




//读卡器 & 声卡& HID数据传输
const uint8_t ConfigDescriptor_Tab(READER_AUDIO_HID)[] =
{
	//一共6个接口
	0x09,0x02,0x11,0x01,0x06,0x01,0x00,0x80,0xFA,

	//mass-storage Interface
	0x09,0x04,0x00,0x00,0x02,0x08,0x06,0x50,0x00,
	0x07,0x05,DEVICE_BULK_IN_EP,0x02, DEVICE_FS_BULK_IN_MPS, 0x00,0x01,
	0x07,0x05,DEVICE_BULK_OUT_EP,0x02,DEVICE_FS_BULK_OUT_MPS,0x00,0x01,

	//audio control Interface
	0x09,0x04,0x01,0x00,0x00,0x01,0x01,0x00,0x00,
	0x0A,0x24,0x01,0x00,0x01,0x4F,0x00,0x02,0x02,0x03,
	0x0C,0x24,0x02,0x01,0x01,0x01,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x02,0x01,0x01,0x01,0x02,0x02,0x00,
	0x09,0x24,0x03,0x03,0x01,0x03,0x00,0x02,0x00,
	0x0C,0x24,0x02,0x04,0x01,0x02,0x00,0x02,0x03,0x00,0x00,0x00,
	0x0A,0x24,0x06,0x05,0x04,0x01,0x01,0x02,0x02,0x00,
	0x07,0x24,0x05,0x06,0x01,0x05,0x00,
	0x09,0x24,0x03,0x07,0x01,0x01,0x00,0x06,0x00,

	//audio stream Interface, speeaker
	0x09,0x04,0x02,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x02,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x01,0x01,0x01,0x00,
	//0x0B,0x24,0x02,0x01,0x02,0x02,0x10,0x01,(uint8_t)(USB_DAC_FREQ >> 0),(uint8_t)(USB_DAC_FREQ >> 8), 0x00,
	0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_OUT_EP, 0x09, DEVICE_FS_ISO_OUT_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//audio stream Interface, microphone
	0x09,0x04,0x03,0x00,0x00,0x01,0x02,0x00,0x00,
	0x09,0x04,0x03,0x01,0x01,0x01,0x02,0x00,0x00,
	0x07,0x24,0x01,0x07,0x01,0x01,0x00,
	//0x0B,0x24,0x02,0x01,0x02,0x02,0x10,0x01,(uint8_t)(USB_MIC_FREQ >> 0), (uint8_t)(USB_MIC_FREQ >> 8), 0x00,
	0x0E,0x24,0x02,0x01,0x02,0x02,0x10,0x02,0x44,0xAC, 0x00,0x80,0xBB, 0x00,
	0x09, 0x05, DEVICE_ISO_IN_EP, 0x09, DEVICE_FS_ISO_IN_MPS, 0x00, 0x01, 0x00, 0x00,
	0x07,0x25,0x01,0x01,0x00,0x00,0x00,

	//HID interface Descriptor 用于声卡控制
	0x09,0x04,0x04,0x00,0x01,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(AudioCtrlReportDescriptor),0x00,
	0x07,0x05,DEVICE_INT_IN_EP,0x03,DEVICE_FS_INT_IN_MPS,0x00,0x01,

	//HID自定数据传输接口
	0x09,0x04,0x05,0x00,0x00,0x03,0x00,0x00,0x00,
	0x09,0x21,0x01,0x02,0x00,0x01,0x22,sizeof(HidDataReportDescriptor),0x00
};
const uint8_t InterFaceNum_Tab(READER_AUDIO_HID)[] = {0x00,0x01,0x02,0x03,0x04,0X05};

//读卡器 & 声卡& HID数据传输
const uint8_t ConfigDescriptor_Tab(AUDIO_HID_KEY)[] =
{
	//配置描述符，一共4个接口
	0x09, 0x02, 0x90+25, 0x00, 0x04, 0x01, 0x00, 0x80, 0x32,

	//声卡控制接口
	0x09, 0x04, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
	0x09, 0x24, 0x01, 0x00, 0x01, 0x2E, 0x00, 0x01, 0x01,
	0x0C, 0x24, 0x02, 0x02, 0x01, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x09, 0x24, 0x03, 0x12, 0x01, 0x01, 0x02, 0x21, 0x00,
	0x07, 0x24, 0x05, 0x21, 0x01, 0x05, 0x00,
	0x09, 0x24, 0x06, 0x05, 0x02, 0x01, 0x03, 0x00, 0x00,

	//声卡数据接口
	0x09, 0x04, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,
	0x09, 0x04, 0x01, 0x01, 0x01, 0x01, 0x02, 0x00, 0x00,
	0x07, 0x24, 0x01, 0x12, 0x01, 0x01, 0x00,
	0x0e, 0x24, 0x02, 0x01, 0x01, 0x02, 0x10, 0x02,0x44, 0xAC, 0x00,0x80, 0xBB, 0x00,
	0x09, 0x05, 0x84, 0x05, 0xC8, 0x00, 0x01, 0x00, 0x00,
	0x07, 0x25, 0x01, 0x01, 0x00, 0x00, 0x00,

	//hid接口
	0x09, 0x04, 0x02, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00,
	0x09, 0x21, 0x00, 0x01, 0x00, 0x01, 0x22, sizeof(AudioCtrlReportDescriptor), 0x00,
	0x07, 0x05, 0x81, 0x03, 0x04, 0x00, 0x20,

	//hid接口
	0x09, 0x04, 0x03, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00,
	0x09, 0x21, 0x00, 0x01, 0x00, 0x01, 0x22, sizeof(HidDataReportDescriptor), 0x00,
	0x07, 0x05, 0x82, 0x03, 0x08, 0x00, 0x01,
};

const uint8_t InterFaceNum_Tab(AUDIO_HID_KEY)[] = {0xFF,0x00,0x01,0x02,0x03,0X04};

const uint8_t HidDataReportDescriptor[] =
{
	0x06, 0x00, 0xFF,
	0x09, 0x01,
	0xA1, 0x01,
	0x15, 0x00,
	0x26, 0xFF, 0x00,
	0x75, 0x08,

	0x96, 0x00, 0x01,
	0x09, 0x01,
	0x81, 0x02,

	0x96, 0x00, 0x01,
	0x09, 0x01,
	0x91, 0x02,

	0x95, 0x08,
	0x09, 0x01,
	0xB1, 0x02,
	0xC0
};


const uint8_t AudioCtrlReportDescriptor[] =
{
	0x05, 0x0C,	//Usage Page (Consumer)
	0x09, 0x01, //Usage (Consumer Control)
	0xA1, 0x01,	//Collection (Application)
	0x15, 0x00,	//Logical minimum (0)
	0x25, 0x01,	//Logical maximum (1)

	0x09, 0xE9,	//VOL+
	0x09, 0xEA, //VOL-
	0x09, 0xB5, //Scan Next Track
	0x09, 0xB6, //Scan Previous Track
	0x09, 0xE2, //Mute
	0x09, 0xB3, //Fast Forward OOC 15.7
	0x09, 0xCD, //Play/Pause
	0x09, 0xB7, //Stop

	0x75, 0x01,	//Report Size (1)
	0x95, 0x08, //Report Count (8)
	0x81, 0x42,
	0xC0
};

char *gDeviceProductStringTab[9] =
{
	"USB CARD READER",
	"USB AUDIO",
	"USB HID",
	"USB AUDIO & CARD READER",
	"USB CARD READER & HID",
	"USB AUDIO & HID",
	"USB AUDIO & CARD READER & HID"	,
	"AUDIO_HID_KEY",
	"MIC"
};

	
//
const uint8_t *ConfigDescriptorTab[9] =
{
	ConfigDescriptor_Tab(READER),
	ConfigDescriptor_Tab(AUDIO),
	ConfigDescriptor_Tab(HID),
	ConfigDescriptor_Tab(READER_ADUIO),
	ConfigDescriptor_Tab(READER_HID),
	ConfigDescriptor_Tab(AUDIO_HID),
	ConfigDescriptor_Tab(READER_AUDIO_HID),
	ConfigDescriptor_Tab(AUDIO_HID_KEY),
	ConfigDescriptor_Tab(AUDIO_ONLY_MIC)
};

const uint8_t *InterFaceNumTab[9] =
{
	InterFaceNum_Tab(READER),
	InterFaceNum_Tab(AUDIO),
	InterFaceNum_Tab(HID),
	InterFaceNum_Tab(READER_ADUIO),
	InterFaceNum_Tab(READER_HID),
	InterFaceNum_Tab(AUDIO_HID),
	InterFaceNum_Tab(READER_AUDIO_HID),
	InterFaceNum_Tab(AUDIO_HID_KEY),
	InterFaceNum_Tab(AUDIO_ONLY_MIC)
};

